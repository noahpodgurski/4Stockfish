"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatemeleelight"]("main",{

/***/ "./src/menus/credits.ts":
/*!******************************!*\
  !*** ./src/menus/credits.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.cShot = exports.cStar = void 0;\nexports.ScrollingText = ScrollingText;\nexports.credits = credits;\nexports.drawCreditsInit = drawCreditsInit;\nexports.drawCreditsInfo = drawCreditsInfo;\nexports.drawCredits = drawCredits;\nconst main_1 = __webpack_require__(/*! main/main */ \"./src/main/main.ts\");\nconst sfx_1 = __webpack_require__(/*! main/sfx */ \"./src/main/sfx.ts\");\nconst Vec2D_1 = __webpack_require__(/*! ../main/util/Vec2D */ \"./src/main/util/Vec2D.ts\");\n/* eslint-disable */\nconst twoPi = Math.PI * 2;\n//scrolling top down\nlet shoot_cooldown = 0;\nlet initc = true; //whether or not credits should be initialized. Should be set to true every time credits is activated\nconst cXSize = 1200; //not real values. Please update with real values of the size of the canvas\nconst cYSize = 750; //To consider when setting the cYSize. make room for bar at bottom showing information of that person?\n//Current bar at bottom of screen is 50 pixels tall. Fill that shit out yourself.\nlet cScore = 0;\nconst cBoundX = (cXSize * 1.2098); //credits stick bounding octagon roughly circumscribes canvas size square\nconst cBoundY = (cYSize * 1.2098);\nconst cRectLength = 25;\nconst cRectSpace = 10;\nconst cDefaultAngles = [0, .5 * Math.PI, Math.PI, 1.5 * Math.PI];\nlet cCursorAngle = 0;\nlet cXPos = cXSize / 2;\nlet cYPos = cYSize / 2;\nlet cPlayerXPos = cXSize / 2;\nlet cPlayerYPos = cYSize / 2;\nlet cScrollingPos = 0;\nlet cShootBuffer = false;\nlet cScrollingMax = 5000; // max scrolling distance in y coords. Can change this when you want more names or w/e\nconst cScrollingSpeed = -2; //y pos per frame?             SEE THIS: maybe mess around with this a little. make it faster / slower\nlet lastHit = [0, 0, false]; //[timer,index of creditNames] timer is set whenever you hit a credit and counts down every frame. if it reaches 0, information is no longer displayed.\n//lasthit[2] is for whether or not bottom bar is cleared.\nlet currentLaserColor = 0; //laser color vars\nconst laserColors = [\n    \"rgb(255, 15, 5)\",\n    \"rgb(15, 5, 255)\",\n    \"rgb(5, 255, 15)\",\n    \"rgb(255, 85, 3)\"\n];\nlet laserColor = laserColors[currentLaserColor];\nfunction ScrollingText(text, yPos, position, information) {\n    this.Text = text;\n    this.xPos = Math.floor((Math.random() * Math.round(cXSize * 0.5)) + (cXSize * .25));\n    this.yPos = yPos;\n    this.fontSize = 36;\n    //this.fontSize = fontSize; //font should always be Consolas. Font size IS 36px\n    this.position = position; //position in development\n    this.information = information; //more information?\n    this.isShot = false; //whether or not it has been shot\n    this.xMax = Math.floor((Math.random() * 150) + 50);\n    this.xVal = 0;\n    this.xDirection = Math.floor(Math.random() + 1);\n    this.canRender = false;\n    this.size = function () {\n        return ([\n            [this.xPos, this.xPos + (20 * this.Text.length)],\n            [this.yPos - 23, this.yPos]\n        ]); //returns [[xMin,xMax],[yMin,yMax]]\n    };\n    this.checkIfShouldRender = function (cY) {\n        const size = this.size();\n        if (size[1][0] < cY && size[1][1] > 0) { //can render\n            this.canRender = true;\n        }\n        else {\n            this.canRender = false;\n        }\n    };\n    this.isHovering = function (x, y) {\n        const size = this.size();\n        if (x >= size[0][0] && x <= size[0][1] && y >= size[1][0] && y <= size[1][1]) {\n            return true;\n        }\n        return false;\n    };\n    this.checkIfShot = function (x, y) {\n        if (this.isShot == false) {\n            if (this.isHovering(x, y)) {\n                this.isShot = true;\n                return true;\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false; //can't be shot twice\n        }\n    };\n    this.scrollY = function (y) {\n        if ((this.xVal == this.xMax) && this.xDirection == 1) {\n            this.xDirection = 0;\n        }\n        else if ((this.xVal == -1 * this.xMax) && this.xDirection == 0) {\n            this.xDirection = 1;\n        }\n        this.xPos += -1 + (2 * this.xDirection);\n        this.xVal += -1 + (2 * this.xDirection);\n        this.yPos += y;\n    };\n}\nlet creditNames = []; //list of scrollingText objects SEE PLEASE:                FILL THIS SHIT IN\n//font MUST be Courier because its a monospaced font and every letter in it is the same width. Wouldn't be able to calculate size without it\nfunction credits(p, input) {\n    if (input[p][0].x && !input[p][1].x) {\n        currentLaserColor = (currentLaserColor === laserColors.length - 1) ? 0 : currentLaserColor + 1;\n        laserColor = laserColors[currentLaserColor];\n    }\n    if (input[p][0].y && !input[p][1].y) {\n        currentLaserColor = (currentLaserColor === 0) ? (laserColors.length - 1) : currentLaserColor - 1;\n        laserColor = laserColors[currentLaserColor];\n    }\n    if (initc) {\n        cScrollingPos = 0;\n        lastHit = [0, 0, false]; //see notes above\n        creditNames = [\n            new ScrollingText(\"Schmoo\", 800, \"Creator, Main Developer\", \"Made the game.\"),\n            new ScrollingText(\"Tatatat0\", 1100, \"Programmer\", \"Created the AI and credits.\"),\n            new ScrollingText(\"bites\", 1400, \"Animation Assistant, Level Design\", \"Helped develop animation process & designed target stages.\"),\n            new ScrollingText(\"shf\", 1700, \"Programmer, Mathematician\", \"Input conversion and environmental collision.\"),\n            new ScrollingText(\"Nehgromancer\", 2000, \"Programmer\", \"Refactoring and networking.\"),\n            new ScrollingText(\"BonesMalones\", 2300, \"Programmer\", \"Refactoring and optimization.\"),\n            new ScrollingText(\"TJohnW\", 2400, \"Programmer\", \"Refactoring and code quality.\"),\n            new ScrollingText(\"WwwWario\", 2700, \"Support\", \"Helping users troubleshoot and being a homie!\"),\n            new ScrollingText(\"Mrjhrock2010\", 3000, \"Support\", \"Helping people out and trash talking in netplay.\"),\n            new ScrollingText(\"zircon\", 3300, \"Musician\", \"Smash Superstars (Menu Theme)\"),\n            new ScrollingText(\"Buoy\", 3600, \"Musician\", \"Rush of the Rainforest (YStory Theme) & Target Blitz (Target Theme)\"),\n            new ScrollingText(\"Tom Mauritzon\", 3900, \"Musician\", \"Mega Helix (PStadium Theme)\"),\n            new ScrollingText(\"Rozen\", 4200, \"Musician\", \"Kumite (Battlefield Theme)\"),\n            new ScrollingText(\"Zack Parrish\", 4500, \"Musician\", \"Sunny Side Up (Dreamland Theme)\")\n        ];\n        cScore = 0;\n        cShootBuffer = false;\n        cCursorAngle = 0;\n        initc = false;\n    }\n    //cScore = 9;\n    if (cCursorAngle >= 360) {\n        cCursorAngle = 0;\n    }\n    cScrollingPos -= cScrollingSpeed;\n    let yDif = 0;\n    if (input[p][0].s === true || input[p][0].l === true || input[p][0].r === true) {\n        //is holding down start. Should increase speed\n        cCursorAngle += 4.5;\n        yDif = Math.round(cScrollingSpeed * 1.5);\n    }\n    else {\n        cCursorAngle += 3;\n        yDif = Math.round(cScrollingSpeed);\n    }\n    // iterate through creditNames and change y pos based on y dif\n    for (var i = 0; i < creditNames.length; i++) {\n        creditNames[i].scrollY(yDif); //scrolls credit names\n        creditNames[i].checkIfShouldRender(cYSize); //updates render state\n    }\n    //draw credit information\n    if (lastHit[0] > 0) {\n        lastHit[0] -= 1;\n    }\n    else { //credit information timer is up\n        if (lastHit[2] == false) {\n            //CLEAR BOTTOM BAR. Do this yourself.\n            lastHit[2] = true;\n        }\n    }\n    //l stick to pos\n    cPlayerXPos = Math.round(((cBoundX / 2) + ((input[p][0].rawX) * (cBoundX / 2))) - ((cBoundX -\n        cXSize) / 2));\n    cPlayerYPos = Math.round(((cBoundY / 2) + ((-1 * input[p][0].rawY) * (cBoundY / 2))) - ((cBoundY -\n        cYSize) / 2));\n    //cast positions to canvas size\n    if (cPlayerXPos < 0) {\n        cPlayerXPos = 0;\n    }\n    if (cPlayerXPos > cXSize) {\n        cPlayerXPos = cXSize;\n    }\n    if (cPlayerYPos < 0) {\n        cPlayerYPos = 0;\n    }\n    if (cPlayerYPos > cYSize) {\n        cPlayerYPos = cYSize;\n    }\n    if (shoot_cooldown == 0) {\n        if ((input[p][0].a && !input[p][1].a) || cShootBuffer) {\n            //is shooting\n            sfx_1.sounds.foxlaserfire.play();\n            cShots.push(new cShot(new Vec2D_1.Vec2D(cPlayerXPos, cPlayerYPos), new Vec2D_1.Vec2D(0, 0), 0));\n            cShots.push(new cShot(new Vec2D_1.Vec2D(cPlayerXPos, cPlayerYPos), new Vec2D_1.Vec2D(1200, 0), 1));\n            shoot_cooldown = 8;\n            cShootBuffer = false;\n        }\n    }\n    else {\n        if (input[p][0].a && !input[p][1].a) {\n            cShootBuffer = true;\n        }\n        shoot_cooldown -= 1;\n    }\n    for (let n = 0; n < cShots.length; n++) {\n        if (cShots[n].life == 15) {\n            let madeShot = [false, 0];\n            for (let i = 0; i < creditNames.length; i++) {\n                if (!(creditNames[i].isShot)) {\n                    if (creditNames[i].checkIfShot(cShots[n].target.x, 750 - cShots[n].target.y)) {\n                        madeShot = [true, i];\n                    }\n                }\n            }\n            if (madeShot[0]) {\n                sfx_1.sounds.targetBreak.play();\n                lastHit[2] = false;\n                lastHit[0] = 600;\n                lastHit[1] = madeShot[1];\n                cScore += 1;\n                drawCreditsInfo();\n            }\n        }\n    }\n    if (cScrollingPos >= cScrollingMax) {\n        if (cScore === creditNames.length) {\n            sfx_1.sounds.complete.play();\n        }\n        else {\n            sfx_1.sounds.failure.play();\n        }\n        initc = true;\n        input[p][1].b = true;\n        cShots = [];\n        lastHit = [0, 0, false];\n        creditNames = [];\n        (0, main_1.changeGamemode)(1);\n    }\n    else if (input[p][0].b && !input[p][1].b) {\n        initc = true;\n        sfx_1.sounds.menuBack.play();\n        input[p][1].b = true;\n        cShots = [];\n        lastHit = [0, 0, false];\n        creditNames = [];\n        (0, main_1.changeGamemode)(1);\n    }\n}\nfunction drawCreditsInit() {\n    main_1.bg2.clearRect(0, 0, 1200, 750);\n    main_1.fg1.clearRect(0, 0, 1200, 750);\n    main_1.fg2.clearRect(0, 0, 1200, 750);\n    main_1.ui.clearRect(0, 0, 1200, 750);\n    drawCreditsInfo();\n}\nclass cStar {\n    constructor() {\n        this.vel = 4 + Math.random() * 4;\n        this.life = Math.round(Math.random() * 100 + 10 * (this.vel - 4));\n        this.angle = twoPi * Math.random();\n        this.pos = new Vec2D_1.Vec2D(600 + this.vel * Math.cos(this.angle) * this.life, 375 + this.vel * Math.sin(this.angle) * this.life);\n    }\n}\nexports.cStar = cStar;\nconst cStars = [];\nfor (let n = 0; n < 100; n++) {\n    cStars.push(new cStar());\n}\nvar cShots = [];\nclass cShot {\n    constructor(target, position, type) {\n        this.vel = 0.3;\n        this.life = 0;\n        this.target = new Vec2D_1.Vec2D(target.x, 750 - target.y);\n        this.position = position;\n        this.lastPosition = position;\n        this.lastPosition2 = position;\n        this.angle = Math.atan((this.target.y - this.position.y) / (this.target.x - this.position.x));\n        if (type) {\n            this.angle = Math.PI + this.angle;\n        }\n        this.distance = Math.sqrt(Math.pow(this.target.y - this.position.y, 2) + Math.pow(this.target.x - this.position.x, 2));\n    }\n}\nexports.cShot = cShot;\nfunction drawCreditsInfo() {\n    main_1.ui.clearRect(0, 0, 1200, 750);\n    main_1.ui.font = \"900 40px Consolas\";\n    main_1.ui.strokeStyle = \"rgba(255, 255, 255, 0.7)\";\n    main_1.ui.lineWidth = 2;\n    main_1.ui.fillStyle = \"rgba(0,0,0,0.7)\";\n    main_1.ui.fillRect(100, 640, 1000, 60);\n    main_1.ui.strokeRect(100, 640, 1000, 60);\n    main_1.ui.fillRect(100, 560, 330, 70);\n    main_1.ui.fillRect(430, 560, 670, 70);\n    main_1.ui.strokeRect(100, 560, 330, 70);\n    main_1.ui.strokeRect(430, 560, 670, 70);\n    main_1.ui.fillRect(1000, 50, 150, 50);\n    main_1.ui.strokeRect(1000, 50, 150, 50);\n    main_1.ui.fillStyle = \"white\";\n    main_1.ui.textAlign = \"center\";\n    if (!lastHit[2]) {\n        if (typeof creditNames[lastHit[1]] != \"undefined\") {\n            main_1.ui.fillText(creditNames[lastHit[1]].Text, 265, 610);\n            main_1.ui.font = \"900 35px Consolas\";\n            main_1.ui.fillText(creditNames[lastHit[1]].position, 765, 610);\n            main_1.ui.font = \"900 25px Consolas\";\n            main_1.ui.fillText(creditNames[lastHit[1]].information, 600, 680);\n        }\n    }\n    main_1.ui.font = \"900 35px Consolas\";\n    main_1.ui.fillText(cScore + \" Hit\", 1075, 85);\n}\nfunction drawCredits() {\n    main_1.fg1.clearRect(0, 0, 1200, 750);\n    main_1.bg2.fillStyle = \"rgba(0,0,0,0.4)\";\n    main_1.bg2.fillRect(0, 0, 1200, 750);\n    for (let n = 0; n < 100; n++) {\n        cStars[n].life++;\n        if (cStars[n].life == 200) {\n            cStars[n].vel = 4 + Math.random() * 4;\n            cStars[n].life = Math.round(10 * (cStars[n].vel - 4));\n            cStars[n].angle = twoPi * Math.random();\n            cStars[n].pos = new Vec2D_1.Vec2D(600 + cStars[n].vel * Math.cos(cStars[n].angle) * cStars[n].life, 375 + cStars[n].vel *\n                Math.sin(cStars[n].angle) * cStars[n].life);\n        }\n        cStars[n].pos.x += cStars[n].vel * Math.cos(cStars[n].angle);\n        cStars[n].pos.y += cStars[n].vel * Math.sin(cStars[n].angle);\n        const col = Math.min(255, cStars[n].life * 3);\n        main_1.bg2.fillStyle = \"rgb(\" + col + \",\" + col + \",\" + col + \")\";\n        main_1.bg2.fillRect(cStars[n].pos.x, cStars[n].pos.y, 3, 3);\n    }\n    const cShotDestroyQueue = [];\n    for (let m = 0; m < cShots.length; m++) {\n        cShots[m].life++;\n        cShots[m].vel *= 0.77;\n        cShots[m].lastPosition2 = new Vec2D_1.Vec2D(cShots[m].lastPosition.x, cShots[m].lastPosition.y);\n        cShots[m].lastPosition = new Vec2D_1.Vec2D(cShots[m].position.x, cShots[m].position.y);\n        cShots[m].position.x += cShots[m].vel * cShots[m].distance * Math.cos(cShots[m].angle);\n        cShots[m].position.y += cShots[m].vel * cShots[m].distance * Math.sin(cShots[m].angle);\n        if (cShots[m].life == 25) {\n            cShotDestroyQueue.push(m);\n        }\n        else {\n            main_1.bg2.lineWidth = Math.max(1, (20 - cShots[m].life));\n            main_1.bg2.strokeStyle = laserColor;\n            main_1.bg2.beginPath();\n            main_1.bg2.moveTo(cShots[m].lastPosition2.x, 750 - cShots[m].lastPosition2.y);\n            main_1.bg2.lineTo(cShots[m].position.x, 750 - cShots[m].position.y);\n            main_1.bg2.closePath();\n            main_1.bg2.stroke();\n        }\n    }\n    let del = 0;\n    for (let k = 0; k < cShotDestroyQueue.length; k++) {\n        cShots.splice(cShotDestroyQueue[k] - del, 1);\n        del++;\n    }\n    main_1.fg1.font = \"500 36px Consolas\";\n    main_1.fg1.fillStyle = \"white\";\n    main_1.fg1.textAlign = \"start\";\n    for (let i = 0; i < creditNames.length; i++) {\n        if (creditNames[i].canRender) {\n            if (creditNames[i].isShot) {\n                main_1.fg1.fillStyle = \"rgb(227, 89, 89)\";\n            }\n            else {\n                main_1.fg1.fillStyle = \"white\";\n            }\n            main_1.fg1.fillText(creditNames[i].Text, creditNames[i].xPos, creditNames[i].yPos);\n        }\n    }\n    main_1.fg1.strokeStyle = \"rgba(255, 255, 255, 0.7)\";\n    if (initc === false) {\n        for (let i = 0; i < creditNames.length; i++) {\n            if (!(creditNames[i].isShot)) {\n                if (creditNames[i].isHovering(cPlayerXPos, cPlayerYPos)) {\n                    main_1.fg1.strokeStyle = \"rgba(204, 0, 0, 0.7)\";\n                }\n            }\n        }\n    }\n    if (initc === true) {\n        main_1.fg1.lineWidth = 9;\n        main_1.fg1.beginPath();\n        main_1.fg1.arc(cPlayerXPos, cPlayerYPos, 35, 0, twoPi);\n        main_1.fg1.moveTo(cPlayerXPos, cPlayerYPos + 35);\n        main_1.fg1.lineTo(cPlayerXPos, cPlayerYPos + 10);\n        main_1.fg1.moveTo(cPlayerXPos, cPlayerYPos - 35);\n        main_1.fg1.lineTo(cPlayerXPos, cPlayerYPos - 10);\n        main_1.fg1.moveTo(cPlayerXPos + 35, cPlayerYPos);\n        main_1.fg1.lineTo(cPlayerXPos + 10, cPlayerYPos);\n        main_1.fg1.moveTo(cPlayerXPos - 35, cPlayerYPos);\n        main_1.fg1.lineTo(cPlayerXPos - 10, cPlayerYPos);\n        main_1.fg1.closePath();\n        main_1.fg1.stroke();\n    }\n    else {\n        main_1.fg1.lineWidth = 9;\n        main_1.fg1.beginPath();\n        main_1.fg1.arc(cPlayerXPos, cPlayerYPos, 35, 0, twoPi);\n        //const cRectLength = 25;\n        //const cRectSpace = 10;\n        //const cDefaultAngles = [0,.5 * Math.PI, Math.PI, 1.5 * Math.PI,twoPi];\n        let radiansAngle = ((cCursorAngle / 180) * Math.PI);\n        let cRectPos = [[[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]], [[0, 0], [0, 0]]];\n        for (let i = 0; i < cDefaultAngles.length; i++) {\n            cRectPos[i][0][0] = Math.cos((cDefaultAngles[i] + radiansAngle)) * (cRectSpace);\n            cRectPos[i][0][1] = Math.sin((cDefaultAngles[i] + radiansAngle)) * (cRectSpace);\n            cRectPos[i][1][0] = Math.cos((cDefaultAngles[i] + radiansAngle)) * (cRectLength + cRectSpace);\n            cRectPos[i][1][1] = Math.sin((cDefaultAngles[i] + radiansAngle)) * (cRectLength + cRectSpace);\n        }\n        for (let i = 0; i < cRectPos.length; i++) {\n            main_1.fg1.moveTo(cPlayerXPos + cRectPos[i][0][0], cPlayerYPos + cRectPos[i][0][1]);\n            main_1.fg1.lineTo(cPlayerXPos + cRectPos[i][1][0], cPlayerYPos + cRectPos[i][1][1]);\n        }\n        //for (let ia = 0; ia < cDefaultAngles.length; i++) {\n        //\t fg1.moveTo(cPlayerXPos + (Math.cos((cDefaultAngles[ia] + radiansAngle)) * (cRectSpace)), cPlayerYPos + (Math.sin((cDefaultAngles[ia] + radiansAngle)) * (cRectSpace)));\n        //  fg1.lineTo(cPlayerXPos + (Math.cos((cDefaultAngles[ia] + radiansAngle)) * (cRectLength + cRectSpace)), cPlayerYPos + (Math.sin((cDefaultAngles[ia] + radiansAngle)) * (cRectLength + cRectSpace)));\n        //}\n        main_1.fg1.closePath();\n        main_1.fg1.stroke();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/menus/credits.ts\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("55457d199c287208afea")
/******/ })();
/******/ 
/******/ }
);