"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatemeleelight"]("main",{

/***/ "./src/physics/physics.ts":
/*!********************************!*\
  !*** ./src/physics/physics.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n//@flow\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.land = land;\nexports.physics = physics;\nconst main_1 = __webpack_require__(/*! ../main/main */ \"./src/main/main.ts\");\nconst characters_1 = __webpack_require__(/*! ../main/characters */ \"./src/main/characters.ts\");\nconst sfx_1 = __webpack_require__(/*! ../main/sfx */ \"./src/main/sfx.ts\");\nconst settings_1 = __webpack_require__(/*! ../settings */ \"./src/settings.ts\");\nconst actionStateShortcuts_1 = __webpack_require__(/*! ./actionStateShortcuts */ \"./src/physics/actionStateShortcuts.ts\");\nconst hitDetection_1 = __webpack_require__(/*! ./hitDetection */ \"./src/physics/hitDetection.ts\");\nconst render_1 = __webpack_require__(/*! ../main/render */ \"./src/main/render.ts\");\nconst environmentalCollision_1 = __webpack_require__(/*! ./environmentalCollision */ \"./src/physics/environmentalCollision.ts\");\nconst deepCopyObject_1 = __webpack_require__(/*! ../main/util/deepCopyObject */ \"./src/main/util/deepCopyObject.ts\");\nconst drawVfx_1 = __webpack_require__(/*! ../main/vfx/drawVfx */ \"./src/main/vfx/drawVfx.js\");\nconst stage_1 = __webpack_require__(/*! ../stages/stage */ \"./src/stages/stage.ts\");\nconst activeStage_1 = __webpack_require__(/*! ../stages/activeStage */ \"./src/stages/activeStage.ts\");\nconst Box2D_1 = __webpack_require__(/*! ../main/util/Box2D */ \"./src/main/util/Box2D.ts\");\nconst Vec2D_1 = __webpack_require__(/*! ../main/util/Vec2D */ \"./src/main/util/Vec2D.ts\");\nconst toList_1 = __webpack_require__(/*! ../main/util/toList */ \"./src/main/util/toList.ts\");\nconst extremePoint_1 = __webpack_require__(/*! ../stages/util/extremePoint */ \"./src/stages/util/extremePoint.ts\");\nconst ecbTransform_1 = __webpack_require__(/*! ../main/util/ecbTransform */ \"./src/main/util/ecbTransform.ts\");\nconst linAlg_1 = __webpack_require__(/*! ../main/linAlg */ \"./src/main/linAlg.ts\");\nfunction updatePosition(i, newPosition) {\n    main_1.player[i].phys.pos = newPosition;\n}\n;\nfunction dealWithDamagingStageCollision(i, normal, corner, angular, damageType) {\n    const collisionData = { normal: normal, angular: angular, corner: corner };\n    let damageTypeIndex = -1;\n    switch (damageType) {\n        case \"fire\":\n            damageTypeIndex = 3;\n            break;\n        case \"electric\":\n            damageTypeIndex = 4;\n            break;\n        case \"slash\":\n            damageTypeIndex = 1;\n            break;\n        case \"darkness\":\n            damageTypeIndex = 5;\n            break;\n        default:\n            break;\n    }\n    if (damageTypeIndex !== -1) {\n        hitDetection_1.hitQueue.push([i, collisionData, damageTypeIndex, false, false, true]);\n    }\n}\nfunction dealWithWallCollision(i, newPosition, pt, wallType, wallIndex, input) {\n    updatePosition(i, newPosition);\n    let wallLabel = \"L\";\n    let sign = -1;\n    let isRight = 0;\n    if (wallType[0].toLowerCase() === \"r\") {\n        wallLabel = \"R\";\n        sign = 1;\n        isRight = 1;\n    }\n    const wall = (0, stage_1.getSurfaceFromStage)([wallType, wallIndex], activeStage_1.activeStage);\n    const wallBottom = (0, extremePoint_1.extremePoint)(wall, \"b\");\n    const wallTop = (0, extremePoint_1.extremePoint)(wall, \"t\");\n    const wallNormal = (0, environmentalCollision_1.outwardsWallNormal)(wallBottom, wallTop, wallType);\n    const damageType = wall[2] === undefined ? null : wall[2].damageType;\n    const inDamageState = main_1.player[i].actionState === \"DAMAGEFLYN\" || main_1.player[i].actionState === \"WALLDAMAGE\" || main_1.player[i].actionState === \"DAMAGEFALL\";\n    if (inDamageState && main_1.player[i].phys.techTimer > 0) {\n        main_1.player[i].phys.face = sign;\n        if (input[i][0].x || input[i][0].y || input[i][0].lsY > 0.7) {\n            actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].WALLTECHJUMP.init(i, input);\n        }\n        else {\n            actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].WALLTECH.init(i, input);\n        }\n    }\n    else if (inDamageState && Math.sign(main_1.player[i].phys.kVel) !== sign && main_1.player[i].hit.hitlag === 0 && Math.pow(main_1.player[i].phys.kVel.x, 2) + Math.pow(main_1.player[i].phys.kVel.y, 2) >= 2.25) {\n        main_1.player[i].phys.face = sign;\n        (0, drawVfx_1.drawVfx)({\n            name: \"wallBounce\",\n            pos: new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x, main_1.player[i].phys.ECBp[1].y),\n            face: sign,\n            f: wallNormal\n        });\n        actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].WALLDAMAGE.init(i, input, wallNormal);\n    }\n    else if (main_1.player[i].hit.hitlag === 0) {\n        if (damageType !== undefined && damageType !== null\n            && main_1.player[i].phys.hurtBoxState === 0) {\n            // apply damage\n            dealWithDamagingStageCollision(i, wallNormal, false, pt, damageType);\n        }\n        else if (actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].specialWallCollide) {\n            actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].onWallCollide(i, input, wallLabel, wallIndex);\n        }\n        else if (main_1.player[i].phys.canWallJump) {\n            if (main_1.player[i].phys.wallJumpTimer === 254) {\n                if (main_1.player[i].phys.posDelta.x >= 0.5) {\n                    main_1.player[i].phys.wallJumpTimer = 0;\n                }\n            }\n        }\n        if (main_1.player[i].phys.wallJumpTimer >= 0 && main_1.player[i].phys.wallJumpTimer < 120) {\n            if (sign * input[i][0].lsX >= 0.7 &&\n                sign * input[i][3].lsX <= 0 &&\n                main_1.player[i].charAttributes.walljump) {\n                main_1.player[i].phys.wallJumpTimer = 254;\n                main_1.player[i].phys.face = sign;\n                actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].WALLJUMP.init(i, input);\n            }\n            else {\n                main_1.player[i].phys.wallJumpTimer++;\n            }\n        }\n    }\n}\n;\nfunction dealWithPlatformCollision(i, alreadyGrounded, newPosition, ecbpBottom, platformIndex, input) {\n    const platform = (0, stage_1.getSurfaceFromStage)([\"p\", platformIndex], activeStage_1.activeStage);\n    const damageType = platform[2] === undefined ? null : platform[2].damageType;\n    const platLeft = (0, extremePoint_1.extremePoint)(platform, \"l\");\n    const platRight = (0, extremePoint_1.extremePoint)(platform, \"r\");\n    const platNormal = (0, environmentalCollision_1.outwardsWallNormal)(platLeft, platRight, \"g\");\n    if (main_1.player[i].hit.hitlag > 0 || alreadyGrounded || main_1.player[i].phys.grabbedBy !== -1) {\n        updatePosition(i, newPosition);\n    }\n    else {\n        land(i, ecbpBottom, 1, platformIndex, platNormal, input);\n    }\n}\n;\nfunction dealWithGroundCollision(i, alreadyGrounded, newPosition, ecbpBottom, groundIndex, input) {\n    const ground = (0, stage_1.getSurfaceFromStage)([\"g\", groundIndex], activeStage_1.activeStage);\n    const damageType = ground[2] === undefined ? null : ground[2].damageType;\n    const ignoreDamage = main_1.player[i].actionState === \"DAMAGEFLYN\" || main_1.player[i].actionState === \"DAMAGEFALL\" || main_1.player[i].actionState === \"WALLDAMAGE\";\n    const groundLeft = (0, extremePoint_1.extremePoint)(ground, \"l\");\n    const groundRight = (0, extremePoint_1.extremePoint)(ground, \"r\");\n    const groundNormal = (0, environmentalCollision_1.outwardsWallNormal)(groundLeft, groundRight, \"g\");\n    if (!ignoreDamage && damageType !== undefined && damageType !== null\n        && main_1.player[i].phys.hurtBoxState === 0) {\n        // apply damage\n        dealWithDamagingStageCollision(i, groundNormal, false, 0, damageType);\n    }\n    else {\n        if (main_1.player[i].hit.hitlag > 0 || alreadyGrounded || main_1.player[i].phys.grabbedBy !== -1) {\n            updatePosition(i, newPosition);\n        }\n        else {\n            land(i, ecbpBottom, 0, groundIndex, groundNormal, input);\n        }\n    }\n}\n;\nfunction fallOffGround(i, side, groundEdgePosition, disableFall, input) {\n    let [stillGrounded, backward] = [true, false];\n    let sign = 1;\n    if (side === \"r\") {\n        sign = -1;\n    }\n    if (disableFall) {\n        main_1.player[i].phys.pos.y = Math.max(main_1.player[i].phys.pos.y, groundEdgePosition.y) + environmentalCollision_1.additionalOffset;\n        main_1.player[i].phys.pos.x = groundEdgePosition.x + (side === \"l\" ? environmentalCollision_1.additionalOffset : -environmentalCollision_1.additionalOffset);\n        main_1.player[i].phys.ECBp = (0, ecbTransform_1.moveECB)(main_1.player[i].phys.ECBp, (0, linAlg_1.subtract)(main_1.player[i].phys.pos, main_1.player[i].phys.ECBp[0]));\n    }\n    else if (actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].canEdgeCancel) {\n        if (main_1.player[i].phys.face === sign) {\n            stillGrounded = false;\n            main_1.player[i].phys.pos.y = Math.max(main_1.player[i].phys.pos.y, groundEdgePosition.y) + environmentalCollision_1.additionalOffset;\n            backward = true;\n        }\n        else if (Math.abs(input[i][0].lsX) > 0.6\n            || (main_1.player[i].phys.cVel.x === 0 && main_1.player[i].phys.kVel.x === 0)\n            || actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].disableTeeter\n            || main_1.player[i].phys.shielding) {\n            stillGrounded = false;\n            main_1.player[i].phys.pos.y = Math.max(main_1.player[i].phys.pos.y, groundEdgePosition.y) + environmentalCollision_1.additionalOffset;\n        }\n        else {\n            main_1.player[i].phys.cVel.x = 0;\n            main_1.player[i].phys.pos.x = groundEdgePosition.x + sign * environmentalCollision_1.additionalOffset;\n            actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].OTTOTTO.init(i, input);\n        }\n    }\n    else if (main_1.player[i].phys.cVel.x === 0\n        && main_1.player[i].phys.kVel.x === 0\n        && !actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].inGrab) {\n        stillGrounded = false;\n        main_1.player[i].phys.pos.y = Math.max(main_1.player[i].phys.pos.y, groundEdgePosition.y) + environmentalCollision_1.additionalOffset;\n    }\n    else {\n        main_1.player[i].phys.cVel.x = 0;\n        main_1.player[i].phys.pos.x = groundEdgePosition.x + sign * environmentalCollision_1.additionalOffset;\n    }\n    return [stillGrounded, backward];\n}\n;\n// ground type and index is a pair, either [\"g\", index] or [\"p\", index]\nfunction dealWithGround(i, ground, groundTypeAndIndex, connected, input) {\n    const damageType = ground[2] === undefined ? null : ground[2].damageType;\n    const ignoreDamage = main_1.player[i].actionState === \"DAMAGEFLYN\" || main_1.player[i].actionState === \"DAMAGEFALL\" || main_1.player[i].actionState === \"WALLDAMAGE\";\n    const leftmostGroundPoint = (0, extremePoint_1.extremePoint)(ground, \"l\");\n    const rightmostGroundPoint = (0, extremePoint_1.extremePoint)(ground, \"r\");\n    const groundNormal = (0, environmentalCollision_1.outwardsWallNormal)(leftmostGroundPoint, rightmostGroundPoint, \"g\");\n    let [stillGrounded, backward] = [true, false];\n    let groundOrPlatform = 0;\n    if (groundTypeAndIndex[0] === \"p\") {\n        groundOrPlatform = 1;\n    }\n    let disableFall = false;\n    let maybeLeftGroundTypeAndIndex = null;\n    let maybeRightGroundTypeAndIndex = null;\n    // first check if the player is allowed to move along the ground, by checking there are no low ceilings\n    const ecb0Height = Math.max(environmentalCollision_1.additionalOffset, main_1.player[i].phys.ECB1[2].y - main_1.player[i].phys.ECB1[0].y - environmentalCollision_1.additionalOffset);\n    const maybeNextPosX = (0, environmentalCollision_1.moveAlongGround)(main_1.player[i].phys.ECB1[0], main_1.player[i].phys.ECBp[0], ecb0Height, ground, activeStage_1.activeStage.ceiling);\n    if (maybeNextPosX !== null) {\n        // ceiling has obstructed grounded movement\n        main_1.player[i].phys.pos.x = maybeNextPosX;\n        main_1.player[i].phys.ECBp = (0, ecbTransform_1.moveECB)(main_1.player[i].phys.ECBp, new Vec2D_1.Vec2D(maybeNextPosX - main_1.player[i].phys.ECBp[0].x, 0));\n    }\n    if (main_1.player[i].phys.ECBp[0].x < leftmostGroundPoint.x) {\n        if (connected !== null && connected !== undefined) {\n            maybeLeftGroundTypeAndIndex = groundTypeAndIndex[0] === \"g\"\n                ? connected[0][groundTypeAndIndex[1]][0]\n                : connected[1][groundTypeAndIndex[1]][0];\n        }\n        if (maybeLeftGroundTypeAndIndex === null || maybeLeftGroundTypeAndIndex === undefined) { // no other ground to the left\n            [stillGrounded, backward] = fallOffGround(i, \"l\", leftmostGroundPoint, disableFall, input);\n        }\n        else {\n            const [leftGroundType, leftGroundIndex] = maybeLeftGroundTypeAndIndex;\n            switch (leftGroundType) {\n                case \"g\":\n                    [stillGrounded, backward] = dealWithGround(i, activeStage_1.activeStage.ground[leftGroundIndex], [\"g\", leftGroundIndex], connected, input);\n                    break;\n                case \"p\":\n                    [stillGrounded, backward] = dealWithGround(i, activeStage_1.activeStage.platform[leftGroundIndex], [\"p\", leftGroundIndex], connected, input);\n                    break;\n                case \"r\":\n                    const rightWallToTheLeft = activeStage_1.activeStage.wallR[leftGroundIndex];\n                    if ((0, extremePoint_1.extremePoint)(rightWallToTheLeft, \"l\").y > leftmostGroundPoint.y) {\n                        disableFall = true;\n                    }\n                    [stillGrounded, backward] = fallOffGround(i, \"l\", leftmostGroundPoint, disableFall, input);\n                    break;\n                default: // surface to the left is neither ground, platform or right wall\n                    [stillGrounded, backward] = fallOffGround(i, \"l\", leftmostGroundPoint, disableFall, input);\n                    break;\n            }\n        }\n    }\n    else if (main_1.player[i].phys.ECBp[0].x > rightmostGroundPoint.x) {\n        if (connected !== null && connected !== undefined) {\n            maybeRightGroundTypeAndIndex = groundTypeAndIndex[0] === \"g\"\n                ? connected[0][groundTypeAndIndex[1]][1]\n                : connected[1][groundTypeAndIndex[1]][1];\n        }\n        if (maybeRightGroundTypeAndIndex === null || maybeRightGroundTypeAndIndex === undefined) { // no other ground to the right\n            [stillGrounded, backward] = fallOffGround(i, \"r\", rightmostGroundPoint, disableFall, input);\n        }\n        else {\n            const [rightGroundType, rightGroundIndex] = maybeRightGroundTypeAndIndex;\n            switch (rightGroundType) {\n                case \"g\":\n                    [stillGrounded, backward] = dealWithGround(i, activeStage_1.activeStage.ground[rightGroundIndex], [\"g\", rightGroundIndex], connected, input);\n                    break;\n                case \"p\":\n                    [stillGrounded, backward] = dealWithGround(i, activeStage_1.activeStage.platform[rightGroundIndex], [\"p\", rightGroundIndex], connected, input);\n                    break;\n                case \"l\":\n                    const leftWallToTheRight = activeStage_1.activeStage.wallL[rightGroundIndex];\n                    if ((0, extremePoint_1.extremePoint)(leftWallToTheRight, \"r\").y > rightmostGroundPoint.y) {\n                        disableFall = true;\n                    }\n                    [stillGrounded, backward] = fallOffGround(i, \"r\", rightmostGroundPoint, disableFall, input);\n                    break;\n                default: // surface to the right is neither ground, platform or left wall\n                    [stillGrounded, backward] = fallOffGround(i, \"r\", rightmostGroundPoint, disableFall, input);\n                    break;\n            }\n        }\n    }\n    else {\n        const ecbpBottom = main_1.player[i].phys.ECBp[0];\n        const yIntercept = (0, environmentalCollision_1.coordinateIntercept)([ecbpBottom, new Vec2D_1.Vec2D(ecbpBottom.x, ecbpBottom.y + 1)], ground);\n        main_1.player[i].phys.pos.y = main_1.player[i].phys.pos.y + yIntercept.y - ecbpBottom.y + environmentalCollision_1.additionalOffset;\n        main_1.player[i].phys.ECBp = (0, ecbTransform_1.moveECB)(main_1.player[i].phys.ECBp, new Vec2D_1.Vec2D(0, yIntercept.y - ecbpBottom.y + environmentalCollision_1.additionalOffset));\n        main_1.player[i].phys.onSurface = [groundOrPlatform, groundTypeAndIndex[1]];\n        main_1.player[i].phys.groundAngle = Math.atan2(groundNormal.y, groundNormal.x) || Math.PI / 2;\n    }\n    if (!ignoreDamage && damageType !== undefined && damageType !== null\n        && main_1.player[i].phys.hurtBoxState === 0) {\n        // apply damage\n        dealWithDamagingStageCollision(i, groundNormal, false, 0, damageType);\n        stillGrounded = false;\n    }\n    return [stillGrounded, backward];\n}\n;\nfunction dealWithCeilingCollision(i, newPosition, ecbTop, ceilingIndex, input) {\n    updatePosition(i, newPosition);\n    const ceiling = (0, stage_1.getSurfaceFromStage)([\"c\", ceilingIndex], activeStage_1.activeStage);\n    const damageType = ceiling[2] === undefined ? null : ceiling[2].damageType;\n    const ceilingLeft = (0, extremePoint_1.extremePoint)(ceiling, \"l\");\n    const ceilingRight = (0, extremePoint_1.extremePoint)(ceiling, \"r\");\n    const ceilingNormal = (0, environmentalCollision_1.outwardsWallNormal)(ceilingLeft, ceilingRight, \"c\");\n    const ignoreDamage = main_1.player[i].actionState === \"DAMAGEFLYN\" || main_1.player[i].actionState === \"DAMAGEFALL\" || main_1.player[i].actionState === \"WALLDAMAGE\";\n    if (!ignoreDamage && damageType !== undefined && damageType !== null\n        && main_1.player[i].phys.hurtBoxState === 0) {\n        // apply damage\n        dealWithDamagingStageCollision(i, ceilingNormal, false, 2, damageType);\n    }\n    else if (actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].headBonk && main_1.player[i].phys.cVel.y + main_1.player[i].phys.kVel.y > 0) {\n        if (main_1.player[i].hit.hitstun > 0) {\n            if (main_1.player[i].phys.techTimer > 0) {\n                actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].TECHU.init(i, input);\n            }\n            else {\n                (0, drawVfx_1.drawVfx)({\n                    name: \"ceilingBounce\",\n                    pos: ecbTop,\n                    face: 1,\n                    f: ceilingNormal\n                });\n                sfx_1.sounds.bounce.play();\n                actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].STOPCEIL.init(i, input, ceilingNormal);\n            }\n        }\n        else {\n            actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].STOPCEIL.init(i, input);\n        }\n    }\n}\n;\nfunction dealWithCornerCollision(i, newPosition, ecb, angularParameter, damageType) {\n    updatePosition(i, newPosition);\n    const insideECBType = angularParameter < 2 ? \"l\" : \"r\";\n    const [same, other] = (0, environmentalCollision_1.getSameAndOther)(angularParameter);\n    const lowerECBPoint = other === 2 ? ecb[same] : ecb[0];\n    const upperECBPoint = other === 2 ? ecb[2] : ecb[same];\n    const normal = (0, environmentalCollision_1.outwardsWallNormal)(lowerECBPoint, upperECBPoint, insideECBType);\n    if (main_1.player[i].hit.hitlag === 0 && damageType !== undefined && damageType !== null\n        && main_1.player[i].phys.hurtBoxState === 0) {\n        dealWithDamagingStageCollision(i, normal, true, angularParameter, damageType);\n    }\n}\n;\nfunction land(i, newPosition, t, j, normal, input) {\n    main_1.player[i].phys.pos = newPosition;\n    main_1.player[i].phys.grounded = true;\n    main_1.player[i].phys.doubleJumped = false;\n    main_1.player[i].phys.jumpsUsed = 0;\n    main_1.player[i].phys.airborneTimer = 0;\n    main_1.player[i].phys.fastfalled = false;\n    main_1.player[i].phys.chargeFrames = 0;\n    main_1.player[i].phys.charging = false;\n    main_1.player[i].phys.wallJumpCount = 0;\n    main_1.player[i].phys.thrownHitbox = false;\n    main_1.player[i].phys.sideBJumpFlag = true;\n    main_1.player[i].phys.onSurface = [t, j];\n    main_1.player[i].phys.onLedge = -1;\n    main_1.player[i].rotation = 0;\n    main_1.player[i].rotationPoint = new Vec2D_1.Vec2D(0, 0);\n    main_1.player[i].colourOverlayBoolean = false;\n    main_1.player[i].hitboxes.active = [false, false, false, false];\n    let newNormal = normal;\n    if (newNormal === null || newNormal === undefined || (newNormal.x === 0 && newNormal.y === 0)) {\n        newNormal = new Vec2D_1.Vec2D(0, 1);\n    }\n    main_1.player[i].phys.groundAngle = Math.atan2(newNormal.y, newNormal.x);\n    switch (actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].landType) {\n        case 0:\n            // LANDING / NIL\n            if (main_1.player[i].phys.cVel.y >= -1) {\n                actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].WAIT.init(i, input);\n            }\n            else {\n                actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].LANDING.init(i, input);\n            }\n            break;\n        case 1:\n            // OWN FUNCTION\n            actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].land(i, input);\n            break;\n        case 2:\n            // KNOCKDOWN / TECH\n            if (main_1.player[i].phys.techTimer > 0) {\n                if (input[i][0].lsX * main_1.player[i].phys.face > 0.5) {\n                    actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].TECHF.init(i, input);\n                }\n                else if (input[i][0].lsX * main_1.player[i].phys.face < -0.5) {\n                    actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].TECHB.init(i, input);\n                }\n                else {\n                    actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].TECHN.init(i, input);\n                }\n            }\n            else {\n                actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].DOWNBOUND.init(i, input);\n            }\n            break;\n        default:\n            actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].LANDING.init(i, input);\n            break;\n    }\n    main_1.player[i].phys.cVel.y = 0;\n    main_1.player[i].phys.kVel.y = 0;\n    main_1.player[i].hit.hitstun = 0;\n}\n;\nfunction hitlagSwitchUpdate(i, input) {\n    if (main_1.player[i].hit.hitlag > 0) {\n        main_1.player[i].hit.hitlag--;\n        if (main_1.player[i].hit.hitlag === 0 && main_1.player[i].hit.knockback > 0) {\n            if (main_1.player[i].phys.grabbedBy === -1 || main_1.player[i].hit.knockback > 50) {\n                const newAngle = (0, hitDetection_1.getLaunchAngle)(main_1.player[i].hit.angle, main_1.player[i].hit.knockback, main_1.player[i].hit.reverse, input[i][0].lsX, input[i][0].lsY, i);\n                main_1.player[i].phys.cVel.x = 0;\n                main_1.player[i].phys.cVel.y = 0;\n                //console.log(newAngle);\n                main_1.player[i].phys.kVel.x = (0, hitDetection_1.getHorizontalVelocity)(main_1.player[i].hit.knockback, newAngle);\n                main_1.player[i].phys.kVel.y = (0, hitDetection_1.getVerticalVelocity)(main_1.player[i].hit.knockback, newAngle, main_1.player[i].phys.grounded, main_1.player[i].hit.angle);\n                //console.log(player[i].phys.kVel);\n                main_1.player[i].phys.kDec.x = (0, hitDetection_1.getHorizontalDecay)(newAngle);\n                main_1.player[i].phys.kDec.y = (0, hitDetection_1.getVerticalDecay)(newAngle);\n                //console.log(player[i].phys.kDec);\n                //player[i].hit.hitstun = getHitstun(player[i].hit.knockback);\n                main_1.player[i].phys.onLedge = -1;\n                main_1.player[i].phys.charging = false;\n                main_1.player[i].phys.chargeFrames = 0;\n                main_1.player[i].phys.shielding = false;\n                /*if (player[i].phys.grounded){\n                 if (newAngle == 0 || newAngle > 270){\n                 player[i].phys.kVel.y = 0;\n                 player[i].phys.kDec.x = player[i].charAttributes.traction;\n                 }\n                 else if (newAngle > 180){\n                 player[i].phys.kVel.y = 0;\n                 player[i].phys.kDec.x = -player[i].charAttributes.traction;\n                 }\n                 }*/\n                if (main_1.player[i].phys.kVel.y === 0) {\n                    if (main_1.player[i].hit.knockback >= 80) {\n                        main_1.player[i].phys.grounded = false;\n                        main_1.player[i].phys.pos.y += 0.0001;\n                    }\n                }\n                if (main_1.player[i].phys.kVel.y > 0) {\n                    main_1.player[i].phys.grounded = false;\n                }\n            }\n            main_1.player[i].hit.knockback = 0;\n        }\n        //SDI / ASDI\n        switch (main_1.player[i].actionState) {\n            case \"DAMAGEN2\":\n            case \"DAMAGEFLYN\":\n            case \"GUARDON\":\n            case \"GUARD\":\n            case \"DOWNDAMAGE\":\n                if (main_1.player[i].hit.hitlag > 0) {\n                    if ((input[i][0].lsX > 0.7 && input[i][1].lsX < 0.7) ||\n                        (input[i][0].lsX < -0.7 && input[i][1].lsX > -0.7) ||\n                        (input[i][0].lsY > 0.7 && input[i][1].lsY < 0.7) ||\n                        (input[i][0].lsY < -0.7 && input[i][1].lsY > -0.7)) {\n                        if (!((input[i][0].lsX * input[i][0].lsX) + (input[i][0].lsY * input[i][0].lsY) < (0.49))) {\n                            main_1.player[i].phys.pos.x += input[i][0].lsX * 6;\n                            main_1.player[i].phys.pos.y += main_1.player[i].phys.grounded ? 0 : input[i][0].lsY * 6;\n                        }\n                    }\n                }\n                else {\n                    main_1.player[i].phys.pos.x += input[i][0].lsX * 3;\n                    main_1.player[i].phys.pos.y += main_1.player[i].phys.grounded ? 0 : input[i][0].lsY * 3;\n                }\n                break;\n            default:\n                break;\n        }\n        if (main_1.player[i].hit.hitlag === 0) {\n            // if hitlag just ended, do normal stuff as well\n            hitlagSwitchUpdate(i, input);\n        }\n    }\n    else {\n        if (main_1.player[i].hit.shieldstun > 0) {\n            //console.log(player[i].hit.shieldstun);\n            main_1.player[i].hit.shieldstun--;\n            if (main_1.player[i].hit.shieldstun < 0) {\n                main_1.player[i].hit.shieldstun = 0;\n            }\n        }\n        //console.log(actionStates[characterSelections[i]][player[i].actionState]);\n        main_1.player[i].phys.canWallJump = actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].wallJumpAble;\n        main_1.player[i].phys.bTurnaroundTimer--;\n        if (main_1.player[i].phys.bTurnaroundTimer < 0) {\n            main_1.player[i].phys.bTurnaroundTimer = 0;\n        }\n        if ((input[i][0].lsX > 0.9 && input[i][1].lsX < 0.9) ||\n            (input[i][0].lsX < -0.9 && input[i][1].lsX > -0.9)) {\n            main_1.player[i].phys.bTurnaroundTimer = 20;\n            main_1.player[i].phys.bTurnaroundDirection = Math.sign(input[i][0].lsX);\n        }\n        main_1.player[i].prevActionState = main_1.player[i].actionState;\n        actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].main(i, input);\n        if (main_1.player[i].shocked > 0) {\n            main_1.player[i].shocked--;\n            if (main_1.player[i].shocked % 5 === 0) {\n                sfx_1.sounds.electricfizz.play();\n            }\n            (0, drawVfx_1.drawVfx)({\n                name: \"shocked\",\n                pos: new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x, main_1.player[i].phys.pos.y + 5),\n                face: main_1.player[i].phys.face\n            });\n        }\n        if (main_1.player[i].burning > 0) {\n            main_1.player[i].burning--;\n            if (main_1.player[i].burning % 6 === 0) {\n                (0, drawVfx_1.drawVfx)({\n                    name: \"burning\",\n                    pos: new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x, main_1.player[i].phys.pos.y + 5),\n                    face: main_1.player[i].phys.face\n                });\n            }\n        }\n        // TURBO MODE\n        // if just changed action states, remove ability to cancel\n        if (main_1.player[i].prevActionState !== main_1.player[i].actionState) {\n            main_1.player[i].hasHit = false;\n        }\n        if (settings_1.gameSettings.turbo && main_1.gameMode !== 5) {\n            if (main_1.player[i].hasHit) {\n                if (main_1.player[i].actionState !== \"CATCHATTACK\") {\n                    if (main_1.player[i].phys.grounded) {\n                        if ((0, actionStateShortcuts_1.turboGroundedInterrupt)(i, input)) {\n                            main_1.player[i].hasHit = false;\n                        }\n                    }\n                    else {\n                        if ((0, actionStateShortcuts_1.turboAirborneInterrupt)(i, input)) {\n                            main_1.player[i].hasHit = false;\n                        }\n                    }\n                }\n            }\n        }\n        if (Math.abs(main_1.player[i].phys.kVel.x) > 0) {\n            const oSign = Math.sign(main_1.player[i].phys.kVel.x);\n            if (main_1.player[i].phys.grounded) {\n                main_1.player[i].phys.kVel.x -= oSign * main_1.player[i].charAttributes.traction;\n            }\n            else {\n                main_1.player[i].phys.kVel.x -= main_1.player[i].phys.kDec.x;\n            }\n            if (oSign !== Math.sign(main_1.player[i].phys.kVel.x)) {\n                main_1.player[i].phys.kVel.x = 0;\n            }\n        }\n        if (Math.abs(main_1.player[i].phys.kVel.y) > 0) {\n            const oSign = Math.sign(main_1.player[i].phys.kVel.y);\n            if (main_1.player[i].phys.grounded) {\n                main_1.player[i].phys.kVel.y = 0;\n            }\n            main_1.player[i].phys.kVel.y -= main_1.player[i].phys.kDec.y;\n            if (oSign !== Math.sign(main_1.player[i].phys.kVel.y)) {\n                main_1.player[i].phys.kVel.y = 0;\n            }\n        }\n        main_1.player[i].phys.pos.x += main_1.player[i].phys.cVel.x + main_1.player[i].phys.kVel.x;\n        main_1.player[i].phys.pos.y += main_1.player[i].phys.cVel.y + main_1.player[i].phys.kVel.y;\n    }\n}\n;\nfunction hurtBoxStateUpdate(i) {\n    if (main_1.player[i].actionState === \"REBIRTH\" || main_1.player[i].actionState === \"REBIRTHWAIT\") {\n        main_1.player[i].phys.hurtBoxState = 1;\n    }\n    else {\n        main_1.player[i].phys.hurtBoxState = 0;\n    }\n    if (main_1.player[i].phys.invincibleTimer > 0) {\n        main_1.player[i].phys.invincibleTimer--;\n        main_1.player[i].phys.hurtBoxState = 2;\n    }\n    if (main_1.player[i].phys.intangibleTimer > 0) {\n        main_1.player[i].phys.intangibleTimer--;\n        main_1.player[i].phys.hurtBoxState = 1;\n    }\n}\n;\nfunction outOfCameraUpdate(i) {\n    if (main_1.player[i].phys.outOfCameraTimer >= 60) {\n        if (main_1.player[i].percent < 150) {\n            main_1.player[i].percent++;\n        }\n        (0, main_1.percentShake)(40, i);\n        sfx_1.sounds.outofcamera.play();\n        main_1.player[i].phys.outOfCameraTimer = 0;\n    }\n}\n;\nfunction lCancelUpdate(i, input) {\n    // if smash 64 lcancel, put any landingattackair action states into landing\n    if (settings_1.gameSettings.lCancelType === 2 && main_1.gameMode !== 5) {\n        if (main_1.player[i].phys.lCancel) {\n            if (main_1.player[i].actionState.substr(0, 16) === \"LANDINGATTACKAIR\") {\n                main_1.player[i].actionState = \"LANDING\";\n                main_1.player[i].timer = 1;\n            }\n        }\n    }\n    if (main_1.player[i].phys.lCancelTimer > 0) {\n        main_1.player[i].phys.lCancelTimer--;\n        if (main_1.player[i].phys.lCancelTimer === 0) {\n            main_1.player[i].phys.lCancel = false;\n        }\n    }\n    // l CANCEL\n    if (main_1.player[i].phys.lCancelTimer === 0 &&\n        ((input[i][0].lA > 0 && input[i][1].lA === 0) ||\n            (input[i][0].rA > 0 && input[i][1].rA === 0) ||\n            (input[i][0].z && !input[i][1].z))) {\n        // if smash 64 lcancel, increase window to 11 frames\n        if (settings_1.gameSettings.lCancelType === 2 && main_1.gameMode !== 5) {\n            main_1.player[i].phys.lCancelTimer = 11;\n        }\n        else {\n            main_1.player[i].phys.lCancelTimer = 7;\n        }\n        main_1.player[i].phys.lCancel = true;\n    }\n    // if auto lcancel is on, always lcancel\n    if (settings_1.gameSettings.lCancelType === 1 && main_1.gameMode !== 5) {\n        main_1.player[i].phys.lCancel = true;\n    }\n    // V Cancel\n    if (main_1.player[i].phys.vCancelTimer > 0) {\n        main_1.player[i].phys.vCancelTimer--;\n    }\n    if (main_1.player[i].phys.techTimer > 0) {\n        main_1.player[i].phys.techTimer--;\n    }\n    if (main_1.player[i].phys.shoulderLockout > 0) {\n        main_1.player[i].phys.shoulderLockout--;\n    }\n    if ((input[i][0].l && !input[i][1].l) ||\n        (input[i][0].r && !input[i][1].r)) {\n        if (!main_1.player[i].phys.grounded) {\n            if (main_1.player[i].phys.shoulderLockout === 0) {\n                main_1.player[i].phys.vCancelTimer = 3;\n                main_1.player[i].phys.techTimer = 20;\n            }\n        }\n        main_1.player[i].phys.shoulderLockout = 40;\n    }\n}\n;\nconst nullSquashDatum = { location: null, factor: 1 };\nconst ecbSquashData = [nullSquashDatum,\n    nullSquashDatum,\n    nullSquashDatum,\n    nullSquashDatum];\nfunction findAndResolveCollisions(i, input, oldBackward, oldNotTouchingWalls, ecbOffset) {\n    let stillGrounded = true;\n    let backward = oldBackward;\n    const notTouchingWalls = oldNotTouchingWalls;\n    const connected = activeStage_1.activeStage.connected;\n    // ------------------------------------------------------------------------------------------------------\n    // grounded state movement\n    if (main_1.player[i].phys.grounded) {\n        const oldPosition = new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x, main_1.player[i].phys.pos.y);\n        const relevantGroundIndex = main_1.player[i].phys.onSurface[1];\n        let relevantGroundType = \"g\";\n        let relevantGround = activeStage_1.activeStage.ground[relevantGroundIndex];\n        if (main_1.player[i].phys.onSurface[0] === 1) {\n            relevantGroundType = \"p\";\n            relevantGround = activeStage_1.activeStage.platform[relevantGroundIndex];\n        }\n        const relevantGroundTypeAndIndex = [relevantGroundType, relevantGroundIndex];\n        [stillGrounded, backward] = dealWithGround(i, relevantGround, relevantGroundTypeAndIndex, connected, input);\n    }\n    // end of grounded state movement\n    // ------------------------------------------------------------------------------------------------------\n    // ------------------------------------------------------------------------------------------------------\n    // main collision detection routine\n    const notIgnoringPlatforms = ((!actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].canPassThrough || (input[i][0].lsY > -0.56)) && !main_1.player[i].phys.passing);\n    const isImmune = main_1.player[i].phys.hurtBoxState !== 0;\n    const playerStatusInfo = {\n        ignoringPlatforms: !notIgnoringPlatforms,\n        grounded: main_1.player[i].phys.grounded,\n        immune: isImmune\n    };\n    // type CollisionRoutineResult = { position : Vec2D, touching : null | SimpleTouchingDatum, squashDatum : SquashDatum, ecb : ECB};\n    const collisionData = (0, environmentalCollision_1.runCollisionRoutine)(main_1.player[i].phys.ECB1, main_1.player[i].phys.ECBp, main_1.player[i].phys.pos, ecbSquashData[i], playerStatusInfo, activeStage_1.activeStage);\n    ecbSquashData[i] = collisionData.squashDatum;\n    const newPosition = collisionData.position;\n    const newECB = collisionData.ecb;\n    const touchingDatum = collisionData.touching;\n    if (touchingDatum === null) {\n        updatePosition(i, newPosition);\n    }\n    else if (touchingDatum.kind === \"surface\") {\n        const surfaceLabel = touchingDatum.type;\n        const surfaceIndex = touchingDatum.index;\n        const pt = touchingDatum.pt;\n        switch (surfaceLabel[0].toLowerCase()) {\n            case \"l\": // player touching left wall\n                notTouchingWalls[0] = false;\n                dealWithWallCollision(i, newPosition, pt, \"l\", surfaceIndex, input);\n                break;\n            case \"r\": // player touching right wall\n                notTouchingWalls[1] = false;\n                dealWithWallCollision(i, newPosition, pt, \"r\", surfaceIndex, input);\n                break;\n            case \"g\": // player landed on ground\n                dealWithGroundCollision(i, main_1.player[i].phys.grounded, newPosition, newECB[0], surfaceIndex, input);\n                break;\n            case \"c\": // player touching ceiling\n                dealWithCeilingCollision(i, newPosition, newECB[2], surfaceIndex, input);\n                break;\n            case \"p\": // player landed on platform\n                dealWithPlatformCollision(i, main_1.player[i].phys.grounded, newPosition, newECB[0], surfaceIndex, input);\n                break;\n            default:\n                console.log(\"error in 'findAndResolveCollisions': unrecognised surface type.\");\n                break;\n        }\n    }\n    else if (touchingDatum.kind === \"corner\") {\n        const angularParameter = touchingDatum.angular;\n        const cornerDamageType = touchingDatum.damageType !== undefined ? touchingDatum.damageType : null;\n        dealWithCornerCollision(i, newPosition, newECB, angularParameter, cornerDamageType);\n    }\n    main_1.player[i].phys.ECB1 = newECB;\n    // finally, calculate how much squashing is required by the ground\n    if (main_1.player[i].phys.grounded) {\n        const groundSquashFactor = (0, environmentalCollision_1.groundedECBSquashFactor)(new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x, main_1.player[i].phys.pos.y + ecbOffset[3]) //    top non-squashed ECBp point\n        , new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x, main_1.player[i].phys.pos.y) // bottom non-squashed ECBp point, no offset as grounded\n        , (0, toList_1.toList)(activeStage_1.activeStage.ceiling));\n        if (groundSquashFactor !== null && (groundSquashFactor < ecbSquashData[i].factor)) {\n            ecbSquashData[i] = { location: 0, factor: groundSquashFactor };\n        }\n        if (ecbSquashData[i] !== null) {\n            ecbSquashData[i].location = 0;\n        }\n    }\n    return [stillGrounded, backward, notTouchingWalls];\n}\n;\nfunction dealWithLedges(i, input) {\n    const playerPosX = main_1.player[i].phys.pos.x;\n    const playerPosY = main_1.player[i].phys.pos.y;\n    //TODO find out what these magic numbers are\n    const ledgeSnapBoxOffset2 = main_1.player[i].charAttributes.ledgeSnapBoxOffset[2];\n    const ledgeSnapBoxOffset0 = main_1.player[i].charAttributes.ledgeSnapBoxOffset[0];\n    const ledgeSnapBoxOffset1 = main_1.player[i].charAttributes.ledgeSnapBoxOffset[1];\n    main_1.player[i].phys.ledgeSnapBoxF = new Box2D_1.Box2D([playerPosX, playerPosY + ledgeSnapBoxOffset2], [playerPosX + ledgeSnapBoxOffset0, playerPosY + ledgeSnapBoxOffset1]);\n    main_1.player[i].phys.ledgeSnapBoxB = new Box2D_1.Box2D([playerPosX - ledgeSnapBoxOffset0, playerPosY + ledgeSnapBoxOffset2], [playerPosX, playerPosY + ledgeSnapBoxOffset1]);\n    if (main_1.player[i].phys.ledgeRegrabCount) {\n        main_1.player[i].phys.ledgeRegrabTimeout--;\n        if (main_1.player[i].phys.ledgeRegrabTimeout === 0) {\n            main_1.player[i].phys.ledgeRegrabCount = false;\n        }\n    }\n    let lsBF = -1;\n    let lsBB = -1;\n    let foundLedge = 0;\n    if (main_1.player[i].phys.onLedge === -1 && !main_1.player[i].phys.ledgeRegrabCount) {\n        for (let j = 0; j < activeStage_1.activeStage.ledge.length; j++) {\n            let ledgeAvailable = true;\n            for (let k = 0; k < 4; k++) {\n                if (main_1.playerType[k] > -1) {\n                    if (k !== i) {\n                        if (main_1.player[k].phys.onLedge === j) {\n                            ledgeAvailable = false;\n                        }\n                    }\n                }\n            }\n            if (ledgeAvailable && !main_1.player[i].phys.grounded && main_1.player[i].hit.hitstun <= 0) {\n                const x = activeStage_1.activeStage[activeStage_1.activeStage.ledge[j][0]][activeStage_1.activeStage.ledge[j][1]][activeStage_1.activeStage.ledge[j][2]].x;\n                const y = activeStage_1.activeStage[activeStage_1.activeStage.ledge[j][0]][activeStage_1.activeStage.ledge[j][1]][activeStage_1.activeStage.ledge[j][2]].y;\n                if (x > main_1.player[i].phys.ledgeSnapBoxF.min.x &&\n                    x < main_1.player[i].phys.ledgeSnapBoxF.max.x &&\n                    y < main_1.player[i].phys.ledgeSnapBoxF.min.y &&\n                    y > main_1.player[i].phys.ledgeSnapBoxF.max.y) {\n                    if (activeStage_1.activeStage.ledge[j][2] === 0) {\n                        if (actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].canGrabLedge[0]) {\n                            lsBF = j;\n                        }\n                    }\n                    else if (actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].canGrabLedge[1]) {\n                        lsBF = j;\n                    }\n                }\n                if (x > main_1.player[i].phys.ledgeSnapBoxB.min.x &&\n                    x < main_1.player[i].phys.ledgeSnapBoxB.max.x &&\n                    y < main_1.player[i].phys.ledgeSnapBoxB.min.y &&\n                    y > main_1.player[i].phys.ledgeSnapBoxF.max.y) {\n                    if (activeStage_1.activeStage.ledge[j][2] === 1) {\n                        if (actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].canGrabLedge[0]) {\n                            lsBB = j;\n                        }\n                    }\n                    else if (actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].canGrabLedge[1]) {\n                        lsBB = j;\n                    }\n                }\n            }\n            if (main_1.player[i].phys.cVel.y < 0 && input[i][0].lsY > -0.5) {\n                if (lsBF > -1) {\n                    foundLedge = activeStage_1.activeStage.ledge[lsBF];\n                    if (foundLedge[2] * -2 + 1 === main_1.player[i].phys.face || actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].canGrabLedge[1]) {\n                        main_1.player[i].phys.onLedge = lsBF;\n                        main_1.player[i].phys.ledgeRegrabTimeout = 30;\n                        main_1.player[i].phys.face = foundLedge[2] * -2 + 1;\n                        main_1.player[i].phys.pos = new Vec2D_1.Vec2D(activeStage_1.activeStage[foundLedge[0]][foundLedge[1]][foundLedge[2]].x + main_1.edgeOffset[0][0], activeStage_1.activeStage[foundLedge[0]][foundLedge[1]][foundLedge[2]].y + main_1.edgeOffset[0][1]);\n                        actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].CLIFFCATCH.init(i, input);\n                    }\n                }\n                else if (lsBB > -1) {\n                    foundLedge = activeStage_1.activeStage.ledge[lsBB];\n                    if (foundLedge[2] * -2 + 1 === main_1.player[i].phys.face || actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].canGrabLedge[1]) {\n                        main_1.player[i].phys.onLedge = lsBB;\n                        main_1.player[i].phys.ledgeRegrabTimeout = 30;\n                        main_1.player[i].phys.face = foundLedge[2] * -2 + 1;\n                        main_1.player[i].phys.pos = new Vec2D_1.Vec2D(activeStage_1.activeStage[foundLedge[0]][foundLedge[1]][foundLedge[2]].x + main_1.edgeOffset[1][0], activeStage_1.activeStage[foundLedge[0]][foundLedge[1]][foundLedge[2]].y + main_1.edgeOffset[1][1]);\n                        actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].CLIFFCATCH.init(i, input);\n                    }\n                }\n            }\n        }\n    }\n}\n;\nfunction dealWithDeath(i, input) {\n    if (!actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].dead && main_1.player[i].actionState !== \"SLEEP\") {\n        let state = 0;\n        if (main_1.player[i].phys.pos.x < activeStage_1.activeStage.blastzone.min.x) {\n            state = \"DEADLEFT\";\n        }\n        else if (main_1.player[i].phys.pos.x > activeStage_1.activeStage.blastzone.max.x) {\n            state = \"DEADRIGHT\";\n        }\n        else if (main_1.player[i].phys.pos.y < activeStage_1.activeStage.blastzone.min.y) {\n            state = \"DEADDOWN\";\n        }\n        else if (main_1.player[i].phys.pos.y > activeStage_1.activeStage.blastzone.max.y && main_1.player[i].phys.kVel.y >= 2.4) {\n            state = \"DEADUP\";\n        }\n        if (state !== 0) {\n            main_1.player[i].phys.outOfCameraTimer = 0;\n            (0, actionStateShortcuts_1.turnOffHitboxes)(i);\n            main_1.player[i].stocks--;\n            main_1.player[i].colourOverlayBoolean = false;\n            render_1.lostStockQueue.push([i, main_1.player[i].stocks, 0]);\n            if (main_1.player[i].stocks === 0 && main_1.versusMode) {\n                main_1.player[i].stocks = 1;\n            }\n            actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][state].init(i, input);\n        }\n    }\n}\n;\nfunction updateHitboxes(i) {\n    main_1.player[i].phys.isInterpolated = false;\n    for (let j = 0; j < 4; j++) {\n        if (main_1.player[i].hitboxes.active[j] && main_1.player[i].phys.prevFrameHitboxes.active[j]) {\n            if (main_1.player[i].phys.prevFrameHitboxes.id[j].offset[main_1.player[i].phys.prevFrameHitboxes.frame] === undefined) {\n                continue;\n            }\n            if (main_1.player[i].hitboxes.id[j].offset[main_1.player[i].hitboxes.frame] === undefined) {\n                continue;\n            }\n            const h1 = new Vec2D_1.Vec2D(main_1.player[i].phys.posPrev.x + (main_1.player[i].phys.prevFrameHitboxes.id[j].offset[main_1.player[i].phys.prevFrameHitboxes.frame].x * main_1.player[i].phys.facePrev), main_1.player[i].phys.posPrev.y + main_1.player[i].phys.prevFrameHitboxes.id[j].offset[main_1.player[i].phys.prevFrameHitboxes.frame].y);\n            const h2 = new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x + (main_1.player[i].hitboxes.id[j].offset[main_1.player[i].hitboxes.frame].x * main_1.player[i].phys.face), main_1.player[i].phys.pos.y + main_1.player[i].hitboxes.id[j].offset[main_1.player[i].hitboxes.frame].y);\n            const a = h2.x - h1.x;\n            const b = h2.y - h1.y;\n            let x = 0;\n            if (!(a === 0 || b === 0)) {\n                x = Math.atan(Math.abs(a) / Math.abs(b));\n            }\n            {\n                const opp = Math.sin(x) * main_1.player[i].hitboxes.id[j].size;\n                const adj = Math.cos(x) * main_1.player[i].hitboxes.id[j].size;\n                const sigma = [h1.x, h1.y];\n                let alpha1;\n                let alpha2;\n                let beta1;\n                let beta2;\n                if ((a > 0 && b > 0) || (a <= 0 && b <= 0)) {\n                    alpha1 = new Vec2D_1.Vec2D((sigma[0] + adj), (sigma[1] - opp));\n                    alpha2 = new Vec2D_1.Vec2D((alpha1.x + a), (alpha1.y + b));\n                    beta1 = new Vec2D_1.Vec2D((sigma[0] - adj), (sigma[1] + opp));\n                    beta2 = new Vec2D_1.Vec2D((beta1.x + a), (beta1.y + b));\n                }\n                else {\n                    alpha1 = new Vec2D_1.Vec2D((sigma[0] - adj), (sigma[1] - opp));\n                    alpha2 = new Vec2D_1.Vec2D((alpha1.x + a), (alpha1.y + b));\n                    beta1 = new Vec2D_1.Vec2D((sigma[0] + adj), (sigma[1] + opp));\n                    beta2 = new Vec2D_1.Vec2D((beta1.x + a), (beta1.y + b));\n                }\n                main_1.player[i].phys.interPolatedHitbox[j] = [alpha1, alpha2, beta2, beta1];\n            }\n            {\n                const opp = Math.sin(x) * main_1.player[i].hitboxes.id[j].size - settings_1.gameSettings.phantomThreshold;\n                const adj = Math.cos(x) * main_1.player[i].hitboxes.id[j].size - settings_1.gameSettings.phantomThreshold;\n                const sigma = [h1.x, h1.y];\n                let alpha1;\n                let alpha2;\n                let beta1;\n                let beta2;\n                if ((a > 0 && b > 0) || (a <= 0 && b <= 0)) {\n                    alpha1 = new Vec2D_1.Vec2D((sigma[0] + adj), (sigma[1] - opp));\n                    alpha2 = new Vec2D_1.Vec2D((alpha1.x + a), (alpha1.y + b));\n                    beta1 = new Vec2D_1.Vec2D((sigma[0] - adj), (sigma[1] + opp));\n                    beta2 = new Vec2D_1.Vec2D((beta1.x + a), (beta1.y + b));\n                }\n                else {\n                    alpha1 = new Vec2D_1.Vec2D((sigma[0] - adj), (sigma[1] - opp));\n                    alpha2 = new Vec2D_1.Vec2D((alpha1.x + a), (alpha1.y + b));\n                    beta1 = new Vec2D_1.Vec2D((sigma[0] + adj), (sigma[1] + opp));\n                    beta2 = new Vec2D_1.Vec2D((beta1.x + a), (beta1.y + b));\n                }\n                main_1.player[i].phys.interPolatedHitboxPhantom[j] = [alpha1, alpha2, beta2, beta1];\n                main_1.player[i].phys.isInterpolated = true;\n            }\n        }\n    }\n}\n;\nfunction physics(i, input) {\n    main_1.player[i].phys.passing = false;\n    main_1.player[i].phys.posPrev = new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x, main_1.player[i].phys.pos.y);\n    main_1.player[i].phys.facePrev = main_1.player[i].phys.face;\n    (0, deepCopyObject_1.deepObjectMerge)(true, main_1.player[i].phys.prevFrameHitboxes, main_1.player[i].hitboxes);\n    hitlagSwitchUpdate(i, input);\n    hurtBoxStateUpdate(i);\n    outOfCameraUpdate(i);\n    lCancelUpdate(i, input);\n    if (!main_1.player[i].phys.grounded) {\n        main_1.player[i].phys.airborneTimer++;\n    }\n    //console.log(player[i].timer);\n    let frame = Math.floor(main_1.player[i].timer);\n    if (frame === 0) {\n        frame = 1;\n    }\n    if (frame > characters_1.framesData[main_1.characterSelections[i]][main_1.player[i].actionState]) {\n        frame = characters_1.framesData[main_1.characterSelections[i]][main_1.player[i].actionState];\n    }\n    //console.log(actionStates[characterSelections[i]][player[i].actionState].name+\" \"+(frame-1));\n    /* global ecb */\n    let ecb;\n    const ecbOffset = actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].dead ? [0, 0, 0, 0] : [ecb[main_1.characterSelections[i]][main_1.player[i].actionState][frame - 1][0] * main_1.player[i].charAttributes.ecbScale, ecb[main_1.characterSelections[i]][main_1.player[i].actionState][frame - 1][1] * main_1.player[i].charAttributes.ecbScale, ecb[main_1.characterSelections[i]][main_1.player[i].actionState][frame - 1][2] * main_1.player[i].charAttributes.ecbScale, ecb[main_1.characterSelections[i]][main_1.player[i].actionState][frame - 1][3] * main_1.player[i].charAttributes.ecbScale];\n    const playerPosX = main_1.player[i].phys.pos.x;\n    const playerPosY = main_1.player[i].phys.pos.y;\n    main_1.player[i].phys.ECBp = [\n        new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x, main_1.player[i].phys.pos.y + ((main_1.player[i].phys.grounded || main_1.player[i].phys.airborneTimer < 10) ? 0 : ecbOffset[0])),\n        new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x + Math.max(1, ecbOffset[1]), main_1.player[i].phys.pos.y + ecbOffset[2]),\n        new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x, main_1.player[i].phys.pos.y + ecbOffset[3]),\n        new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x - ecbOffset[1], main_1.player[i].phys.pos.y + ecbOffset[2])\n    ];\n    if (ecbSquashData[i] !== null && ecbSquashData[i].factor < 1) {\n        if (ecbSquashData[i].factor * 2 * ecbOffset[1] < environmentalCollision_1.smallestECBWidth) {\n            ecbSquashData[i].factor = (environmentalCollision_1.smallestECBWidth + 2 * environmentalCollision_1.additionalOffset) / (2 * ecbOffset[1]);\n        }\n        main_1.player[i].phys.ECBp = (0, ecbTransform_1.squashECBAt)(main_1.player[i].phys.ECBp, { factor: ecbSquashData[i].factor, location: 0 });\n        if (!main_1.player[i].phys.grounded) {\n            main_1.player[i].phys.ECBp = (0, ecbTransform_1.moveECB)(main_1.player[i].phys.ECBp, new Vec2D_1.Vec2D(0, (ecbSquashData[i].factor - 1) * ecbOffset[0]));\n        }\n    }\n    if (!actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].ignoreCollision) {\n        let notTouchingWalls = [true, true];\n        let stillGrounded = true;\n        let backward = false;\n        [stillGrounded, backward, notTouchingWalls] = findAndResolveCollisions(i, input, backward, notTouchingWalls, ecbOffset);\n        if (main_1.player[i].phys.grabbedBy === -1) {\n            if (notTouchingWalls[0] && notTouchingWalls[1] && main_1.player[i].phys.canWallJump) {\n                main_1.player[i].phys.wallJumpTimer = 254;\n            }\n            if (!notTouchingWalls[0] || !notTouchingWalls[1]) {\n                if (main_1.player[i].phys.grounded) {\n                    const s = main_1.player[i].phys.onSurface[1];\n                    const surface = main_1.player[i].phys.onSurface[0] ? activeStage_1.activeStage.platform[s] : activeStage_1.activeStage.ground[s];\n                    if (main_1.player[i].phys.pos.x < surface[0].x - 0.1 || main_1.player[i].phys.pos.x > surface[1].x + 0.1) {\n                        stillGrounded = false;\n                    }\n                }\n            }\n            if (!stillGrounded) {\n                main_1.player[i].phys.grounded = false;\n                if (typeof actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].airborneState !== 'undefined') {\n                    main_1.player[i].actionState = actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].airborneState;\n                }\n                else {\n                    if (actionStateShortcuts_1.actionStates[main_1.characterSelections[i]][main_1.player[i].actionState].missfoot && backward) {\n                        actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].MISSFOOT.init(i, input);\n                    }\n                    else {\n                        if (main_1.player[i].phys.grabbing !== -1) {\n                            actionStateShortcuts_1.actionStates[main_1.characterSelections[main_1.player[i].phys.grabbing]].FALL.init(main_1.player[i].phys.grabbing, input, true);\n                            main_1.player[main_1.player[i].phys.grabbing].phys.grabbedBy = -1;\n                            main_1.player[i].phys.grabbing = -1;\n                        }\n                        actionStateShortcuts_1.actionStates[main_1.characterSelections[i]].FALL.init(i, input);\n                    }\n                    if (Math.abs(main_1.player[i].phys.cVel.x) > main_1.player[i].charAttributes.aerialHmaxV) {\n                        main_1.player[i].phys.cVel.x = Math.sign(main_1.player[i].phys.cVel.x) * main_1.player[i].charAttributes.aerialHmaxV;\n                    }\n                }\n                main_1.player[i].phys.shielding = false;\n            }\n            if (main_1.player[i].phys.grounded) {\n                for (let j = 0; j < 4; j++) {\n                    if (main_1.playerType[j] > -1) {\n                        if (i !== j) {\n                            if (main_1.player[j].phys.grounded &&\n                                main_1.player[j].phys.onSurface[0] === main_1.player[i].phys.onSurface[0] &&\n                                main_1.player[j].phys.onSurface[1] === main_1.player[i].phys.onSurface[1]) {\n                                if (main_1.player[i].phys.grabbing !== j && main_1.player[i].phys.grabbedBy !== j) {\n                                    // TODO: this pushing code needs to account for players on slanted surfaces\n                                    const diff = Math.abs(main_1.player[i].phys.pos.x - main_1.player[j].phys.pos.x);\n                                    if (diff < 6.5 && diff > 0) {\n                                        main_1.player[j].phys.pos.x += Math.sign(main_1.player[i].phys.pos.x - main_1.player[j].phys.pos.x) * -0.3;\n                                    }\n                                    else if (diff === 0 && Math.abs(main_1.player[i].phys.cVel.x) > Math.abs(main_1.player[j].phys.cVel.x)) {\n                                        main_1.player[j].phys.pos.x += Math.sign(main_1.player[i].phys.cVel.x) * -0.3;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    else { // player ignoring collisions\n        main_1.player[i].phys.ECB1 = [\n            new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x, main_1.player[i].phys.pos.y + ((main_1.player[i].phys.grounded || main_1.player[i].phys.airborneTimer < 10) ? 0 : ecbOffset[0])),\n            new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x + ecbOffset[1], main_1.player[i].phys.pos.y + ecbOffset[2]),\n            new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x, main_1.player[i].phys.pos.y + ecbOffset[3]),\n            new Vec2D_1.Vec2D(main_1.player[i].phys.pos.x - ecbOffset[1], main_1.player[i].phys.pos.y + ecbOffset[2])\n        ];\n    }\n    if (main_1.player[i].phys.shielding === false) {\n        main_1.player[i].phys.shieldHP += 0.07;\n        if (main_1.player[i].phys.shieldHP > 60) {\n            main_1.player[i].phys.shieldHP = 60;\n        }\n    }\n    dealWithLedges(i, input);\n    dealWithDeath(i, input);\n    main_1.player[i].phys.hurtbox = new Box2D_1.Box2D([playerPosX - main_1.player[i].charAttributes.hurtboxOffset[0], playerPosY + main_1.player[i].charAttributes.hurtboxOffset[1]], [playerPosX + main_1.player[i].charAttributes.hurtboxOffset[0], playerPosY]);\n    if (main_1.gameMode === 3 && main_1.player[i].phys.posPrev.y > -80 && playerPosY <= -80) {\n        sfx_1.sounds.lowdown.play();\n    }\n    updateHitboxes(i);\n    main_1.player[i].phys.posDelta = new Vec2D_1.Vec2D(Math.abs(playerPosX - main_1.player[i].phys.posPrev.x), Math.abs(playerPosY - main_1.player[i].phys.posPrev.y));\n    if (main_1.showDebug) {\n        const actState = document.getElementById('actState' + i);\n        const stateNum = document.getElementById('stateNum' + i);\n        const face = document.getElementById('face' + i);\n        const velocityX = document.getElementById(\"velocityX\" + i);\n        const velocityY = document.getElementById(\"velocityY\" + i);\n        const kvelocityX = document.getElementById(\"kvelocityX\" + i);\n        const kvelocityY = document.getElementById(\"kvelocityY\" + i);\n        const pvelocityX = document.getElementById(\"pvelocityX\" + i);\n        const pvelocityY = document.getElementById(\"pvelocityY\" + i);\n        actState.innerHTML = main_1.player[i].currentAction + \" \" + main_1.player[i].currentSubaction + \" : \" + main_1.player[i].actionState;\n        stateNum.innerHTML = frame.toString();\n        face.innerHTML = main_1.player[i].phys.face;\n        velocityX.innerHTML = main_1.player[i].phys.cVel.x.toFixed(5);\n        velocityY.innerHTML = main_1.player[i].phys.cVel.y.toFixed(5);\n        kvelocityX.innerHTML = main_1.player[i].phys.kVel.x.toFixed(5);\n        kvelocityY.innerHTML = main_1.player[i].phys.kVel.y.toFixed(5);\n        pvelocityX.innerHTML = playerPosX.toFixed(5);\n        pvelocityY.innerHTML = playerPosY.toFixed(5);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/physics/physics.ts\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("1485a7197fd21fb9a503")
/******/ })();
/******/ 
/******/ }
);