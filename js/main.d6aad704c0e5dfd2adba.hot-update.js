/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatemeleelight"]("main",{

/***/ "./src/main/multiplayer/encode.js":
/*!****************************************!*\
  !*** ./src/main/multiplayer/encode.js ***!
  \****************************************/
/***/ (() => {

throw new Error("Module build failed (from ./node_modules/thread-loader/dist/cjs.js):\nThread Loader (Worker 0)\nC:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\src\\main\\multiplayer\\encode.js: Missing semicolon. (76:55)\n\n\u001b[0m \u001b[90m 74 |\u001b[39m }\n \u001b[90m 75 |\u001b[39m\n\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 76 |\u001b[39m functionbooleansToByte( b0\u001b[33m,\u001b[39m b1\u001b[33m,\u001b[39m b2\u001b[33m,\u001b[39m b3\u001b[33m,\u001b[39m b4\u001b[33m,\u001b[39m b5\u001b[33m,\u001b[39m b6\u001b[33m,\u001b[39m b7) {\n \u001b[90m    |\u001b[39m                                                        \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\n \u001b[90m 77 |\u001b[39m   \u001b[36mreturn\u001b[39m b0\u001b[33m?\u001b[39m\u001b[35m128\u001b[39m\u001b[33m:\u001b[39m\u001b[35m0\u001b[39m \u001b[33m+\u001b[39m b1\u001b[33m?\u001b[39m\u001b[35m64\u001b[39m\u001b[33m:\u001b[39m\u001b[35m0\u001b[39m \u001b[33m+\u001b[39m b2\u001b[33m?\u001b[39m\u001b[35m32\u001b[39m\u001b[33m:\u001b[39m\u001b[35m0\u001b[39m \u001b[33m+\u001b[39m b3\u001b[33m?\u001b[39m\u001b[35m16\u001b[39m\u001b[33m:\u001b[39m\u001b[35m0\u001b[39m \u001b[33m+\u001b[39m b4\u001b[33m?\u001b[39m\u001b[35m8\u001b[39m\u001b[33m:\u001b[39m\u001b[35m0\u001b[39m \u001b[33m+\u001b[39m b5\u001b[33m?\u001b[39m\u001b[35m4\u001b[39m\u001b[33m:\u001b[39m\u001b[35m0\u001b[39m \u001b[33m+\u001b[39m b6\u001b[33m?\u001b[39m\u001b[35m2\u001b[39m\u001b[33m:\u001b[39m\u001b[35m0\u001b[39m \u001b[33m+\u001b[39m b7\u001b[33m?\u001b[39m\u001b[35m1\u001b[39m\u001b[33m:\u001b[39m\u001b[35m0\u001b[39m\u001b[33m;\u001b[39m\n \u001b[90m 78 |\u001b[39m }\n \u001b[90m 79 |\u001b[39m\u001b[0m\n\n    at constructor (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:349:19)\n    at FlowParserMixin.raise (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:3247:19)\n    at FlowParserMixin.semicolon (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:3573:10)\n    at FlowParserMixin.parseExpressionStatement (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:12739:10)\n    at FlowParserMixin.parseExpressionStatement (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:5060:18)\n    at FlowParserMixin.parseStatementContent (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:12354:19)\n    at FlowParserMixin.parseStatementLike (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:12217:17)\n    at FlowParserMixin.parseStatementLike (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:5038:24)\n    at FlowParserMixin.parseModuleItem (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:12194:17)\n    at FlowParserMixin.parseBlockOrModuleBlockBody (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:12770:36)\n    at FlowParserMixin.parseBlockBody (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:12763:10)\n    at FlowParserMixin.parseProgram (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:12091:10)\n    at FlowParserMixin.parseTopLevel (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:12081:25)\n    at FlowParserMixin.parseTopLevel (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:5805:28)\n    at FlowParserMixin.parse (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:13893:10)\n    at parse (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\parser\\lib\\index.js:13927:38)\n    at parser (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\core\\lib\\parser\\index.js:41:34)\n    at parser.next (<anonymous>)\n    at normalizeFile (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\core\\lib\\transformation\\normalize-file.js:64:37)\n    at normalizeFile.next (<anonymous>)\n    at run (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\core\\lib\\transformation\\index.js:21:50)\n    at run.next (<anonymous>)\n    at transform (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\core\\lib\\transform.js:22:33)\n    at transform.next (<anonymous>)\n    at step (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\gensync\\index.js:261:32)\n    at C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\gensync\\index.js:273:13\n    at async.call.result.err.err (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\gensync\\index.js:223:11)\n    at C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\gensync\\index.js:189:28\n    at C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\@babel\\core\\lib\\gensync-utils\\async.js:67:7\n    at C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\gensync\\index.js:113:33\n    at step (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\gensync\\index.js:287:14)\n    at C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\gensync\\index.js:273:13\n    at async.call.result.err.err (C:\\Users\\noahp\\Documents\\Programming\\Software-Projects\\4Stockfish\\node_modules\\gensync\\index.js:223:11)");

/***/ }),

/***/ "./src/input/gamepad/gamepadCalibration.ts":
/*!*************************************************!*\
  !*** ./src/input/gamepad/gamepadCalibration.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// @flow\n/*eslint indent:0*/\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.customGamepadInfoIsUsable = void 0;\nexports.setClickObject = setClickObject;\nexports.setClickObjectNumber = setClickObjectNumber;\nexports.setCustomGamepadInfoIsUsable = setCustomGamepadInfoIsUsable;\nexports.runCalibration = runCalibration;\nconst Vec2D_js_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../main/util/Vec2D.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst deepCopy_js_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../main/util/deepCopy.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst main_js_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../main/main.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst controllermenu_js_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../menus/controllermenu.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst gamepadInfo_js_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module './gamepadInfo.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst gamepad_js_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module './gamepad.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst custom_js_1 = __webpack_require__(/*! ./gamepads/custom.js */ \"./src/input/gamepad/gamepads/custom.js\");\nconst findGamepadInfo_js_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module './findGamepadInfo.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst sfx_js_1 = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '../../main/sfx.js'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\nconst calibrationInProgress = [false, false, false, false];\nfunction setCalibrationInProgress(i, booleanean) {\n    calibrationInProgress[i] = booleanean;\n}\nconst nullSnapshots = {\n    b0: [], bL: [], bR: [], bU: [],\n    a0: [], aL: [], aR: [], aU: []\n};\nlet clickObject = null;\nfunction setClickObject(click) {\n    if (clickObject === null) {\n        clickObject = click;\n    }\n}\nlet clickObjectNumber = 0;\nfunction setClickObjectNumber(k) {\n    clickObjectNumber = k;\n}\nexports.customGamepadInfoIsUsable = [true, null, null, null, null, null, null, null];\nlet listening = false;\nconst ids = [\"a\", \"b\", \"x\", \"y\", \"s\", \"r\", \"l\", \"z\", \"dpad\", \"icon\", \"ls\", \"cs\"];\n// add listeners for click\n// these turn off when the SVG is not displayed, so shouldn't impact performance\nfunction listen() {\n    var _a, _b;\n    // $FlowFixMe ignore the following type error\n    const svgDoc = (_a = document.getElementById(\"gamepadSVGCalibration\")) === null || _a === void 0 ? void 0 : _a.ownerDocument;\n    for (let i = 0; i < ids.length; i++) {\n        const id = ids[i];\n        if (id === null) {\n            throw \"id is null\";\n        }\n        // eslint-disable-next-line no-loop-func\n        (_b = svgDoc === null || svgDoc === void 0 ? void 0 : svgDoc.getElementById(id)) === null || _b === void 0 ? void 0 : _b.addEventListener('click', () => {\n            clickObject = id;\n        });\n    }\n    listening = true;\n}\nconst defaultTexts = [\"Click button, trigger or analog stick to rebind.\"];\nconst errorText = [\"Error: no controller detected\"];\n// figure out which custom gamepad infos are usable by the current controller\n// sets the value for customGamepadInfoIsUsable\nfunction setCustomGamepadInfoIsUsable(j) {\n    const currentGamepad = (0, gamepad_js_1.getGamepad)(j);\n    if (currentGamepad) {\n        const currentGamepadId = currentGamepad.id;\n        if ((0, findGamepadInfo_js_1.getGamepadNameAndInfo)(currentGamepadId) === null) {\n            exports.customGamepadInfoIsUsable[0] = null;\n        }\n        else {\n            exports.customGamepadInfoIsUsable[0] = true;\n        }\n        for (let k = 1; k < 8; k++) {\n            const maybeCustomGamepadInfo = (0, custom_js_1.getCustomGamepadInfo)(k);\n            if (maybeCustomGamepadInfo === null) {\n                exports.customGamepadInfoIsUsable[k] = null;\n            }\n            else {\n                if (currentGamepadId === maybeCustomGamepadInfo.fullID) {\n                    exports.customGamepadInfoIsUsable[k] = true;\n                }\n                else {\n                    exports.customGamepadInfoIsUsable[k] = false;\n                }\n            }\n        }\n    }\n    else {\n        exports.customGamepadInfoIsUsable[0] = null;\n    }\n}\nfunction runCalibration(i) {\n    if (!calibrationInProgress[i]) {\n        setCalibrationInProgress(i, true);\n        const interval = 2000;\n        const j = main_js_1.currentPlayers[i];\n        const prevGamepadInfo = main_js_1.mType[i] === null || main_js_1.mType[i] === \"keyboard\" ? gamepadInfo_js_1.nullGamepadInfo : main_js_1.mType[i];\n        const gamepadInfo = (0, deepCopy_js_1.deepCopyObject)(true, prevGamepadInfo);\n        setCustomGamepadInfoIsUsable(j);\n        clickObject = null;\n        if (listening === false) {\n            listen();\n        }\n        (0, controllermenu_js_1.updateControllerMenu)(false, [\"Mouse-click the start button to begin calibration.\"], 0);\n        preCalibrationLoop(i, j, gamepadInfo, interval);\n    }\n}\nfunction resetGamepadInfo(j) {\n    const gamepad = (0, gamepad_js_1.getGamepad)(j);\n    let baseGamepadInfo = gamepadInfo_js_1.nullGamepadInfo;\n    if (gamepad !== undefined && gamepad !== null && gamepad.id !== undefined && gamepad.id !== null) {\n        const maybeNameAndInfo = (0, findGamepadInfo_js_1.getGamepadNameAndInfo)(gamepad.id);\n        if (maybeNameAndInfo !== null) {\n            baseGamepadInfo = (0, deepCopy_js_1.deepCopyObject)(true, maybeNameAndInfo[1]);\n        }\n    }\n    return baseGamepadInfo;\n}\nfunction saveSound() {\n    sfx_js_1.sounds.star.play();\n}\nfunction preCalibrationLoop(i, j, gamepadInfo, interval) {\n    if (clickObject === \"s\") {\n        sfx_js_1.sounds.blunthit.play();\n        (0, custom_js_1.setCustomGamepadInfo)(j, gamepadInfo);\n        (0, main_js_1.setUsingCustomControls)(i, true);\n        (0, controllermenu_js_1.updateControllerMenu)(false, [\"Finding controller neutral point.\", \"Do not press anything.\"], interval);\n        // take null snapshot\n        setTimeout(() => {\n            (0, main_js_1.setControllerReset)(i);\n            saveSound();\n            const gamepad = (0, gamepad_js_1.getGamepad)(j);\n            if (gamepad !== undefined && gamepad !== null) {\n                const snapshots = nullSnapshots;\n                snapshots.b0 = (0, deepCopy_js_1.deepCopyArray)(true, gamepad.buttons);\n                snapshots.a0 = (0, deepCopy_js_1.deepCopyArray)(true, gamepad.axes);\n                calibrationLoop(i, j, gamepadInfo, snapshots, interval);\n                (0, controllermenu_js_1.updateControllerMenu)(false, defaultTexts, 0);\n            }\n            else {\n                (0, controllermenu_js_1.updateControllerMenu)(false, errorText, 0);\n            }\n        }, interval);\n    }\n    else if (clickObject === \"exit\") {\n        sfx_js_1.sounds.menuBack.play();\n        (0, controllermenu_js_1.updateControllerMenu)(true, [\"Quitting calibration menu.\"], interval);\n        setCalibrationInProgress(i, false);\n    }\n    else if (clickObject === \"reset\") {\n        sfx_js_1.sounds.loudelectricfizz.play();\n        (0, controllermenu_js_1.setCustomInUse)(0);\n        const baseGamepadInfo = resetGamepadInfo(j);\n        (0, main_js_1.setUsingCustomControls)(i, false, baseGamepadInfo);\n        (0, controllermenu_js_1.updateControllerMenu)(false, [\"Controller bindings have been reset.\", \"Click the start button to begin calibration.\"], 0);\n        setTimeout(() => preCalibrationLoop(i, j, baseGamepadInfo, interval), 16);\n    }\n    else if (clickObject === \"center\") {\n        saveSound();\n        (0, main_js_1.setControllerReset)(i);\n        (0, controllermenu_js_1.updateControllerMenu)(false, [\"Controller has been re-centered.\", \"Click the start button to begin calibration.\"], 0);\n        setTimeout(() => preCalibrationLoop(i, j, gamepadInfo, interval), 16);\n    }\n    else if (clickObject === \"loadCustom\") {\n        if (clickObjectNumber === 0) {\n            (0, controllermenu_js_1.setCustomInUse)(0);\n            const baseGamepadInfo = resetGamepadInfo(j);\n            (0, main_js_1.setUsingCustomControls)(i, false, baseGamepadInfo);\n            (0, controllermenu_js_1.updateControllerMenu)(false, [\"Now using default controller bindings.\", \"Click the start button to begin calibration.\"], 0);\n            setTimeout(() => preCalibrationLoop(i, j, baseGamepadInfo, interval), 16);\n        }\n        else {\n            const newCustomGamepadInfo = (0, custom_js_1.getCustomGamepadInfo)(clickObjectNumber);\n            if (newCustomGamepadInfo === null || exports.customGamepadInfoIsUsable[clickObjectNumber] !== true) {\n                sfx_js_1.sounds.deny.play();\n                setTimeout(() => preCalibrationLoop(i, j, gamepadInfo, interval), 16);\n            }\n            else {\n                const newGamepadInfo = newCustomGamepadInfo.gamepadInfo;\n                (0, controllermenu_js_1.setCustomInUse)(clickObjectNumber);\n                (0, custom_js_1.setCustomGamepadInfo)(j, newGamepadInfo);\n                (0, main_js_1.setUsingCustomControls)(i, true);\n                (0, controllermenu_js_1.updateControllerMenu)(false, [\"Now using custom bindings #\" + clickObjectNumber + \".\", \"Click the start button to begin calibration.\"], 0);\n                setTimeout(() => preCalibrationLoop(i, j, newGamepadInfo, interval), 16);\n            }\n        }\n    }\n    else if (clickObject === \"saveCustom\") {\n        if (clickObjectNumber < 1) {\n            sfx_js_1.sounds.deny.play();\n        }\n        else {\n            exports.customGamepadInfoIsUsable[clickObjectNumber] = true;\n            (0, custom_js_1.storeCustomGamepadInfo)(gamepadInfo, (0, gamepad_js_1.getGamepad)(j).id, (\"custom\" + clickObjectNumber), clickObjectNumber);\n            (0, controllermenu_js_1.setCustomInUse)(clickObjectNumber);\n        }\n        setTimeout(() => preCalibrationLoop(i, j, gamepadInfo, interval), 16);\n    }\n    else {\n        if (clickObject === \"icon\") {\n            sfx_js_1.sounds.shout8.play();\n            sfx_js_1.sounds.sword3.play();\n        }\n        setTimeout(() => preCalibrationLoop(i, j, gamepadInfo, interval), 16);\n    }\n    clickObject = null;\n}\n;\nfunction calibrationLoop(i, j, gamepadInfo, snapshots, interval) {\n    if (clickObject === null) {\n        setTimeout(() => {\n            calibrationLoop(i, j, gamepadInfo, snapshots, interval);\n        }, 16);\n    }\n    else {\n        calibrateObject(i, j, gamepadInfo, snapshots, interval);\n    }\n}\n;\nfunction calibrateObject(i, j, gamepadInfo, snapshots, interval) {\n    let texts;\n    let gamepad;\n    let totalInterval = interval + 16;\n    if (clickObject === null) {\n        console.log(\"error in function 'calibrateObject': calibration called on null object\");\n    }\n    else if (clickObject === \"icon\") {\n        sfx_js_1.sounds.shout8.play();\n        sfx_js_1.sounds.sword3.play();\n    }\n    else if (clickObject === \"exit\") {\n        sfx_js_1.sounds.menuBack.play();\n        setCalibrationInProgress(i, false);\n        (0, controllermenu_js_1.updateControllerMenu)(true, [\"Quitting calibration menu.\"], interval);\n    }\n    else if (clickObject === \"reset\") {\n        sfx_js_1.sounds.loudelectricfizz.play();\n        (0, controllermenu_js_1.setCustomInUse)(0);\n        const baseGamepadInfo = resetGamepadInfo(j);\n        (0, custom_js_1.setCustomGamepadInfo)(j, baseGamepadInfo);\n        (0, main_js_1.setUsingCustomControls)(i, false, baseGamepadInfo);\n        (0, controllermenu_js_1.updateControllerMenu)(false, [\"Controller bindings have been reset.\", \"Click the start button to begin calibration.\"], 0);\n        setTimeout(() => preCalibrationLoop(i, j, baseGamepadInfo, interval), 16);\n    }\n    else if (clickObject === \"center\") {\n        saveSound();\n        (0, main_js_1.setControllerReset)(i);\n        (0, controllermenu_js_1.updateControllerMenu)(false, [\"Controller has been re-centered.\", \"Click the start button to continue calibration.\"], 0);\n        setTimeout(() => preCalibrationLoop(i, j, gamepadInfo, interval), 16);\n        totalInterval = 16;\n    }\n    else if (clickObject === \"loadCustom\") {\n        if (clickObjectNumber === 0) {\n            (0, controllermenu_js_1.setCustomInUse)(0);\n            const baseGamepadInfo = resetGamepadInfo(j);\n            (0, main_js_1.setUsingCustomControls)(i, false, baseGamepadInfo);\n            (0, controllermenu_js_1.updateControllerMenu)(false, [\"Now using default controller bindings.\", \"Click the start button to begin calibration.\"], 0);\n            setTimeout(() => preCalibrationLoop(i, j, baseGamepadInfo, interval), 16);\n        }\n        else {\n            const newCustomGamepadInfo = (0, custom_js_1.getCustomGamepadInfo)(clickObjectNumber);\n            if (newCustomGamepadInfo === null || exports.customGamepadInfoIsUsable[clickObjectNumber] !== true) {\n                sfx_js_1.sounds.deny.play();\n                setTimeout(() => preCalibrationLoop(i, j, gamepadInfo, interval), 16);\n            }\n            else {\n                const newGamepadInfo = newCustomGamepadInfo.gamepadInfo;\n                (0, controllermenu_js_1.setCustomInUse)(clickObjectNumber);\n                (0, custom_js_1.setCustomGamepadInfo)(j, newGamepadInfo);\n                (0, main_js_1.setUsingCustomControls)(i, true);\n                (0, controllermenu_js_1.updateControllerMenu)(false, [\"Now using custom bindings #\" + clickObjectNumber + \".\", \"Click the start button to begin calibration.\"], 0);\n                setTimeout(() => preCalibrationLoop(i, j, newGamepadInfo, interval), 16);\n            }\n        }\n    }\n    else if (clickObject === \"saveCustom\") {\n        if (clickObjectNumber < 1) {\n            sfx_js_1.sounds.deny.play();\n        }\n        else {\n            exports.customGamepadInfoIsUsable[clickObjectNumber] = true;\n            (0, custom_js_1.storeCustomGamepadInfo)(gamepadInfo, (0, gamepad_js_1.getGamepad)(j).id, (\"custom\" + clickObjectNumber), clickObjectNumber);\n            (0, controllermenu_js_1.setCustomInUse)(clickObjectNumber);\n        }\n    }\n    else if (clickObject === \"l\" || clickObject === \"r\") {\n        texts = [\"Fully depress \" + clickObject.toUpperCase() + \" trigger.\", \"Keep holding down the trigger.\"];\n        const t = clickObject; // passed as-is in the closure\n        const tA = clickObject + \"A\";\n        (0, controllermenu_js_1.updateControllerMenu)(false, texts, interval);\n        setTimeout(() => {\n            saveSound();\n            gamepad = (0, gamepad_js_1.getGamepad)(j);\n            gamepadInfo[t] = scanForButton(snapshots.b0, gamepad.buttons, snapshots.a0, gamepad.axes, true);\n            gamepadInfo[tA] = scanForTrigger(snapshots.b0, gamepad.buttons, snapshots.a0, gamepad.axes);\n            (0, controllermenu_js_1.updateControllerMenu)(false, defaultTexts, 0);\n            if (t === \"l\" && gamepadInfo.lA !== null && (gamepadInfo.lA.kind === \"value\" || gamepadInfo.lA.kind === \"axis\")) {\n                gamepadInfo.isGC = Math.abs(gamepadInfo.lA.min + 0.866) < 0.01 ? true : false; // hacky but hey\n            }\n        }, interval);\n    }\n    else if (clickObject === \"ls\" || clickObject === \"cs\" || clickObject === \"dpad\") {\n        let sep = \",\";\n        if (clickObject === \"ls\") {\n            texts = [\"Move left analog stick all the way \", \"and keep it there.\"];\n        }\n        else if (clickObject === \"cs\") {\n            texts = [\"Move c-stick all the way \", \"and keep it there.\"];\n        }\n        else {\n            sep = \".\";\n            texts = [\"Press and hold d-pad \"];\n        }\n        totalInterval += 5 * interval;\n        (0, controllermenu_js_1.updateControllerMenu)(false, [texts[0] + \"left\" + sep, texts[1]], 1.5 * interval);\n        setTimeout(() => {\n            saveSound();\n            gamepad = (0, gamepad_js_1.getGamepad)(j);\n            snapshots.bL = (0, deepCopy_js_1.deepCopyArray)(true, gamepad.buttons);\n            snapshots.aL = (0, deepCopy_js_1.deepCopyArray)(true, gamepad.axes);\n            (0, controllermenu_js_1.updateControllerMenu)(false, [texts[0] + \"right\" + sep, texts[1]], 1.5 * interval);\n        }, 1.5 * interval);\n        setTimeout(() => {\n            saveSound();\n            gamepad = (0, gamepad_js_1.getGamepad)(j);\n            snapshots.bR = (0, deepCopy_js_1.deepCopyArray)(true, gamepad.buttons);\n            snapshots.aR = (0, deepCopy_js_1.deepCopyArray)(true, gamepad.axes);\n            (0, controllermenu_js_1.updateControllerMenu)(false, [texts[0] + \"up\" + sep, texts[1]], 1.5 * interval);\n        }, 3 * interval);\n        setTimeout(() => {\n            saveSound();\n            gamepad = (0, gamepad_js_1.getGamepad)(j);\n            snapshots.bU = (0, deepCopy_js_1.deepCopyArray)(true, gamepad.buttons);\n            snapshots.aU = (0, deepCopy_js_1.deepCopyArray)(true, gamepad.axes);\n            (0, controllermenu_js_1.updateControllerMenu)(false, [texts[0] + \"down\" + sep, texts[1]], 1.5 * interval);\n        }, 4.5 * interval);\n        if (clickObject === \"dpad\") {\n            setTimeout(() => {\n                saveSound();\n                gamepad = (0, gamepad_js_1.getGamepad)(j);\n                gamepadInfo.dpad = scanForDPad(snapshots.b0, snapshots.bL, snapshots.bR, snapshots.bU, gamepad.buttons, snapshots.a0, snapshots.aL, snapshots.aR, snapshots.aU, gamepad.axes);\n                (0, controllermenu_js_1.updateControllerMenu)(false, defaultTexts, 0);\n            }, 6 * interval);\n        }\n        else {\n            const clickNow = clickObject; // passed as-is in the closure\n            setTimeout(() => {\n                saveSound();\n                gamepad = (0, gamepad_js_1.getGamepad)(j);\n                gamepadInfo[clickNow] = scanForStick(snapshots.b0, snapshots.bL, snapshots.bR, snapshots.bU, gamepad.buttons, snapshots.a0, snapshots.aL, snapshots.aR, snapshots.aU, gamepad.axes);\n                (0, controllermenu_js_1.updateControllerMenu)(false, defaultTexts, 0);\n            }, 6 * interval);\n        }\n    }\n    else { // only plain buttons left now\n        const buttonName = clickObject === \"s\" ? \"start\" : clickObject.toUpperCase();\n        texts = [\"Press and hold \" + buttonName + \".\"];\n        const clickNow = clickObject;\n        (0, controllermenu_js_1.updateControllerMenu)(false, texts, interval);\n        setTimeout(() => {\n            saveSound();\n            gamepad = (0, gamepad_js_1.getGamepad)(j);\n            gamepadInfo[clickNow] = scanForButton(snapshots.b0, gamepad.buttons, snapshots.a0, gamepad.axes);\n            (0, controllermenu_js_1.updateControllerMenu)(false, defaultTexts, 0);\n        }, interval);\n    }\n    if (clickObject !== \"exit\" && clickObject !== \"reset\" && clickObject !== \"center\" && clickObject !== \"loadCustom\") {\n        if (clickObject !== null) {\n            sfx_js_1.sounds.blunthit.play();\n            setTimeout(() => {\n                (0, custom_js_1.setCustomGamepadInfo)(j, gamepadInfo);\n                calibrationLoop(i, j, gamepadInfo, snapshots, interval);\n            }, totalInterval);\n        }\n        else {\n            setTimeout(() => {\n                calibrationLoop(i, j, gamepadInfo, snapshots, interval);\n            }, totalInterval);\n        }\n    }\n    if (clickObject !== null && clickObject !== \"saveCustom\" && clickObject !== \"loadCustom\"\n        && clickObject !== \"center\" && clickObject !== \"icon\" && clickObject !== \"exit\" && clickObject !== \"reset\") {\n        (0, controllermenu_js_1.setCustomInUse)(null);\n    }\n    if (clickObject !== null) {\n        clickObject = null;\n    }\n}\nfunction scanForButton(buttons0, buttons1, axes0, axes1, onlyPressed = false) {\n    let buttonInfo = null;\n    const bLg = buttons1.length;\n    for (let i = 0; i < bLg; i++) {\n        if (detectedButtonPressed(buttons0[i].pressed, buttons1[i].pressed)) {\n            buttonInfo = { kind: \"pressed\", index: i };\n            break;\n        }\n        else if (!onlyPressed && detectedButtonValue(buttons0[i].value, buttons1[i].value)) {\n            buttonInfo = { kind: \"value\", index: i, threshold: 0.75 };\n            break;\n        }\n    }\n    if (!onlyPressed && buttonInfo === null) {\n        const aLg = axes1.length;\n        for (let j = 0; j < aLg; j++) {\n            if (detectedButtonValue(axes0[j], axes1[j])) {\n                buttonInfo = { kind: \"axis\", index: j, threshold: 0.75 };\n                break;\n            }\n        }\n    }\n    return buttonInfo;\n}\n;\nfunction detectedButtonPressed(pressed0, pressed1) {\n    return pressed1 && !pressed0;\n}\n;\nfunction detectedButtonValue(value0, value1) {\n    return (value0 < 0.25 && value1 > 0.75);\n}\n;\nfunction scanForTrigger(buttons0, buttons1, axes0, axes1) {\n    let minMax;\n    let triggerInfo = null;\n    const aLg = axes1.length;\n    for (let i = 0; i < aLg && triggerInfo === null; i++) {\n        minMax = detectedTrigger(axes0[i], axes1[i]);\n        if (minMax !== null) {\n            triggerInfo = { kind: \"axis\", index: i, min: minMax[0], max: minMax[1] };\n            break;\n        }\n    }\n    if (triggerInfo === null) {\n        const bLg = buttons1.length;\n        for (let j = 0; j < bLg && triggerInfo === null; j++) {\n            minMax = detectedTrigger(buttons0[j].value, buttons1[j].value);\n            if (minMax !== null) {\n                triggerInfo = { kind: \"value\", index: j, min: minMax[0], max: minMax[1] };\n                break;\n            }\n        }\n    }\n    return triggerInfo;\n}\nfunction detectedTrigger(axis0, axis1) {\n    if (Math.abs(axis1 - axis0) < 0.5) {\n        return null;\n    }\n    else {\n        return getMinAndMax(axis0, axis1);\n    }\n}\nfunction getMinAndMax(axis0, axis1) {\n    const min = axis0 < -0.87 ? -1 : axis0 < -0.5 ? -0.866 : axis0 > 0.87 ? 1 : axis0 > 0.5 ? 0.8667 : 0;\n    const max = min === 0 ? Math.sign(axis1) : -min;\n    return [min, max];\n}\nfunction scanForStick(buttons0, buttonsL, buttonsR, buttonsU, buttonsD, axes0, axesL, axesR, axesU, axesD) {\n    let stickInfo = null;\n    let xDiff = 0;\n    let yDiff = 0;\n    let newXDiff = 0;\n    let newYDiff = 0;\n    let xIndex;\n    let yIndex;\n    let kind;\n    let cardinals = null;\n    const aLg = axes0.length;\n    kind = \"axes\";\n    for (let i = 0; i < aLg; i++) {\n        newXDiff = axesR[i] - axesL[i];\n        if (Math.abs(newXDiff) > Math.abs(xDiff)) {\n            xDiff = newXDiff;\n            xIndex = i;\n        }\n        newYDiff = axesU[i] - axesD[i];\n        if (Math.abs(newYDiff) > Math.abs(yDiff)) {\n            yDiff = newYDiff;\n            yIndex = i;\n        }\n    }\n    if (xIndex !== undefined && yIndex !== undefined && Math.abs(xDiff) > 0.5 && Math.abs(yDiff) > 0.5) {\n        cardinals = {\n            center: new Vec2D_js_1.Vec2D(axes0[xIndex], axes0[yIndex]),\n            left: axesL[xIndex],\n            right: axesR[xIndex],\n            up: axesU[yIndex],\n            down: axesD[yIndex]\n        };\n    }\n    if (Math.abs(xDiff) < 0.5 || Math.abs(yDiff) < 0.5) {\n        const bLg = buttons0.length;\n        kind = \"value\";\n        for (let j = 0; j < bLg; j++) {\n            newXDiff = buttonsR[j].value - buttonsL[j].value;\n            if (Math.abs(newXDiff) > Math.abs(xDiff)) {\n                xDiff = newXDiff;\n                xIndex = j;\n            }\n            newYDiff = buttonsU[j].value - buttonsD[j].value;\n            if (Math.abs(newYDiff) > Math.abs(yDiff)) {\n                yDiff = newYDiff;\n                yIndex = j;\n            }\n        }\n        if (xIndex !== undefined && yIndex !== undefined && Math.abs(xDiff) > 0.5 && Math.abs(yDiff) > 0.5) {\n            cardinals = {\n                center: new Vec2D_js_1.Vec2D(buttons0[xIndex].value, buttons0[yIndex].value),\n                left: buttonsL[xIndex].value,\n                right: buttonsR[xIndex].value,\n                up: buttonsU[yIndex].value,\n                down: buttonsD[yIndex].value\n            };\n        }\n    }\n    if (xIndex !== undefined && yIndex !== undefined) {\n        if (kind === \"axes\") {\n            stickInfo = { kind: \"axes\", xIndex: xIndex, yIndex: yIndex, cardinals: cardinals };\n        }\n        else {\n            stickInfo = { kind: \"value\", xIndex: xIndex, yIndex: yIndex, cardinals: cardinals };\n        }\n    }\n    return stickInfo;\n}\nfunction scanForDPad(buttons0, buttonsL, buttonsR, buttonsU, buttonsD, axes0, axesL, axesR, axesU, axesD) {\n    let dPadInfo = null;\n    const bLg = buttons0.length;\n    let lIndex;\n    let rIndex;\n    let uIndex;\n    let dIndex;\n    for (let i = 0; i < bLg; i++) {\n        if (lIndex === undefined && detectedButtonPressed(buttons0[i].pressed, buttonsL[i].pressed)) {\n            lIndex = i;\n        }\n        if (rIndex === undefined && detectedButtonPressed(buttons0[i].pressed, buttonsR[i].pressed)) {\n            rIndex = i;\n        }\n        if (uIndex === undefined && detectedButtonPressed(buttons0[i].pressed, buttonsU[i].pressed)) {\n            uIndex = i;\n        }\n        if (dIndex === undefined && detectedButtonPressed(buttons0[i].pressed, buttonsD[i].pressed)) {\n            dIndex = i;\n        }\n    }\n    if (lIndex !== undefined && rIndex !== undefined && uIndex !== undefined && dIndex !== undefined) {\n        dPadInfo = {\n            kind: \"buttons\",\n            upIndex: uIndex, downIndex: dIndex,\n            leftIndex: lIndex, rightIndex: rIndex\n        };\n    }\n    else {\n        let xDiff = 0;\n        let yDiff = 0;\n        let newXDiff = 0;\n        let newYDiff = 0;\n        let xIndex;\n        let yIndex;\n        const aLg = axes0.length;\n        for (let i = 0; i < aLg; i++) {\n            newXDiff = axesR[i] - axesL[i];\n            if (Math.abs(newXDiff) > Math.abs(xDiff)) {\n                xDiff = newXDiff;\n                xIndex = i;\n            }\n            newYDiff = axesU[i] - axesD[i];\n            if (Math.abs(newYDiff) > Math.abs(yDiff)) {\n                yDiff = newYDiff;\n                yIndex = i;\n            }\n        }\n        if (xIndex !== undefined && yIndex !== undefined) {\n            if (Math.abs(xDiff) > 0.5 && Math.abs(yDiff) > 0.5 && xIndex !== yIndex) {\n                dPadInfo = {\n                    kind: \"2axes\",\n                    xIndex: xIndex, yIndex: yIndex,\n                    xFlip: (xDiff < 0), yFlip: (yDiff < 0)\n                };\n            }\n            else { // lol\n                dPadInfo = { kind: \"axis\", index: xIndex };\n            }\n        }\n    }\n    return dPadInfo;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/input/gamepad/gamepadCalibration.ts\n");

/***/ }),

/***/ "./src/input/input.ts":
/*!****************************!*\
  !*** ./src/input/input.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*eslint indent:0*/\n// @flow\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.keyboardMap = exports.aiInputBank = exports.aiPlayer4 = exports.aiPlayer3 = exports.aiPlayer2 = exports.aiPlayer1 = exports.nullInputs = exports.nullInput = void 0;\nexports.inputData = inputData;\nexports.pollInputs = pollInputs;\nexports.showButton = showButton;\nexports.setCustomCenters = setCustomCenters;\nconst Vec2D_1 = __webpack_require__(/*! ../main/util/Vec2D */ \"./src/main/util/Vec2D.ts\");\nconst settings_1 = __webpack_require__(/*! ../settings */ \"./src/settings.ts\");\nconst main_1 = __webpack_require__(/*! ../main/main */ \"./src/main/main.ts\");\nconst retrieveGamepadInputs_1 = __webpack_require__(/*! ./gamepad/retrieveGamepadInputs */ \"./src/input/gamepad/retrieveGamepadInputs.ts\");\nconst meleeInputs_1 = __webpack_require__(/*! ./meleeInputs */ \"./src/input/meleeInputs.ts\");\nconst jquery_1 = __importDefault(__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"));\nconst replay_1 = __webpack_require__(/*! ../main/replay */ \"./src/main/replay.ts\");\nconst streamclient_1 = __webpack_require__(/*! ../main/multiplayer/streamclient */ \"./src/main/multiplayer/streamclient.js\");\nfunction inputData(list = [false, false, false, false, false, false, false, false, false, false, false, false, 0, 0, 0, 0, 0, 0]) {\n    return {\n        a: list[0],\n        b: list[1],\n        x: list[2],\n        y: list[3],\n        z: list[4],\n        r: list[5],\n        l: list[6],\n        s: list[7],\n        du: list[8],\n        dr: list[9],\n        dd: list[10],\n        dl: list[11],\n        lsX: (0, meleeInputs_1.deaden)(list[12]),\n        lsY: (0, meleeInputs_1.deaden)(list[13]),\n        csX: (0, meleeInputs_1.deaden)(list[14]),\n        csY: (0, meleeInputs_1.deaden)(list[15]),\n        lA: list[16],\n        rA: list[17],\n        rawX: list[12],\n        rawY: list[13],\n        rawcsX: list[14],\n        rawcsY: list[15]\n    };\n}\n;\nconst nullInput = () => inputData();\nexports.nullInput = nullInput;\nconst nullInputs = () => [inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData()\n];\nexports.nullInputs = nullInputs;\nexports.aiPlayer1 = [inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData()\n];\nexports.aiPlayer2 = [inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData()\n];\nexports.aiPlayer3 = [inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData()\n];\nexports.aiPlayer4 = [inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData(),\n    inputData()\n];\nexports.aiInputBank = [exports.aiPlayer1, exports.aiPlayer2, exports.aiPlayer3, exports.aiPlayer4];\n// should be able to move out the \"frameByFrame\" aspect of the following function\n// it is only used to make z button mean \"left trigger value = 0.35\" + \"A = true\".\nfunction pollInputs(gameMode, frameByFrame, controllerInfo, playerSlot, controllerIndex, keys, playertype) {\n    // input is the input for player i in the current frame\n    let input = (0, exports.nullInput)(); // initialise with default values\n    if (replay_1.replayActive) {\n        input = pollReplayInputs(gameMode, controllerInfo, playerSlot, controllerIndex, frameByFrame);\n    }\n    else if (playertype === 1 && gameMode === 3) {\n        return exports.aiInputBank[playerSlot][0];\n    }\n    else if (controllerInfo === \"keyboard\") { // keyboard controls\n        input = pollKeyboardInputs(gameMode, frameByFrame, keys);\n        // } else if (playertype === 2 || controllerInfo === 99) { // np: online play?\n        //   input = pollNetworkInputs(gameMode, controllerInfo, playerSlot, controllerIndex, frameByFrame);\n    }\n    else if (playertype === 0) {\n        input = pollGamepadInputs(gameMode, controllerInfo, playerSlot, controllerIndex, frameByFrame);\n    }\n    return input;\n}\nfunction pollNetworkInputs(gameMode, controllerType, playerSlot, controllerIndex, frameByFrame) {\n    return (0, streamclient_1.retrieveNetworkInputs)(playerSlot, controllerIndex);\n}\nfunction pollReplayInputs(gameMode, controllerType, playerSlot, controllerIndex, frameByFrame) {\n    return (0, replay_1.retrieveReplayInputs)(playerSlot, controllerIndex);\n}\nfunction pollKeyboardInputs(gameMode, frameByFrame, keys) {\n    const input = (0, exports.nullInput)(); // initialise with default values\n    let stickR = 1;\n    let stickL = 1;\n    let stickU = 1;\n    let stickD = 1;\n    if (gameMode === 3 || gameMode === 5) {\n        stickR = settings_1.keyMap.lstick.ranges[1];\n        stickL = settings_1.keyMap.lstick.ranges[2];\n        stickU = settings_1.keyMap.lstick.ranges[0];\n        stickD = settings_1.keyMap.lstick.ranges[3];\n    }\n    let lstickX = (keys[settings_1.keyMap.lstick.right[0]] || keys[settings_1.keyMap.lstick.right[1]]) ? ((keys[settings_1.keyMap.lstick.left[0]] ||\n        keys[settings_1.keyMap.lstick.left[1]]) ? 0 : stickR) : ((keys[settings_1.keyMap.lstick.left[0]] || keys[settings_1.keyMap.lstick.left[1]]) ?\n        -stickL : 0);\n    let lstickY = (keys[settings_1.keyMap.lstick.up[0]] || keys[settings_1.keyMap.lstick.up[1]]) ? ((keys[settings_1.keyMap.lstick.down[0]] || keys[settings_1.keyMap.lstick.down[1]]) ? 0 : stickU) : ((keys[settings_1.keyMap.lstick.down[0]] || keys[settings_1.keyMap.lstick.down[1]]) ? -stickD : 0);\n    let lAnalog = (keys[settings_1.keyMap.shoulders.lAnalog[0]] || keys[settings_1.keyMap.shoulders.lAnalog[1]]) ? settings_1.keyMap.shoulders.ranges[0] : 0;\n    let rAnalog = (keys[settings_1.keyMap.shoulders.rAnalog[0]] || keys[settings_1.keyMap.shoulders.rAnalog[1]]) ? settings_1.keyMap.shoulders.ranges[1] : 0;\n    if (gameMode === 3 || gameMode === 5) {\n        for (let j = 0; j < 5; j++) {\n            if (keys[settings_1.keyMap.lstick.modifiers[j][0]]) {\n                lstickX *= settings_1.keyMap.lstick.modifiers[j][1];\n                lstickY *= settings_1.keyMap.lstick.modifiers[j][2];\n            }\n            if (keys[settings_1.keyMap.shoulders.modifiers[j][0]]) {\n                lAnalog *= settings_1.keyMap.shoulders.modifiers[j][1];\n                rAnalog *= settings_1.keyMap.shoulders.modifiers[j][2];\n            }\n        }\n    }\n    lstickX = Math.sign(lstickX) * Math.min(1, Math.abs(lstickX));\n    lstickY = Math.sign(lstickY) * Math.min(1, Math.abs(lstickY));\n    lAnalog = Math.min(1, Math.abs(lAnalog));\n    rAnalog = Math.min(1, Math.abs(rAnalog));\n    const cstickX = (keys[settings_1.keyMap.cstick.right[0]] || keys[settings_1.keyMap.cstick.right[1]]) ? ((keys[settings_1.keyMap.cstick.left[0]] ||\n        keys[settings_1.keyMap.cstick.left[1]]) ? 0 : 1) : ((keys[settings_1.keyMap.cstick.left[0]] || keys[settings_1.keyMap.cstick.left[1]]) ? -1 :\n        0);\n    const cstickY = (keys[settings_1.keyMap.cstick.up[0]] || keys[settings_1.keyMap.cstick.up[1]]) ? ((keys[settings_1.keyMap.cstick.down[0]] || keys[settings_1.keyMap.cstick.down[1]]) ? 0 : 1) : ((keys[settings_1.keyMap.cstick.down[0]] || keys[settings_1.keyMap.cstick.down[1]]) ? -1 : 0);\n    const rescaledLStick = (0, meleeInputs_1.tasRescale)(lstickX, lstickY, true);\n    input.lsX = (0, meleeInputs_1.deaden)(rescaledLStick[0]);\n    input.lsY = (0, meleeInputs_1.deaden)(rescaledLStick[1]);\n    input.rawX = rescaledLStick[0];\n    input.rawY = rescaledLStick[1];\n    const rescaledCStick = (0, meleeInputs_1.tasRescale)(cstickX, cstickY, true);\n    input.csX = (0, meleeInputs_1.deaden)(rescaledCStick[0]);\n    input.csY = (0, meleeInputs_1.deaden)(rescaledCStick[1]);\n    input.rawcsX = rescaledCStick[0];\n    input.rawcsY = rescaledCStick[1];\n    input.lA = lAnalog;\n    input.rA = rAnalog;\n    input.s = keys[settings_1.keyMap.s[0]] || keys[settings_1.keyMap.s[1]];\n    input.x = keys[settings_1.keyMap.x[0]] || keys[settings_1.keyMap.x[1]];\n    input.a = keys[settings_1.keyMap.a[0]] || keys[settings_1.keyMap.a[1]];\n    input.b = keys[settings_1.keyMap.b[0]] || keys[settings_1.keyMap.b[1]];\n    input.y = keys[settings_1.keyMap.y[0]] || keys[settings_1.keyMap.y[1]];\n    input.r = keys[settings_1.keyMap.r[0]] || keys[settings_1.keyMap.r[1]];\n    input.l = keys[settings_1.keyMap.l[0]] || keys[settings_1.keyMap.l[1]];\n    input.z = keys[settings_1.keyMap.z[0]] || keys[settings_1.keyMap.z[1]];\n    input.dl = keys[settings_1.keyMap.dl[0]];\n    input.dd = keys[settings_1.keyMap.dd[0]];\n    input.dr = keys[settings_1.keyMap.dr[0]];\n    input.du = keys[settings_1.keyMap.du[0]];\n    if (!frameByFrame && gameMode !== 4 && gameMode !== 14) { // not in target builder, calibration screen, or frame by frame mode\n        if (input.z) {\n            if (input.lA < 0.35) {\n                input.lA = 0.35;\n            }\n            input.a = true;\n        }\n    }\n    if (input.l) {\n        input.lA = 1;\n    }\n    if (input.r) {\n        input.rA = 1;\n    }\n    return input;\n}\nfunction pollGamepadInputs(gameMode, gamepadInfo, playerSlot, controllerIndex, frameByFrame) {\n    const input = (0, exports.nullInput)();\n    if (navigator.getGamepads === undefined) {\n        return input;\n    }\n    const gamepads = navigator.getGamepads();\n    const gamepad = gamepads[controllerIndex];\n    if (gamepad === null || gamepad === undefined) {\n        return input;\n    }\n    // -------------------------------------------------------\n    // analog sticks\n    const fixedGamepad = gamepad;\n    // {\n    //   buttons: gamepad.buttons as GamepadButton[],\n    //   axes: gamepad.axes as number[],\n    //   id: gamepad.id\n    // };\n    const lsVec = (0, retrieveGamepadInputs_1.stickValue)(fixedGamepad, gamepadInfo, \"ls\");\n    const csVec = (0, retrieveGamepadInputs_1.stickValue)(fixedGamepad, gamepadInfo, \"cs\");\n    const isGC = gamepadInfo.isGC;\n    let lsCardinals = null;\n    if (gamepadInfo.ls !== null) {\n        lsCardinals = gamepadInfo.ls.cardinals;\n    }\n    let csCardinals = null;\n    if (gamepadInfo.cs !== null) {\n        csCardinals = gamepadInfo.cs.cardinals;\n    }\n    const lsticks = (0, meleeInputs_1.scaleToMeleeAxes)(lsVec.x // x-axis data\n    , lsVec.y // y-axis data\n    , isGC, lsCardinals, custcent[playerSlot].ls.x // x-axis \"custom center\" offset\n    , custcent[playerSlot].ls.y // y-axis \"custom center\" offset\n    );\n    const csticks = (0, meleeInputs_1.scaleToMeleeAxes)(csVec.x, csVec.y, isGC, csCardinals, custcent[playerSlot].cs.x, custcent[playerSlot].cs.y);\n    input.lsX = (0, meleeInputs_1.deaden)(lsticks[0]);\n    input.lsY = (0, meleeInputs_1.deaden)(lsticks[1]);\n    input.csX = (0, meleeInputs_1.deaden)(csticks[0]);\n    input.csY = (0, meleeInputs_1.deaden)(csticks[1]);\n    input.rawX = lsticks[0];\n    input.rawY = lsticks[1];\n    input.rawcsX = csticks[0];\n    input.rawcsY = csticks[1];\n    // -------------------------------------------------------\n    // buttons\n    input.s = (0, retrieveGamepadInputs_1.buttonState)(fixedGamepad, gamepadInfo, \"s\");\n    input.x = (0, retrieveGamepadInputs_1.buttonState)(fixedGamepad, gamepadInfo, \"x\");\n    input.a = (0, retrieveGamepadInputs_1.buttonState)(fixedGamepad, gamepadInfo, \"a\");\n    input.b = (0, retrieveGamepadInputs_1.buttonState)(fixedGamepad, gamepadInfo, \"b\");\n    input.y = (0, retrieveGamepadInputs_1.buttonState)(fixedGamepad, gamepadInfo, \"y\");\n    input.z = (0, retrieveGamepadInputs_1.buttonState)(fixedGamepad, gamepadInfo, \"z\");\n    // -------------------------------------------------------\n    // triggers\n    input.l = (0, retrieveGamepadInputs_1.buttonState)(fixedGamepad, gamepadInfo, \"l\");\n    input.r = (0, retrieveGamepadInputs_1.buttonState)(fixedGamepad, gamepadInfo, \"r\");\n    if (gamepadInfo.lA !== null) {\n        const lA = gamepadInfo.lA;\n        if (lA.kind === \"light\") {\n            input.lA = (0, retrieveGamepadInputs_1.triggerValue)(fixedGamepad, gamepadInfo, \"lA\");\n        }\n        else {\n            input.lA = (0, meleeInputs_1.scaleToGCTrigger)((0, retrieveGamepadInputs_1.triggerValue)(fixedGamepad, gamepadInfo, \"lA\") // raw trigger value\n            , -lA.min - custcent[playerSlot].l // offset\n            , lA.max - lA.min // scaling\n            );\n        }\n    }\n    if (gamepadInfo.rA !== null) {\n        const rA = gamepadInfo.rA;\n        if (rA.kind === \"light\") {\n            input.rA = (0, retrieveGamepadInputs_1.triggerValue)(fixedGamepad, gamepadInfo, \"rA\");\n        }\n        else {\n            input.rA = (0, meleeInputs_1.scaleToGCTrigger)((0, retrieveGamepadInputs_1.triggerValue)(fixedGamepad, gamepadInfo, \"rA\") // raw trigger value\n            , -rA.min - custcent[playerSlot].r // offset\n            , rA.max - rA.min // scaling\n            );\n        }\n    }\n    if (main_1.controllerResetCountdowns[playerSlot] === 0) {\n        setCustomCenters(playerSlot, lsVec, csVec, input.lA, input.rA);\n    }\n    if (!frameByFrame && gameMode !== 4 && gameMode !== 14) { // not in target builder or calibration screen\n        if (input.z) {\n            if (input.lA < 0.35) {\n                input.lA = 0.35;\n            }\n            input.a = true;\n        }\n    }\n    if (gameMode !== 14) {\n        if (input.l) {\n            input.lA = 1;\n        }\n        if (input.r) {\n            input.rA = 1;\n        }\n        if (input.lA > 0.95) {\n            input.l = true;\n        }\n        if (input.rA > 0.95) {\n            input.r = true;\n        }\n    }\n    // -------------------------------------------------------\n    // d-pad\n    const dPadData = (0, retrieveGamepadInputs_1.dPadState)(fixedGamepad, gamepadInfo);\n    input.dl = dPadData.left;\n    input.dd = dPadData.down;\n    input.dr = dPadData.right;\n    input.du = dPadData.up;\n    return input;\n}\n;\nfunction showButton(i, but, booleanean) {\n    if (boolean) {\n        (0, jquery_1.default)(\"#\" + i + \"button\" + but).show();\n    }\n    else {\n        (0, jquery_1.default)(\"#\" + i + \"button\" + but).hide();\n    }\n}\n;\nexports.keyboardMap = [\n    [102, 186],\n    [101, 76],\n    [100, 75],\n    [104, 79],\n    [103, 73],\n    [105, 80],\n    [107, 192, 222],\n    [109, 219], 71, 78, 66, 86\n];\nconst customCenters = function () {\n    this.ls = new Vec2D_1.Vec2D(0, 0);\n    this.cs = new Vec2D_1.Vec2D(0, 0);\n    this.l = 0;\n    this.r = 0;\n};\nconst custcent = [new customCenters, new customCenters, new customCenters, new customCenters];\nfunction setCustomCenters(i, ls0, cs0, l0, r0) {\n    custcent[i].ls = ls0;\n    custcent[i].cs = cs0;\n    custcent[i].l = l0;\n    custcent[i].r = r0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/input/input.ts\n");

/***/ }),

/***/ "./src/main/main.ts":
/*!**************************!*\
  !*** ./src/main/main.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.blastzone = exports.stageSelect = exports.respawnPoints = exports.edgeOrientation = exports.edgeOffset = exports.edges = exports.wallsR = exports.wallsL = exports.platforms = exports.ground = exports.startingFace = exports.startingPoint = exports.frameAdvance = exports.pause = exports.colours = exports.costumeTimeout = exports.pPal = exports.tagText = exports.hasTag = exports.palettes = exports.randomTags = exports.versusMode = exports.gameMode = exports.showDebug = exports.findingPlayers = exports.frameByFrameRender = exports.wasFrameByFrame = exports.frameByFrame = exports.playing = exports.activePorts = exports.ports = exports.cpuDifficulty = exports.playerType = exports.playerAmount = exports.currentPlayers = exports.mType = exports.firstTimeDetected = exports.usingCustomControls = exports.controllerResetCountdowns = exports.gameEnd = exports.calibrationPlayer = exports.creditsPlayer = exports.shine = exports.characterSelections = exports.framerate = exports.gamelogicTime = exports.renderTime = exports.player = exports.snowCount = exports.holiday = void 0;\nexports.layerSwitches = exports.layers = exports.canvasMain = exports.c = exports.ui = exports.fg2 = exports.fg1 = exports.bg2 = exports.bg1 = exports.keyBinding = exports.keyBind = exports.keys = exports.usingLocalStorage = exports.matchTimer = exports.startTimer = exports.starting = void 0;\nexports.setControllerReset = setControllerReset;\nexports.setUsingCustomControls = setUsingCustomControls;\nexports.setMtype = setMtype;\nexports.setCurrentPlayer = setCurrentPlayer;\nexports.setTagText = setTagText;\nexports.setStageSelect = setStageSelect;\nexports.setStarting = setStarting;\nexports.setStartTimer = setStartTimer;\nexports.getStartTimer = getStartTimer;\nexports.addMatchTimer = addMatchTimer;\nexports.setMatchTimer = setMatchTimer;\nexports.getMatchTimer = getMatchTimer;\nexports.setCookie = setCookie;\nexports.setVersusMode = setVersusMode;\nexports.getCookie = getCookie;\nexports.setKeyBinding = setKeyBinding;\nexports.overrideKeyboardEvent = overrideKeyboardEvent;\nexports.disabledEventPropagation = disabledEventPropagation;\nexports.SVG = SVG;\nexports.matchTimerTick = matchTimerTick;\nexports.screenShake = screenShake;\nexports.percentShake = percentShake;\nexports.findPlayers = findPlayers;\nexports.setPlayerType = setPlayerType;\nexports.addPlayer = addPlayer;\nexports.togglePort = togglePort;\nexports.positionPlayersInCSS = positionPlayersInCSS;\nexports.changeGamemode = changeGamemode;\nexports.interpretInputs = interpretInputs;\nexports.renderToMain = renderToMain;\nexports.update = update;\nexports.gameTick = gameTick;\nexports.clearScreen = clearScreen;\nexports.renderTick = renderTick;\nexports.buildPlayerObject = buildPlayerObject;\nexports.initializePlayers = initializePlayers;\nexports.startGame = startGame;\nexports.endGame = endGame;\nexports.finishGame = finishGame;\nexports.start = start;\nexports.customDeadzone = customDeadzone;\nexports.addShine = addShine;\nexports.setShine = setShine;\nexports.setFindingPlayers = setFindingPlayers;\nexports.setPlaying = setPlaying;\nexports.setCreditsPlayer = setCreditsPlayer;\nexports.setCalibrationPlayer = setCalibrationPlayer;\nexports.cacheDom = cacheDom;\nexports.setCS = setCS;\n/* eslint-disable */\nconst css_1 = __webpack_require__(/*! ../menus/css */ \"./src/menus/css.ts\");\nconst player_1 = __webpack_require__(/*! ../main/player */ \"./src/main/player.ts\");\nconst settings_1 = __webpack_require__(/*! ../settings */ \"./src/settings.ts\");\nconst startup_1 = __webpack_require__(/*! ../menus/startup */ \"./src/menus/startup.ts\");\nconst menu_1 = __webpack_require__(/*! ../menus/menu */ \"./src/menus/menu.ts\");\nconst sfx_1 = __webpack_require__(/*! ../main/sfx */ \"./src/main/sfx.ts\");\nconst startscreen_1 = __webpack_require__(/*! ../menus/startscreen */ \"./src/menus/startscreen.ts\");\nconst stagerender_1 = __webpack_require__(/*! ../stages/stagerender */ \"./src/stages/stagerender.ts\");\nconst stageselect_1 = __webpack_require__(/*! ../menus/stageselect */ \"./src/menus/stageselect.ts\");\nconst audiomenu_1 = __webpack_require__(/*! ../menus/audiomenu */ \"./src/menus/audiomenu.ts\");\nconst gameplaymenu_1 = __webpack_require__(/*! ../menus/gameplaymenu */ \"./src/menus/gameplaymenu.ts\");\nconst keyboardmenu_1 = __webpack_require__(/*! ../menus/keyboardmenu */ \"./src/menus/keyboardmenu.ts\");\nconst controllermenu_1 = __webpack_require__(/*! ../menus/controllermenu */ \"./src/menus/controllermenu.ts\");\nconst credits_1 = __webpack_require__(/*! ../menus/credits */ \"./src/menus/credits.ts\");\nconst render_1 = __webpack_require__(/*! ../main/render */ \"./src/main/render.ts\");\nconst actionStateShortcuts_1 = __webpack_require__(/*! ../physics/actionStateShortcuts */ \"./src/physics/actionStateShortcuts.ts\");\nconst hitDetection_1 = __webpack_require__(/*! ../physics/hitDetection */ \"./src/physics/hitDetection.ts\");\nconst article_1 = __webpack_require__(/*! ../physics/article */ \"./src/physics/article.ts\");\nconst ai_1 = __webpack_require__(/*! ../main/ai */ \"./src/main/ai.ts\");\nconst physics_1 = __webpack_require__(/*! ../physics/physics */ \"./src/physics/physics.ts\");\nconst jquery_1 = __importDefault(__webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\"));\nconst transparency_1 = __webpack_require__(/*! ../main/vfx/transparency */ \"./src/main/vfx/transparency.js\");\nconst drawVfx_1 = __webpack_require__(/*! ../main/vfx/drawVfx */ \"./src/main/vfx/drawVfx.js\");\nconst vfxQueue_1 = __webpack_require__(/*! ../main/vfx/vfxQueue */ \"./src/main/vfx/vfxQueue.js\");\nconst activeStage_1 = __webpack_require__(/*! ../stages/activeStage */ \"./src/stages/activeStage.ts\");\nconst music_1 = __webpack_require__(/*! ./music */ \"./src/main/music.ts\");\nconst vfx_1 = __webpack_require__(/*! ../main/vfx */ \"./src/main/vfx.ts\");\nconst renderVfx_1 = __webpack_require__(/*! ./vfx/renderVfx */ \"./src/main/vfx/renderVfx.js\");\nconst Box2D_1 = __webpack_require__(/*! ./util/Box2D */ \"./src/main/util/Box2D.ts\");\nconst Vec2D_1 = __webpack_require__(/*! ./util/Vec2D */ \"./src/main/util/Vec2D.ts\");\nconst streamclient_1 = __webpack_require__(/*! ./multiplayer/streamclient */ \"./src/main/multiplayer/streamclient.js\");\nconst replay_1 = __webpack_require__(/*! ./replay */ \"./src/main/replay.ts\");\nconst input_1 = __webpack_require__(/*! ../input/input */ \"./src/input/input.ts\");\nconst meleeInputs_1 = __webpack_require__(/*! ../input/meleeInputs */ \"./src/input/meleeInputs.ts\");\nconst findGamepadInfo_1 = __webpack_require__(/*! ../input/gamepad/findGamepadInfo */ \"./src/input/gamepad/findGamepadInfo.ts\");\nconst custom_1 = __webpack_require__(/*! ../input/gamepad/gamepads/custom */ \"./src/input/gamepad/gamepads/custom.js\");\nconst retrieveGamepadInputs_1 = __webpack_require__(/*! ../input/gamepad/retrieveGamepadInputs */ \"./src/input/gamepad/retrieveGamepadInputs.ts\");\nconst drawGamepad_1 = __webpack_require__(/*! ../input/gamepad/drawGamepad */ \"./src/input/gamepad/drawGamepad.ts\");\nconst deepCopyObject_1 = __webpack_require__(/*! ./util/deepCopyObject */ \"./src/main/util/deepCopyObject.ts\");\nconst css_2 = __webpack_require__(/*! ../menus/css */ \"./src/menus/css.ts\");\n/*globals performance*/\nexports.holiday = 0;\nexports.snowCount = 150;\n//todo find 'Player' object\nexports.player = [0, 0, 0, 0];\nexports.renderTime = [10, 0, 100, 0];\nexports.gamelogicTime = [5, 0, 100, 0];\nexports.framerate = [0, 0, 0];\nexports.characterSelections = [0, 0, 0, 0];\nexports.shine = 0.5;\nexports.creditsPlayer = 0;\nexports.calibrationPlayer = 0;\nexports.gameEnd = false;\nexports.controllerResetCountdowns = [0, 0, 0, 0];\nfunction setControllerReset(i) {\n    exports.controllerResetCountdowns[i] = 0;\n}\nlet keyboardOccupied = false;\nexports.usingCustomControls = [false, false, false, false];\nfunction setUsingCustomControls(i, boolean, info) {\n    exports.usingCustomControls[i] = boolean;\n    if (bool) {\n        exports.mType[i] = custom_1.customGamepadInfo[exports.currentPlayers[i]];\n    }\n    else {\n        exports.mType[i] = info;\n    }\n}\nexports.firstTimeDetected = [true, true, true, true];\nwindow.mType = [null, null, null, null];\nexports.mType = [null, null, null, null];\nfunction setMtype(index, val) {\n    exports.mType[index] = val;\n}\nexports.currentPlayers = [];\nfunction setCurrentPlayer(index, val) {\n    exports.currentPlayers[index] = val;\n}\nexports.playerAmount = 0;\nexports.playerType = [-1, -1, -1, -1];\nexports.cpuDifficulty = [3, 3, 3, 3];\nexports.ports = 0;\nexports.activePorts = [];\nexports.playing = false;\nexports.frameByFrame = false;\nexports.wasFrameByFrame = false;\nexports.frameByFrameRender = false;\nexports.findingPlayers = true;\nexports.showDebug = false;\nexports.gameMode = 20;\n// 20:Startup\n// 13:Data Menu\n// 12:Keyboard Controls\n// 11:Gameplay Menu\n// 10:Sound Menu\n// 9: -\n// 8: -\n// 7:Target Select\n// 6:Stage Select (VS)\n// 5:Target Playing\n// 4:Target Builder\n// 3:Playing (VS)\n// 2:CSS\n// 1:Main Menu\n// 0:Title Screen\nexports.versusMode = 0;\nexports.randomTags = [\"NEO!\", \"SELF\", \"NOVA\", \"PNDA\", \"Panda\", \"LFFN\", \"Scorp\", \"AZ\", \"AXE\", \"Tempo\", \"TMPO\", \"[A]rmada\", \"WBALLZ\", \"Westballz\", \"PPMD\", \"Kreygasm\", \"M2K\", \"Mang0\", \"USA\", \"SCAR\", \"TOPH\", \"(.Y.)\", \"HBOX\", \"HungryBox\", \"PLUP\", \"Shroomed\", \"SFAT\", \"Wizz\", \"Lucky\", \"S2J\", \"SilentWolf\", \"aMSa\", \"S2J\", \"Hax$\"];\nexports.palettes = [[\"rgb(250, 89, 89)\", \"rgb(255, 170, 170)\", \"rgba(255, 206, 111, \", \"rgb(244, 68, 68)\", \"rgba(255, 225, 167, \"],\n    [\"rgb(95, 216, 84)\", \"rgb(184, 253, 154)\", \"rgba(252, 95, 95, \", \"rgb(255, 182, 96)\", \"rgba(254, 141, 141, \"],\n    [\"rgb(5, 195, 255)\", \"rgb(121, 223, 255)\", \"rgba(218, 96, 254, \", \"rgb(231, 134, 255)\", \"rgba(230, 144, 255, \"],\n    [\"rgb(255, 187, 70)\", \"rgb(248, 255, 122)\", \"rgba(80, 182, 255, \", \"rgb(255, 142, 70)\", \"rgba(139, 203, 249, \"],\n    [\"rgb(177, 89, 255)\", \"rgb(203, 144, 255)\", \"rgba(144, 255, 110, \", \"rgb(247, 126, 250)\", \"rgba(190, 255, 170, \"],\n    [\"rgb(182, 131, 70)\", \"rgb(252, 194, 126)\", \"rgba(47, 186, 123, \", \"rgb(255, 112, 66)\", \"rgba(111, 214, 168, \"],\n    [\"rgb(232, 232, 208)\", \"rgb(255, 255, 255)\", \"rgba(244, 255, 112, \", \"rgb(191, 119, 119)\", \"rgba(255, 255, 200, \"]];\nexports.hasTag = [false, false, false, false];\nexports.tagText = [\"\", \"\", \"\", \"\"];\nfunction setTagText(index, value) {\n    exports.tagText[index] = value;\n    exports.hasTag[index] = true;\n}\nexports.pPal = [0, 1, 2, 3];\nexports.costumeTimeout = [];\nexports.colours = [\"rgba(4, 255, 82, 0.62)\", \"rgba(117, 20, 255, 0.63)\", \"rgba(255, 20, 20, 0.63)\", \"rgba(255, 232, 20, 0.63)\"];\nexports.pause = [[true, true], [true, true], [true, true], [true, true]];\nexports.frameAdvance = [[true, true], [true, true], [true, true], [true, true]];\nexports.startingPoint = [[-50, 50], [50, 50], [-25, 5], [25, 5]];\nexports.startingFace = [1, -1, 1, -1];\nexports.ground = [[-68.4, 0], [68.4, 0]];\nexports.platforms = [[[-57.6, 27.2], [-20, 27.2]], [[20, 27.2], [57.6, 27.2]], [[-18.8, 54.4], [18.8, 54.4]]];\nexports.wallsL = [[[-68.4, 0], [-68.4, -108.8]]];\nexports.wallsR = [[[68.4, 0], [68.4, -108.8]]];\nexports.edges = [[[-68.4, 0], [-63.4, 0]], [[68.4, 0], [63.4, 0]]];\n//edgeOffset = [[-71.3,-23.7],[71.3,-23.7]];\nexports.edgeOffset = [[-2.9, -23.7], [2.9, -23.7]];\nexports.edgeOrientation = [1, -1];\nexports.respawnPoints = [[-50, 50, 1], [50, 50, -1], [25, 35, 1], [-25, 35, -1]];\nexports.stageSelect = 0;\nfunction setStageSelect(val) {\n    exports.stageSelect = val;\n}\nexports.blastzone = new Box2D_1.Box2D([-224, 200], [224, -108.8]);\nexports.starting = true;\nfunction setStarting(val) {\n    exports.starting = val;\n}\nexports.startTimer = 1.5;\nfunction setStartTimer(val) {\n    exports.startTimer = val;\n}\nfunction getStartTimer() {\n    return exports.startTimer;\n}\n//matchTimer = 5999.99;\nexports.matchTimer = 480;\nfunction addMatchTimer(val) {\n    exports.matchTimer += val;\n}\nfunction setMatchTimer(val) {\n    exports.matchTimer = val;\n}\nfunction getMatchTimer() {\n    return exports.matchTimer;\n}\nexports.usingLocalStorage = false;\nif (typeof (Storage) !== \"undefined\") {\n    // Code for localStorage/sessionStorage.\n    exports.usingLocalStorage = true;\n    console.log(\"local storage works\");\n}\nelse {\n    // Sorry! No Web Storage support..\n    console.log(\"local storage does not work\");\n}\nfunction setCookie(cname, cvalue, exdays) {\n    var d = new Date();\n    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));\n    var exp = \"expires=\" + d.toUTCString();\n    document.cookie = cname + \"=\" + cvalue + \"; \" + exp;\n    localStorage.setItem(cname, cvalue);\n}\nfunction setVersusMode(val) {\n    exports.versusMode = val;\n}\nfunction getCookie(cname) {\n    if (exports.usingLocalStorage) {\n        return localStorage.getItem(cname);\n    }\n    else {\n        var name = cname + \"=\";\n        var ca = document.cookie.split(';');\n        for (var i = 0; i < ca.length; i++) {\n            var c = ca[i];\n            while (c.charAt(0) == ' ')\n                c = c.substring(1);\n            if (c.indexOf(name) == 0)\n                return c.substring(name.length, c.length);\n        }\n        return \"\";\n    }\n}\nexports.keys = {};\nexports.keyBind = 0;\nexports.keyBinding = false;\nfunction setKeyBinding(val) {\n    exports.keyBinding = val;\n}\nfunction overrideKeyboardEvent(e) {\n    if (!showingCode && css_1.choosingTag == -1 && e.keyCode != 122 && e.keyCode != 116) {\n        switch (e.type) {\n            case \"keydown\":\n                if (!exports.keys[e.keyCode]) {\n                    exports.keys[e.keyCode] = true;\n                    exports.keyBind = e.keyCode;\n                    exports.keyBinding = true;\n                    // do key down stuff here\n                }\n                break;\n            case \"keyup\":\n                delete (exports.keys[e.keyCode]);\n                // do key up stuff here\n                break;\n        }\n        disabledEventPropagation(e);\n        e.preventDefault();\n        return false;\n    }\n    else {\n        if (css_1.choosingTag > -1) {\n            if (e.keyCode == 13) {\n                switch (e.type) {\n                    case \"keydown\":\n                        exports.keys[13] = true;\n                        break;\n                    case \"keyup\":\n                        delete (exports.keys[13]);\n                        break;\n                    default:\n                        break;\n                }\n            }\n        }\n        return true;\n    }\n}\n;\nfunction disabledEventPropagation(e) {\n    if (e) {\n        if (e.stopPropagation) {\n            e.stopPropagation();\n        }\n        else if (event) {\n            event.cancelBubble = true;\n        }\n    }\n}\n;\ndocument.onkeydown = overrideKeyboardEvent;\ndocument.onkeyup = overrideKeyboardEvent;\n/*var keys = [];\nexport const onkeyup (e) {\n  keys[e.keyCode]=false;\n}\nexport const onkeydown (e) {\n  keys[e.keyCode]=true;\n}*/\nfunction SVG(tag) {\n    return document.createElementNS('http://www.w3.org/2000/svg', tag);\n}\n/*if (Gamepad.supported) {\n    console.log(\"gamepad supported\");\n} else {\n    console.log(\"gamepad not supported\");\n}*/\nwindow.addEventListener(\"gamepadconnected\", function (e) {\n    console.log(\"Gamepad connected at index %d: %s. %d buttons, %d axes.\", e.gamepad.index, e.gamepad.id, e.gamepad.buttons.length, e.gamepad.axes.length);\n});\nif (navigator.getGamepads)\n    console.log(navigator.getGamepads());\nfunction matchTimerTick(input) {\n    exports.matchTimer -= 0.016667;\n    if (dom.matchMinutes && dom.matchSeconds) {\n        var sec = (exports.matchTimer % 60).toFixed(2);\n        dom.matchMinutes.innerHTML = Math.floor(exports.matchTimer / 60);\n        dom.matchSeconds.innerHTML = sec.length < 5 ? `0${sec}` : sec;\n    }\n    if (exports.matchTimer <= 0) {\n        finishGame(input);\n    }\n}\nfunction screenShake(kb) {\n    var seed = [Math.random(), Math.random(), Math.random(), Math.random()];\n    exports.fg1.translate(kb * 0.1 * seed[0], kb * 0.1 * seed[1]);\n    setTimeout(function () { exports.fg1.translate(-kb * 0.05 * seed[0], -kb * 0.05 * seed[1]); }, 20);\n    setTimeout(function () { exports.fg1.translate(-kb * 0.05 * seed[0], -kb * 0.05 * seed[1]); exports.fg1.translate(-kb * 0.1 * seed[2], -kb * 0.1 * seed[3]); }, 40);\n    setTimeout(function () { exports.fg1.translate(kb * 0.05 * seed[2], kb * 0.05 * seed[3]); }, 60);\n    setTimeout(function () { exports.fg1.translate(kb * 0.05 * seed[2], kb * 0.05 * seed[3]); }, 80);\n}\nfunction percentShake(kb, i) {\n    exports.player[i].percentShake = new Vec2D_1.Vec2D(kb * 0.1 * Math.random(), kb * 0.1 * Math.random());\n    setTimeout(function () { exports.player[i].percentShake = new Vec2D_1.Vec2D(kb * 0.05 * Math.random(), kb * 0.05 * Math.random()); }, 20);\n    setTimeout(function () { exports.player[i].percentShake = new Vec2D_1.Vec2D(-kb * 0.1 * Math.random(), -kb * 0.1 * Math.random()); }, 40);\n    setTimeout(function () { exports.player[i].percentShake = new Vec2D_1.Vec2D(-kb * 0.05 * Math.random(), -kb * 0.05 * Math.random()); }, 60);\n    setTimeout(function () { exports.player[i].percentShake = new Vec2D_1.Vec2D(0, 0); }, 80);\n}\nfunction findPlayers() {\n    var gps = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);\n    /*if (typeof gps != \"undefined\"){\n      console.log(gps);\n    }*/\n    if (!keyboardOccupied) {\n        if (exports.gameMode < 2 || exports.gameMode == 20) {\n            if (exports.keys[13] || exports.keys[settings_1.keyMap.s[0]] || exports.keys[settings_1.keyMap.s[1]]) {\n                if (exports.ports < 4) {\n                    changeGamemode(1);\n                    (0, jquery_1.default)(\"#keyboardPrompt\").hide();\n                    keyboardOccupied = true;\n                    sfx_1.sounds.menuForward.play();\n                    if (exports.ports == 0) {\n                        music_1.MusicManager.playMenuLoop();\n                    }\n                    addPlayer(exports.ports, \"keyboard\");\n                }\n            }\n        }\n        else {\n            if (exports.keys[settings_1.keyMap.a[0]] || exports.keys[settings_1.keyMap.a[1]]) {\n                if (exports.ports < 4) {\n                    keyboardOccupied = true;\n                    addPlayer(exports.ports, \"keyboard\");\n                }\n            }\n        }\n    }\n    for (var i = 0; i < gps.length; i++) {\n        var gamepad = navigator.getGamepads ? navigator.getGamepads()[i] : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads()[i] : null);\n        if (exports.playerType[i] === 2) {\n            var alreadyIn = false;\n            for (var k = 0; k < exports.ports; k++) {\n                if (exports.currentPlayers[k] === i) {\n                    alreadyIn = true;\n                }\n            }\n            if (!alreadyIn) {\n                if (exports.ports < 4) {\n                    addPlayer(i, 99);\n                }\n            }\n            continue;\n        }\n        var gamepad = navigator.getGamepads ? navigator.getGamepads()[i] : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads()[i] : null);\n        if (typeof gamepad != \"undefined\" && gamepad != null) {\n            var detected = false;\n            var gpdName;\n            var gpdInfo;\n            if (exports.usingCustomControls[i] && custom_1.customGamepadInfo[i] !== null) {\n                gpdName = \"custom controls\";\n                gpdInfo = custom_1.customGamepadInfo[i];\n                detected = true;\n            }\n            else {\n                const maybeNameAndInfo = (0, findGamepadInfo_1.getGamepadNameAndInfo)(gamepad.id);\n                if (maybeNameAndInfo === null) {\n                    console.log(\"Error in 'findPlayers': controller \" + (i + 1) + \" detected but not supported.\");\n                    console.log(\"Try manual calibration of your controller.\");\n                }\n                else {\n                    detected = true;\n                    [gpdName, gpdInfo] = maybeNameAndInfo;\n                }\n            }\n            if (detected) {\n                if (exports.firstTimeDetected[i]) {\n                    console.log(\"Controller \" + (i + 1) + \" is: \" + gpdName + \".\");\n                    exports.firstTimeDetected[i] = false;\n                }\n                if (exports.gameMode < 2 || exports.gameMode == 20) {\n                    if ((0, retrieveGamepadInputs_1.buttonState)(gamepad, gpdInfo, \"s\")) {\n                        var alreadyIn = false;\n                        for (var k = 0; k < exports.ports; k++) {\n                            if (exports.currentPlayers[k] == i) {\n                                alreadyIn = true;\n                            }\n                        }\n                        if (!alreadyIn) {\n                            if (exports.ports < 4) {\n                                changeGamemode(1);\n                                (0, jquery_1.default)(\"#keyboardPrompt\").hide();\n                                sfx_1.sounds.menuForward.play();\n                                if (exports.ports === 0) {\n                                    music_1.MusicManager.playMenuLoop();\n                                }\n                                addPlayer(i, gpdInfo);\n                            }\n                        }\n                    }\n                }\n                else {\n                    if ((0, retrieveGamepadInputs_1.buttonState)(gamepad, gpdInfo, \"a\")) {\n                        var alreadyIn = false;\n                        for (var k = 0; k < exports.ports; k++) {\n                            if (exports.currentPlayers[k] == i) {\n                                alreadyIn = true;\n                            }\n                        }\n                        if (!alreadyIn) {\n                            if (exports.ports < 4) {\n                                addPlayer(i, gpdInfo);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                console.log(\"No controller detected by browser\");\n            }\n        }\n    }\n}\nfunction setPlayerType(playerSlot, type) {\n    exports.playerType[playerSlot] = type;\n}\nfunction addPlayer(i, controllerInfo) {\n    if (controllerInfo === 99) {\n        exports.ports++;\n        exports.currentPlayers[exports.ports - 1] = i;\n        exports.playerType[exports.ports - 1] = 2;\n        exports.mType[exports.ports - 1] = controllerInfo;\n    }\n    else {\n        exports.ports++;\n        exports.currentPlayers[exports.ports - 1] = i;\n        exports.playerType[exports.ports - 1] = 0;\n        exports.mType[exports.ports - 1] = controllerInfo;\n        if (exports.showDebug) {\n            (0, drawGamepad_1.updateGamepadSVGColour)(i, \"gamepadSVG\" + i);\n            document.getElementById(\"gamepadSVG\" + i).style.display = \"\";\n        }\n    }\n}\nfunction togglePort(i) {\n    exports.playerType[i]++;\n    if (exports.playerType[i] == 3) {\n        exports.playerType[i] = -1;\n        if (exports.showDebug) {\n            document.getElementById(\"gamepadSVG\" + i).style.display = \"none\";\n        }\n    }\n    if (exports.playerType[i] == 0 && exports.ports <= i) {\n        exports.playerType[i] = 1;\n        (0, drawGamepad_1.setGamepadSVGColour)(i, \"black\");\n        if (exports.showDebug) {\n            (0, drawGamepad_1.updateGamepadSVGColour)(i, \"gamepadSVG\" + i);\n            document.getElementById(\"gamepadSVG\" + i).style.display = \"\";\n        }\n    }\n}\nfunction positionPlayersInCSS() {\n    for (var i = 0; i < 4; i++) {\n        var x = (-80 + i * 50) * 2 / 3;\n        var y = -30;\n        exports.player[i].phys.pos = new Vec2D_1.Vec2D(x, y);\n        exports.player[i].phys.hurtbox = new Box2D_1.Box2D([-4 + x, 18 + y], [4 + x, y]);\n    }\n}\n// 20:Startup\n// 14:Controller Menu\n// 13:Data Menu\n// 12:Keyboard Controls\n// 11:Gameplay Menu\n// 10:Sound Menu\n// 9: -\n// 8: -\n// 7:Target Select\n// 6:Stage Select (VS)\n// 5:Target Playing\n// 4:Target Builder\n// 3:Playing (VS)\n// 2:CSS\n// 1:Main Menu\n// 0:Title Screen\nfunction changeGamemode(newGamemode) {\n    exports.bg1.fillStyle = \"black\";\n    exports.bg1.fillRect(0, 0, exports.layers.BG1.width, exports.layers.BG1.height);\n    exports.fg1.clearRect(0, 0, exports.layers.FG1.width, exports.layers.FG1.height);\n    exports.gameMode = newGamemode;\n    switch (newGamemode) {\n        // TITLESCREEN\n        case 0:\n            (0, startscreen_1.drawStartScreenInit)();\n            break;\n        // MAIN MENU\n        case 1:\n            (0, jquery_1.default)(\"#logoVid\").remove();\n            (0, menu_1.drawMainMenuInit)();\n            break;\n        // CSS\n        case 2:\n            (0, css_1.drawCSSInit)();\n            break;\n        // Playing (VS)\n        case 3:\n            (0, stagerender_1.drawBackgroundInit)();\n            (0, stagerender_1.drawStageInit)();\n            break;\n        // Target Builder\n        case 4:\n            break;\n        // Target Playing\n        case 5:\n            (0, stagerender_1.drawBackgroundInit)();\n            (0, stagerender_1.drawStageInit)();\n            break;\n        // Stage select (vs)\n        case 6:\n            (0, stageselect_1.drawSSSInit)();\n            break;\n        // Target Select\n        case 7:\n            drawTSSInit();\n            break;\n        // sound menu\n        case 10:\n            (0, audiomenu_1.drawAudioMenuInit)();\n            break;\n        // gameplay menu\n        case 11:\n            (0, gameplaymenu_1.drawGameplayMenuInit)();\n            break;\n        // keyboard menu\n        case 12:\n            (0, keyboardmenu_1.drawKeyboardMenuInit)();\n            break;\n        // credits\n        case 13:\n            (0, credits_1.drawCreditsInit)();\n            break;\n        // Multiplayer Modes\n        case 14:\n            (0, controllermenu_1.drawControllerMenuInit)();\n            break;\n        case 15:\n            (0, css_1.drawCSSInit)();\n            (0, streamclient_1.connectToMPServer)();\n            break;\n        // startup\n        case 20:\n            break;\n        default:\n            break;\n    }\n}\n/*export const addPlayer (i,gType,pType){\n  console.log(i,gType,pType);\n\n  currentPlayers.push(i);\n  if (pType == 0){\n    ports++;\n    mType[ports-1] = gType;\n    playerType[ports-1] = pType;\n\n    costumeTimeout.push(false);\n    pPal.push(ports-1);\n    buildPlayerObject(ports-1);\n    player[playerAmount-1].phys.pos = new Vec2D(-100+25*(playerAmount=1),-40);\n    player[ports-1].phys.face = 1;\n    player[ports-1].actionState = 0;\n    $(\"#currentPlayers\").append('<div class=\"pBoxBox\"><div class=\"playerBox\" id=\"pBox'+(ports-1)+'\" style=\"background-color:'+palettes[pPal[ports-1]][0]+';border:5px solid '+palettes[pPal[ports-1]][2]+'0.8)\"><p>P'+ports+'<br><span class=\"cont\">(Cont. '+i+')</span></p></div><div id=\"pTag'+(ports-1)+'\" class=\"pTag\"><textarea id=\"pTagEdit'+(ports-1)+'\" class=\"pTagEdit\" maxlength=\"10\"></textarea></div></div>');\n  }\n  else {\n    mType[i] = gType;\n\n    costumeTimeout.push(false);\n    pPal.push(i);\n    buildPlayerObject(i);\n    player[playerAmount-1].phys.pos = new Vec2D(-100+25*(playerAmount=1),-40);\n    player[i].phys.face = 1;\n    player[i].actionState = 0;\n    $(\"#currentPlayers\").append('<div class=\"pBoxBox\"><div class=\"playerBox\" id=\"pBox'+i+'\" style=\"background-color:'+palettes[pPal[i]][0]+';border:5px solid '+palettes[pPal[i]][2]+'0.8)\"><p>P'+(i+1)+'<br><span class=\"cont\">(Cont. '+i+')</span></p></div><div id=\"pTag'+i+'\" class=\"pTag\"><textarea id=\"pTagEdit'+i+'\" class=\"pTagEdit\" maxlength=\"10\"></textarea></div></div>');\n  }\n  playerAmount++;\n}\n\nexport const removePlayer (i){\n  playerType[i] = -1;\n  playerAmount--;\n}*/\nfunction interpretInputs(i, active, playertype, inputBuffer) {\n    let tempBuffer = (0, input_1.nullInputs)();\n    // keep updating Z and Start all the time, even when paused\n    for (var k = 0; k < 7; k++) {\n        tempBuffer[7 - k].z = inputBuffer[6 - k].z;\n        tempBuffer[7 - k].s = inputBuffer[6 - k].s;\n    }\n    tempBuffer[0] = (0, input_1.pollInputs)(exports.gameMode, exports.frameByFrame, exports.mType[i], i, exports.currentPlayers[i], exports.keys, playertype);\n    let pastOffset = 0;\n    if ((exports.gameMode !== 3 && exports.gameMode !== 5) || (exports.playing && (exports.pause[i][1] || !exports.pause[i][0]))\n        || exports.wasFrameByFrame\n        || (!exports.playing && exports.pause[i][0] && !exports.pause[i][1])) {\n        pastOffset = 1;\n    }\n    exports.pause[i][1] = exports.pause[i][0];\n    exports.wasFrameByFrame = false;\n    exports.frameAdvance[i][1] = exports.frameAdvance[i][0];\n    for (var k = 0; k < 7; k++) {\n        tempBuffer[7 - k].lsX = inputBuffer[7 - k - pastOffset].lsX;\n        tempBuffer[7 - k].lsY = inputBuffer[7 - k - pastOffset].lsY;\n        tempBuffer[7 - k].rawX = inputBuffer[7 - k - pastOffset].rawX;\n        tempBuffer[7 - k].rawY = inputBuffer[7 - k - pastOffset].rawY;\n        tempBuffer[7 - k].csX = inputBuffer[7 - k - pastOffset].csX;\n        tempBuffer[7 - k].csY = inputBuffer[7 - k - pastOffset].csY;\n        tempBuffer[7 - k].rawcsX = inputBuffer[7 - k - pastOffset].rawcsX;\n        tempBuffer[7 - k].rawcsY = inputBuffer[7 - k - pastOffset].rawcsY;\n        tempBuffer[7 - k].lA = inputBuffer[7 - k - pastOffset].lA;\n        tempBuffer[7 - k].rA = inputBuffer[7 - k - pastOffset].rA;\n        tempBuffer[7 - k].a = inputBuffer[7 - k - pastOffset].a;\n        tempBuffer[7 - k].b = inputBuffer[7 - k - pastOffset].b;\n        tempBuffer[7 - k].x = inputBuffer[7 - k - pastOffset].x;\n        tempBuffer[7 - k].y = inputBuffer[7 - k - pastOffset].y;\n        tempBuffer[7 - k].r = inputBuffer[7 - k - pastOffset].r;\n        tempBuffer[7 - k].l = inputBuffer[7 - k - pastOffset].l;\n        tempBuffer[7 - k].dl = inputBuffer[7 - k - pastOffset].dl;\n        tempBuffer[7 - k].dd = inputBuffer[7 - k - pastOffset].dd;\n        tempBuffer[7 - k].dr = inputBuffer[7 - k - pastOffset].dr;\n        tempBuffer[7 - k].du = inputBuffer[7 - k - pastOffset].du;\n    }\n    if (exports.mType !== null) {\n        if ((exports.mType[i] === \"keyboard\" && (tempBuffer[0].z || tempBuffer[1].z))\n            || (exports.mType[i] !== \"keyboard\" && (tempBuffer[0].z && !tempBuffer[1].z))) {\n            exports.frameAdvance[i][0] = true;\n        }\n        else {\n            exports.frameAdvance[i][0] = false;\n        }\n    }\n    if (exports.frameAdvance[i][0] && !exports.frameAdvance[i][1] && !exports.playing && exports.gameMode !== 4) {\n        exports.frameByFrame = true;\n    }\n    if (exports.mType[i] === \"keyboard\") { // keyboard controls\n        if (tempBuffer[0].s || tempBuffer[1].s || (exports.gameMode === 5 && (tempBuffer[0].du || tempBuffer[1].du))) {\n            exports.pause[i][0] = true;\n        }\n        else {\n            exports.pause[i][0] = false;\n        }\n        if (!exports.playing && (exports.gameMode == 3 || exports.gameMode == 5)\n            && (tempBuffer[0].a || tempBuffer[1].a) && (tempBuffer[0].l || tempBuffer[1].l)\n            && (tempBuffer[0].r || tempBuffer[1].r) && (tempBuffer[0].s || tempBuffer[1].s)) {\n            if (tempBuffer[0].b || tempBuffer[1].b) {\n                startGame();\n            }\n            else {\n                endGame(inputBuffer);\n            }\n        }\n        interpretPause(exports.pause[i][0], exports.pause[i][1]);\n    }\n    else if (exports.mType[i] !== null) { // gamepad controls\n        if (!exports.playing && (exports.gameMode == 3 || exports.gameMode == 5) &&\n            (tempBuffer[0].a && tempBuffer[0].l && tempBuffer[0].r && tempBuffer[0].s)\n            && (!(tempBuffer[1].a && tempBuffer[1].l && tempBuffer[1].r && tempBuffer[1].s))) {\n            if (tempBuffer[0].b) {\n                startGame();\n            }\n            else {\n                endGame(inputBuffer);\n            }\n        }\n        if (tempBuffer[0].s || tempBuffer[0].du && exports.gameMode == 5) {\n            exports.pause[i][0] = true;\n        }\n        else {\n            exports.pause[i][0] = false;\n        }\n        // Controller reset functionality\n        if ((tempBuffer[0].z || tempBuffer[0].du) && tempBuffer[0].x && tempBuffer[0].y) {\n            exports.controllerResetCountdowns[i] -= 1;\n            if (exports.controllerResetCountdowns[i] === 0) {\n                // triggers code in input.js\n                console.log(\"Controller #\" + (i + 1) + \" was reset!\");\n                (0, jquery_1.default)(\"#resetIndicator\" + i).fadeIn(100);\n                (0, jquery_1.default)(\"#resetIndicator\" + i).fadeOut(500);\n            }\n        }\n        else {\n            exports.controllerResetCountdowns[i] = 125;\n        }\n        interpretPause(exports.pause[i][0], exports.pause[i][1]);\n    }\n    else { // AI\n        tempBuffer[0].rawX = tempBuffer[0].lsX;\n        tempBuffer[0].rawY = tempBuffer[0].lsY;\n        tempBuffer[0].rawcsX = tempBuffer[0].csX;\n        tempBuffer[0].rawcsY = tempBuffer[0].csY;\n        tempBuffer[0].lsX = (0, meleeInputs_1.deaden)(tempBuffer[0].rawX);\n        tempBuffer[0].lsY = (0, meleeInputs_1.deaden)(tempBuffer[0].rawY);\n        tempBuffer[0].csX = (0, meleeInputs_1.deaden)(tempBuffer[0].rawcsX);\n        tempBuffer[0].csY = (0, meleeInputs_1.deaden)(tempBuffer[0].rawcsY);\n    }\n    if (exports.showDebug) {\n        (0, jquery_1.default)(\"#lsAxisX\" + i).empty().append(tempBuffer[0].lsX.toFixed(3));\n        (0, jquery_1.default)(\"#lsAxisY\" + i).empty().append(tempBuffer[0].lsY.toFixed(3));\n        (0, jquery_1.default)(\"#csAxisX\" + i).empty().append(tempBuffer[0].csX.toFixed(3));\n        (0, jquery_1.default)(\"#csAxisY\" + i).empty().append(tempBuffer[0].csY.toFixed(3));\n        (0, jquery_1.default)(\"#lAnalog\" + i).empty().append(tempBuffer[0].lA.toFixed(3));\n        (0, jquery_1.default)(\"#rAnalog\" + i).empty().append(tempBuffer[0].rA.toFixed(3));\n        (0, drawGamepad_1.updateGamepadSVGState)(i, \"gamepadSVG\" + i, tempBuffer[0]);\n    }\n    if (exports.gameMode === 14) { // controller calibration screen\n        (0, drawGamepad_1.updateGamepadSVGState)(i, \"gamepadSVGCalibration\", tempBuffer[0]);\n    }\n    if (exports.showDebug || exports.gameMode === 14) {\n        const which = (exports.showDebug && exports.gameMode === 14) ? \"both\" : exports.showDebug ? \"debug\" : \"calibration\";\n        if (tempBuffer[0].x && !tempBuffer[1].x && tempBuffer[0].du) {\n            (0, drawGamepad_1.cycleGamepadColour)(i, which, true);\n        }\n        if (tempBuffer[0].y && !tempBuffer[1].y && tempBuffer[0].du) {\n            (0, drawGamepad_1.cycleGamepadColour)(i, which, false);\n        }\n    }\n    if (streamclient_1.giveInputs[i] === true) {\n        //turns out keyboards leave gaps in the input buffer\n        (0, deepCopyObject_1.deepObjectMerge)(true, (0, input_1.nullInput)(), tempBuffer[0]);\n        (0, streamclient_1.updateNetworkInputs)(tempBuffer[0], i);\n    }\n    if (active) {\n        if (tempBuffer[0].dl && !tempBuffer[1].dl) {\n            exports.player[i].showLedgeGrabBox ^= true;\n        }\n        if (tempBuffer[0].dd && !tempBuffer[1].dd) {\n            exports.player[i].showECB ^= true;\n        }\n        if (tempBuffer[0].dr && !tempBuffer[1].dr) {\n            exports.player[i].showHitbox ^= true;\n        }\n    }\n    if (exports.frameByFrame) {\n        tempBuffer[0].z = false;\n    }\n    return tempBuffer;\n}\nfunction interpretPause(pause0, pause1) {\n    if (pause0 && !pause1) {\n        if (exports.gameMode == 3 || exports.gameMode == 5) {\n            exports.playing ^= true;\n            if (!exports.playing) {\n                sfx_1.sounds.pause.play();\n                changeVolume(music_1.MusicManager, audiomenu_1.masterVolume[1] * 0.3, 1);\n                (0, render_1.renderForeground)();\n            }\n            else {\n                changeVolume(music_1.MusicManager, audiomenu_1.masterVolume[1], 1);\n            }\n        }\n    }\n}\nexports.bg1 = 0;\nexports.bg2 = 0;\nexports.fg1 = 0;\nexports.fg2 = 0;\nexports.ui = 0;\nexports.c = 0;\nexports.canvasMain = 0;\nexports.layers = {\n    BG1: 0,\n    BG2: 0,\n    FG1: 0,\n    FG2: 0,\n    UI: 0\n};\nexports.layerSwitches = {\n    BG1: true,\n    BG2: true,\n    FG1: true,\n    FG2: true,\n    UI: true\n};\nfunction renderToMain() {\n    var keys = Object.keys(exports.layers);\n    for (var i = 0; i < keys.length; i++) {\n        if (exports.layerSwitches[keys[i]]) {\n            exports.c.drawImage(exports.layers[keys[i]], 0, 0);\n        }\n    }\n}\nfunction update(i, inputBuffers) {\n    if (!exports.starting) {\n        if (exports.currentPlayers[i] != -1) {\n            if (exports.playerType[i] == 0) {\n                // do nothing, use the provided player i inputs\n            }\n            else if (exports.playerType[i] === 1) {\n                if (exports.player[i].actionState != \"SLEEP\") {\n                    (0, ai_1.runAI)(i); // no need to return input since polling returns ai input if they are active\n                }\n            }\n        }\n    }\n    (0, physics_1.physics)(i, inputBuffers);\n}\nlet delta = 0;\nlet lastFrameTimeMs = 0;\nlet lastUpdate = performance.now();\nfunction gameTick(oldInputBuffers) {\n    var start = performance.now();\n    var diff = 0;\n    let input = [(0, input_1.nullInputs)(), (0, input_1.nullInputs)(), (0, input_1.nullInputs)(), (0, input_1.nullInputs)()];\n    if (exports.gameMode == 0 || exports.gameMode == 20) {\n        findPlayers();\n    }\n    else if (exports.gameMode == 1) {\n        //console.log(playerType);\n        for (var i = 0; i < exports.ports; i++) {\n            input[i] = interpretInputs(i, true, exports.playerType[i], oldInputBuffers[i]);\n            (0, menu_1.menuMove)(i, input);\n        }\n    }\n    else if (exports.gameMode == 10) {\n        for (var i = 0; i < exports.ports; i++) {\n            input[i] = interpretInputs(i, true, exports.playerType[i], oldInputBuffers[i]);\n            (0, audiomenu_1.audioMenuControls)(i, input);\n        }\n    }\n    else if (exports.gameMode == 11) {\n        for (var i = 0; i < exports.ports; i++) {\n            input[i] = interpretInputs(i, true, exports.playerType[i], oldInputBuffers[i]);\n            (0, gameplaymenu_1.gameplayMenuControls)(i, input);\n        }\n    }\n    else if (exports.gameMode == 12) {\n        for (var i = 0; i < exports.ports; i++) {\n            input[i] = interpretInputs(i, true, exports.playerType[i], oldInputBuffers[i]);\n            (0, keyboardmenu_1.keyboardMenuControls)(i, input);\n        }\n    }\n    else if (exports.gameMode == 13) {\n        input[exports.creditsPlayer] = interpretInputs(exports.creditsPlayer, true, exports.playerType[exports.creditsPlayer], oldInputBuffers[exports.creditsPlayer]);\n        (0, credits_1.credits)(exports.creditsPlayer, input);\n    }\n    else if (exports.gameMode == 14) {\n        // controller calibration\n        input[exports.calibrationPlayer] = interpretInputs(exports.calibrationPlayer, true, exports.playerType[exports.calibrationPlayer], oldInputBuffers[exports.calibrationPlayer]);\n    }\n    else if (exports.gameMode == 15) {\n        for (var i = 0; i < exports.ports; i++) {\n            input[i] = interpretInputs(i, true, exports.playerType[i], oldInputBuffers[i]);\n            (0, menu_1.menuMove)(i, input);\n        }\n    }\n    else if (exports.gameMode == 2) {\n        for (var i = 0; i < 4; i++) {\n            if (i < exports.ports) {\n                input[i] = interpretInputs(i, true, exports.playerType[i], oldInputBuffers[i]);\n                (0, css_1.cssControls)(i, input);\n            }\n            actionStateShortcuts_1.actionStates[exports.characterSelections[i]][exports.player[i].actionState].main(i, input);\n        }\n        for (var i = 0; i < 4; i++) {\n            if (exports.playerType[i] > -1) {\n                (0, hitDetection_1.hitDetect)(i, input);\n            }\n        }\n        (0, hitDetection_1.executeHits)(input);\n        (0, hitDetection_1.resetHitQueue)();\n        findPlayers();\n    }\n    else if (exports.gameMode == 6) {\n        // stage select\n        for (var i = 0; i < 4; i++) {\n            if (i < exports.ports) {\n                input[i] = interpretInputs(i, true, exports.playerType[i], oldInputBuffers[i]);\n                (0, stageselect_1.sssControls)(i, input);\n            }\n        }\n    }\n    else if (exports.playing || exports.frameByFrame) {\n        //console.log(\"test0\");\n        /*delta = timestamp - lastFrameTimeMs; // get the delta time since last frame\n        lastFrameTimeMs = timestamp;\n        console.log(delta);*/\n        var now = performance.now();\n        var dt = now - lastUpdate;\n        //console.log(now);\n        //console.log(dt);\n        lastUpdate = now;\n        (0, hitDetection_1.resetHitQueue)();\n        (0, activeStage_1.getActiveStage)().movingPlatforms();\n        (0, article_1.destroyArticles)();\n        (0, article_1.executeArticles)();\n        for (var i = 0; i < 4; i++) {\n            if (exports.playerType[i] > -1) {\n                if (!exports.starting) {\n                    input[i] = interpretInputs(i, true, exports.playerType[i], oldInputBuffers[i]);\n                }\n                update(i, input);\n            }\n        }\n        (0, hitDetection_1.checkPhantoms)();\n        for (var i = 0; i < 4; i++) {\n            if (exports.playerType[i] > -1) {\n                (0, hitDetection_1.hitDetect)(i, input);\n            }\n        }\n        (0, hitDetection_1.executeHits)(input);\n        (0, article_1.articlesHitDetection)();\n        (0, article_1.executeArticleHits)(input);\n        if (!exports.starting && !exports.versusMode) {\n            matchTimerTick(input);\n        }\n        else {\n            exports.startTimer -= 0.01666667;\n            if (exports.startTimer < 0) {\n                exports.starting = false;\n            }\n        }\n        if (exports.frameByFrame) {\n            exports.frameByFrameRender = true;\n            exports.wasFrameByFrame = true;\n        }\n        exports.frameByFrame = false;\n        if (exports.showDebug) {\n            diff = performance.now() - start;\n            exports.gamelogicTime[0] += diff;\n            exports.gamelogicTime[0] /= 2;\n            if (diff >= 10) {\n                exports.gamelogicTime[3]++;\n            }\n            if (diff < exports.gamelogicTime[2]) {\n                exports.gamelogicTime[2] = diff;\n            }\n            if (diff > exports.gamelogicTime[1]) {\n                exports.gamelogicTime[1] = diff;\n            }\n            dom.gamelogicAvg.innerHTML = Math.round(exports.gamelogicTime[0]);\n            dom.gamelogicHigh.innerHTML = Math.round(exports.gamelogicTime[1]);\n            dom.gamelogicLow.innerHTML = Math.round(exports.gamelogicTime[2]);\n            dom.gamelogicPeak.innerHTML = exports.gamelogicTime[3];\n        }\n    }\n    else if (exports.findingPlayers) {\n        findPlayers();\n    }\n    else {\n        if (!exports.gameEnd) {\n            for (var i = 0; i < 4; i++) {\n                if (exports.playerType[i] == 0 || exports.playerType[i] == 2) {\n                    if (exports.currentPlayers[i] != -1) {\n                        input[i] = interpretInputs(i, false, exports.playerType[i], oldInputBuffers[i]);\n                    }\n                }\n            }\n        }\n    }\n    /*\n  \n    var beforeWaster = performance.now();\n    // neeed to waste 0.666ms\n    var timeWasted = false;\n    var t = 0;\n    var o = performance.now();\n    while(!timeWasted){\n      var n = performance.now();\n      t += n - o;\n      //console.log(t);\n      if (t > 0.6666){\n        timeWasted = true;\n      }\n      o = n;\n      //console.log(\".\");\n    }\n    //console.log(performance.now() - beforeWaster);*/\n    (0, replay_1.saveGameState)(input, exports.ports);\n    setTimeout(gameTick, 16, input);\n}\nfunction clearScreen() {\n    //bg1.fillStyle = \"rgb(0, 0, 0)\";\n    //bg1.fillRect(0,0,layers.BG1.width,layers.BG1.height);\n    exports.bg2.clearRect(0, 0, exports.layers.BG2.width, exports.layers.BG2.height);\n    //fg1.clearRect(0,0,layers.FG1.width,layers.FG1.height);\n    exports.fg2.clearRect(0, 0, exports.layers.FG2.width, exports.layers.FG2.height);\n    exports.ui.clearRect(0, 0, exports.layers.UI.width, exports.layers.UI.height);\n}\nlet otherFrame = true;\nlet fps30 = false;\nfunction renderTick() {\n    window.requestAnimationFrame(renderTick);\n    otherFrame ^= true;\n    if ((fps30 && otherFrame) || !fps30) {\n        //console.log(\"------\");\n        if (exports.gameMode == 20) {\n            (0, startup_1.drawStartUp)();\n        }\n        else if (exports.gameMode == 10) {\n            (0, audiomenu_1.drawAudioMenu)();\n        }\n        else if (exports.gameMode == 11) {\n            (0, gameplaymenu_1.drawGameplayMenu)();\n        }\n        else if (exports.gameMode == 12) {\n            (0, keyboardmenu_1.drawKeyboardMenu)();\n        }\n        else if (exports.gameMode == 13) {\n            (0, credits_1.drawCredits)();\n        }\n        else if (exports.gameMode == 14) {\n            (0, controllermenu_1.drawControllerMenu)();\n        }\n        else if (exports.gameMode == 0) {\n            (0, startscreen_1.drawStartScreen)();\n        }\n        else if (exports.gameMode == 1) {\n            (0, menu_1.drawMainMenu)();\n        }\n        else if (exports.gameMode == 2) {\n            (0, css_1.drawCSS)();\n            //renderVfx();\n        }\n        else if (exports.gameMode == 6) {\n            (0, stageselect_1.drawSSS)();\n        }\n        else if (exports.playing || exports.frameByFrameRender) {\n            /*delta = timestamp - lastFrameTimeMs; // get the delta time since last frame\n            lastFrameTimeMs = timestamp;\n            console.log(delta);*/\n            //console.log(\"test2\");\n            var rStart = performance.now();\n            clearScreen();\n            if ((0, vfx_1.isShowSFX)()) {\n                (0, stagerender_1.drawBackground)();\n            }\n            (0, stagerender_1.drawStage)();\n            for (var i = 0; i < 4; i++) {\n                if (exports.playerType[i] > -1) {\n                    (0, render_1.renderPlayer)(i);\n                }\n            }\n            (0, article_1.renderArticles)();\n            (0, renderVfx_1.renderVfx)();\n            (0, render_1.renderOverlay)(true);\n            if (exports.showDebug) {\n                var diff = performance.now() - rStart;\n                exports.renderTime[0] += diff;\n                exports.renderTime[0] /= 2;\n                if (diff >= 10) {\n                    exports.renderTime[3]++;\n                }\n                if (diff > exports.renderTime[1]) {\n                    exports.renderTime[1] = diff;\n                }\n                if (diff < exports.renderTime[2]) {\n                    exports.renderTime[2] = diff;\n                }\n                dom.renderAvg.innerHTML = Math.round(exports.renderTime[0]);\n                dom.renderHigh.innerHTML = Math.round(exports.renderTime[1]);\n                dom.renderLow.innerHTML = Math.round(exports.renderTime[2]);\n                dom.renderPeak.innerHTML = exports.renderTime[3];\n            }\n        }\n        if (exports.frameByFrameRender) {\n            (0, render_1.renderForeground)();\n        }\n        exports.frameByFrameRender = false;\n        //renderToMain();\n        //console.log(performance.now());\n    }\n    else {\n        if (exports.playing) {\n            (0, renderVfx_1.renderVfx)(true);\n        }\n    }\n}\nfunction buildPlayerObject(i) {\n    exports.player[i] = new player_1.playerObject(exports.characterSelections[i], exports.startingPoint[i], exports.startingFace[i]);\n    exports.player[i].phys.ECB1 = [new Vec2D_1.Vec2D(exports.startingPoint[i].x, exports.startingPoint[i].y), new Vec2D_1.Vec2D(exports.startingPoint[i].x, exports.startingPoint[i].y), new Vec2D_1.Vec2D(exports.startingPoint[i].x, exports.startingPoint[i].y), new Vec2D_1.Vec2D(exports.startingPoint[i].x, exports.startingPoint[i].y)];\n    exports.player[i].phys.ECBp = [new Vec2D_1.Vec2D(exports.startingPoint[i].x, exports.startingPoint[i].y), new Vec2D_1.Vec2D(exports.startingPoint[i].x, exports.startingPoint[i].y), new Vec2D_1.Vec2D(exports.startingPoint[i].x, exports.startingPoint[i].y), new Vec2D_1.Vec2D(exports.startingPoint[i].x, exports.startingPoint[i].y)];\n    exports.player[i].difficulty = exports.cpuDifficulty[i];\n}\nfunction initializePlayers(i, target) {\n    buildPlayerObject(i);\n    if (target) {\n        (0, drawVfx_1.drawVfx)({\n            name: \"entrance\",\n            pos: new Vec2D_1.Vec2D(activeStage_1.activeStage.startingPoint[0].x, activeStage_1.activeStage.startingPoint[0].y)\n        });\n    }\n    else {\n        (0, drawVfx_1.drawVfx)({\n            name: \"entrance\",\n            pos: new Vec2D_1.Vec2D(exports.startingPoint[i][0], exports.startingPoint[i][1])\n        });\n    }\n}\nfunction startGame() {\n    (0, activeStage_1.setVsStage)(exports.stageSelect);\n    (0, stagerender_1.setBackgroundType)(Math.round(Math.random()));\n    changeGamemode(3);\n    (0, vfxQueue_1.resetVfxQueue)();\n    for (var n = 0; n < 4; n++) {\n        if (exports.playerType[n] > -1) {\n            initializePlayers(n, false);\n            (0, render_1.renderPlayer)(n);\n            exports.player[n].inCSS = false;\n        }\n        if (exports.versusMode) {\n            exports.player[n].stocks = 1;\n        }\n    }\n    exports.matchTimer = 480;\n    exports.startTimer = 1.5;\n    exports.starting = true;\n    music_1.MusicManager.stopWhatisPlaying();\n    switch (exports.stageSelect) {\n        case 0:\n            music_1.MusicManager.playBattleFieldLoop();\n            break;\n        case 1:\n            music_1.MusicManager.playyStoryLoop();\n            break;\n        case 2:\n            music_1.MusicManager.playpStadiumLoop();\n            break;\n        case 3:\n            music_1.MusicManager.playDreamLandLoop();\n            break;\n        case 4:\n            music_1.MusicManager.playfinaldLoop();\n            break;\n        case 5:\n            music_1.MusicManager.playfodLoop();\n            break;\n        default:\n            break;\n    }\n    (0, drawVfx_1.drawVfx)({\n        name: \"start\",\n        pos: new Vec2D_1.Vec2D(0, 0)\n    });\n    exports.findingPlayers = false;\n    exports.playing = true;\n}\nfunction endGame(input) {\n    exports.gameEnd = false;\n    (0, render_1.resetLostStockQueue)();\n    (0, hitDetection_1.setPhantonQueue)([]);\n    (0, article_1.resetAArticles)();\n    music_1.MusicManager.stopWhatisPlaying();\n    changeVolume(music_1.MusicManager, audiomenu_1.masterVolume[1], 1);\n    exports.playing = false;\n    clearScreen();\n    (0, stagerender_1.drawStage)();\n    (0, css_2.setTokenPosSnapToChar)(0);\n    (0, css_2.setTokenPosSnapToChar)(1);\n    (0, css_2.setTokenPosSnapToChar)(2);\n    (0, css_2.setTokenPosSnapToChar)(3);\n    if (exports.gameMode == 3) {\n        changeGamemode(2);\n        music_1.MusicManager.playMenuLoop();\n        exports.pause = [[true, true], [true, true], [true, true], [true, true]];\n        exports.frameAdvance = [\n            [true, true],\n            [true, true],\n            [true, true],\n            [true, true]\n        ];\n        exports.findingPlayers = true;\n        positionPlayersInCSS();\n        for (var i = 0; i < 4; i++) {\n            if (exports.playerType[i] > -1) {\n                if (exports.player[i].actionState == \"FURAFURA\") {\n                    sfx_1.sounds.furaloop.stop(exports.player[i].furaLoopID);\n                }\n                //input[i][0].a = true; // do\n                //input[i][1].a = true; // not\n                exports.player[i].inCSS = true;\n                exports.player[i].phys.face = 1;\n                exports.player[i].actionState = \"WAIT\";\n                exports.player[i].timer = 0;\n            }\n        }\n    }\n}\nfunction finishGame(input) {\n    exports.gameEnd = true;\n    exports.playing = false;\n    exports.fg2.save();\n    exports.fg2.textAlign = \"center\";\n    var text = \"Game!\";\n    var size = 300;\n    var textScale = 1;\n    var textGrad = exports.fg2.createLinearGradient(0, 200, 0, 520);\n    if (exports.matchTimer <= 0) {\n        text = \"Time!\";\n        sfx_1.sounds.time.play();\n        textGrad.addColorStop(0, \"black\");\n        textGrad.addColorStop(0.5, \"black\");\n        textGrad.addColorStop(0.7, \"rgb(21, 51, 180)\");\n        textGrad.addColorStop(1, \"rgb(71, 94, 250)\");\n    }\n    else {\n        sfx_1.sounds.game.play();\n        textGrad.addColorStop(0, \"black\");\n        textGrad.addColorStop(0.4, \"black\");\n        textGrad.addColorStop(0.7, \"rgb(167, 27, 40)\");\n        textGrad.addColorStop(1, \"rgb(255, 31, 52)\");\n    }\n    exports.fg2.scale(1, textScale);\n    exports.fg2.fillStyle = textGrad;\n    exports.fg2.lineWidth = 40;\n    exports.fg2.strokeStyle = \"black\";\n    exports.fg2.font = \"900 \" + size + \"px Arial\";\n    exports.fg2.strokeText(text, 600, 470 / textScale);\n    exports.fg2.lineWidth = 20;\n    exports.fg2.strokeStyle = \"white\";\n    exports.fg2.font = \"900 \" + size + \"px Arial\";\n    exports.fg2.strokeText(text, 600, 470 / textScale);\n    exports.fg2.font = \"900 \" + size + \"px Arial\";\n    exports.fg2.fillText(text, 600, 470 / textScale);\n    exports.fg2.restore();\n    music_1.MusicManager.stopWhatisPlaying();\n    setTimeout(function () {\n        endGame(input);\n    }, 2500);\n}\nfunction onFullScreenChange() {\n    var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;\n    // if in fullscreen mode fullscreenElement won't be null\n    var cont = document.getElementById(\"topButtonContainer\");\n    var icn = document.querySelectorAll(\".topButton\");\n    if (fullscreenElement != null) {\n        cont.style.transition = \"opacity 0.5s linear 0s\";\n        cont.style.opacity = 0;\n        ;\n        setTimeout(function () {\n            var i;\n            for (i = 0; i < icn.length; i++) {\n                icn[i].style.height = \"5px\";\n            }\n            cont.style.height = \"5px\";\n            resize();\n        }, 500);\n        (0, jquery_1.default)(\"#keyboardPrompt\").hide();\n        (0, jquery_1.default)(\"#keyboardControlsImg\").hide();\n        (0, jquery_1.default)(\"#controllerSupportContainer\").hide();\n        (0, jquery_1.default)(\"#debugButtonEdit\").empty().append(\"OFF\");\n        (0, jquery_1.default)(\"#debug\").hide();\n        (0, jquery_1.default)(\"#players\").hide();\n        (0, jquery_1.default)(\"body\").css(\"overflow\", \"hidden\");\n        showHeader = false;\n    }\n    else {\n        var i;\n        for (i = 0; i < icn.length; i++) {\n            icn[i].style.height = \"25px\";\n        }\n        cont.style.height = \"31px\";\n        cont.style.transition = \"opacity 0.5s linear 0s\";\n        cont.style.opacity = 1;\n    }\n}\nfunction start() {\n    if (exports.holiday === 1) {\n        (0, jquery_1.default)(\"#layerButton\").after('<div id=\"snowButton\" class=\"gameButton\" style=\"width:90px\"><img src=\"assets/christmas/snowflake.png\" height=17 width=17 style=\"display:inline-block\"/><p style=\"width:30px;display:inline-block\"><span id=\"snowButtonEdit\">150</span></p><div id=\"snowMinus\" class=\"snowControl\" style=\"display:inline-block;padding:3px\"><p style=\"padding:0;font-size:20px\">-</p></div><div id=\"snowPlus\" style=\"display:inline-block;padding:3px\"><p style=\"padding:0;font-size:17px\">+</p></div></div>');\n    }\n    for (var i = 0; i < 4; i++) {\n        buildPlayerObject(i);\n        exports.player[i].phys.face = 1;\n        exports.player[i].actionState = \"WAIT\";\n    }\n    cacheDom();\n    (0, keyboardmenu_1.getKeyboardCookie)();\n    giveMedals();\n    (0, audiomenu_1.getAudioCookies)();\n    (0, gameplaymenu_1.getGameplayCookies)();\n    (0, jquery_1.default)(\"#keyboardButton\").click(function () {\n        (0, jquery_1.default)(\"#keyboardControlsImg\").toggle();\n        (0, jquery_1.default)(\"#keyboardPrompt\").hide();\n    });\n    (0, jquery_1.default)(\"#controllerButton\").click(function () {\n        (0, jquery_1.default)(\"#controllerSupportContainer\").toggle();\n    });\n    exports.layers.BG1 = document.getElementById(\"background1Canvas\");\n    exports.bg1 = exports.layers.BG1.getContext(\"2d\");\n    exports.layers.BG2 = document.getElementById(\"background2Canvas\");\n    exports.bg2 = exports.layers.BG2.getContext(\"2d\");\n    exports.layers.FG1 = document.getElementById(\"foreground1Canvas\");\n    exports.fg1 = exports.layers.FG1.getContext(\"2d\");\n    exports.layers.FG2 = document.getElementById(\"foreground2Canvas\");\n    exports.fg2 = exports.layers.FG2.getContext(\"2d\");\n    exports.layers.UI = document.getElementById(\"uiCanvas\");\n    exports.ui = exports.layers.UI.getContext(\"2d\");\n    exports.bg1.fillStyle = \"rgb(0, 0, 0)\";\n    exports.bg1.fillRect(0, 0, exports.layers.BG1.width, exports.layers.BG1.height);\n    let nullInputBuffers = [(0, input_1.nullInputs)(), (0, input_1.nullInputs)(), (0, input_1.nullInputs)(), (0, input_1.nullInputs)()];\n    gameTick(nullInputBuffers);\n    renderTick();\n    (0, jquery_1.default)(\"#effectsButton\").click(function () {\n        if ((0, vfx_1.isShowSFX)()) {\n            (0, jquery_1.default)(\"#effectsButtonEdit\").empty().append(\"OFF\");\n        }\n        else {\n            (0, jquery_1.default)(\"#effectsButtonEdit\").empty().append(\"ON\");\n        }\n        (0, vfx_1.toggleShowSFX)();\n    });\n    (0, jquery_1.default)(\"#fpsButton\").click(function () {\n        if (fps30) {\n            (0, jquery_1.default)(\"#fpsButtonEdit\").empty().append(\"60\");\n        }\n        else {\n            (0, jquery_1.default)(\"#fpsButtonEdit\").empty().append(\"30\");\n        }\n        fps30 ^= true;\n    });\n    (0, jquery_1.default)(\"#alphaButton\").click(function () {\n        if ((0, transparency_1.getTransparency)()) {\n            (0, jquery_1.default)(\"#alphaButtonEdit\").empty().append(\"OFF\");\n        }\n        else {\n            (0, jquery_1.default)(\"#alphaButtonEdit\").empty().append(\"ON\");\n        }\n        (0, transparency_1.toggleTransparency)();\n    });\n    (0, jquery_1.default)(\"#layerButton\").hover(function () {\n        (0, jquery_1.default)(\"#layerDropdown\").toggle();\n    });\n    (0, jquery_1.default)(\".layer\").click(function () {\n        var id = (0, jquery_1.default)(this).attr(\"id\");\n        switch (id) {\n            case \"layer1\":\n                exports.layerSwitches.BG1 ^= true;\n                (0, jquery_1.default)(\"#background1Canvas\").toggle();\n                break;\n            case \"layer2\":\n                exports.layerSwitches.BG2 ^= true;\n                (0, jquery_1.default)(\"#background2Canvas\").toggle();\n                break;\n            case \"layer3\":\n                exports.layerSwitches.FG1 ^= true;\n                (0, jquery_1.default)(\"#foreground1Canvas\").toggle();\n                break;\n            case \"layer4\":\n                exports.layerSwitches.FG2 ^= true;\n                (0, jquery_1.default)(\"#foreground2Canvas\").toggle();\n                break;\n            case \"layer5\":\n                exports.layerSwitches.UI ^= true;\n                (0, jquery_1.default)(\"#uiCanvas\").toggle();\n                break;\n            default:\n                break;\n        }\n        (0, jquery_1.default)(this).toggleClass(\"layerOn\");\n    });\n    (0, jquery_1.default)(\"#debugButton\").click(function () {\n        if (exports.showDebug) {\n            for (let i = 0; i < 4; i++) {\n                document.getElementById(\"gamepadSVG\" + i).style.display = \"none\";\n            }\n            (0, jquery_1.default)(\"#debugButtonEdit\").empty().append(\"OFF\");\n            (0, jquery_1.default)(\"#debug\").hide();\n            (0, jquery_1.default)(\"#players\").hide();\n            (0, jquery_1.default)(\"body\").css(\"overflow\", \"hidden\");\n            //var mY = Math.max(($(window).height()-750)/2,0);\n            //$(\"#display\").css(\"margin\",mY+\"px 0px 0px \"+mX+\"px\");\n        }\n        else {\n            for (let i = 0; i < 4; i++) {\n                if (exports.playerType[i] !== -1) {\n                    (0, drawGamepad_1.updateGamepadSVGColour)(i, \"gamepadSVG\" + i);\n                    document.getElementById(\"gamepadSVG\" + i).style.display = \"\";\n                }\n            }\n            (0, jquery_1.default)(\"#debugButtonEdit\").empty().append(\"ON\");\n            (0, jquery_1.default)(\"#debug\").show();\n            (0, jquery_1.default)(\"#players\").show();\n            (0, jquery_1.default)(\"body\").css(\"overflow\", \"scroll\");\n            //var mY = Math.max(($(window).height()-900)/2,0);\n            //$(\"#display\").css(\"margin\",mY+\" 0px 0px px \"+mX+\"px\");\n        }\n        exports.showDebug ^= true;\n        resize();\n    });\n    (0, jquery_1.default)(\"#hideButton\").click(function () {\n        (0, jquery_1.default)(\"#header\").toggle();\n        showHeader ^= true;\n        resize();\n    });\n    (0, jquery_1.default)(\"#fullscreenButton\").click(function () {\n        if ((document.fullScreenElement && document.fullScreenElement !== null) || (!document.mozFullScreen && !document.webkitIsFullScreen)) {\n            if (document.documentElement.requestFullScreen) {\n                document.documentElement.requestFullScreen();\n            }\n            else if (document.documentElement.mozRequestFullScreen) {\n                document.documentElement.mozRequestFullScreen();\n            }\n            else if (document.documentElement.webkitRequestFullScreen) {\n                document.documentElement.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);\n            }\n        }\n        else {\n            if (document.cancelFullScreen) {\n                document.cancelFullScreen();\n            }\n            else if (document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            }\n            else if (document.webkitCancelFullScreen) {\n                document.webkitCancelFullScreen();\n            }\n        }\n        // resize();\n    });\n    document.addEventListener(\"fullscreenchange\", onFullScreenChange, false);\n    document.addEventListener(\"webkitfullscreenchange\", onFullScreenChange, false);\n    document.addEventListener(\"mozfullscreenchange\", onFullScreenChange, false);\n    (0, jquery_1.default)(\".topButton\").hover(function () {\n        (0, jquery_1.default)(this).children(\".buttonDetails\").toggle();\n    });\n    if (mobile === false) {\n        (0, jquery_1.default)(\".button\").hover(function () {\n            (0, jquery_1.default)(this).toggleClass(\"buttonhighlighted\");\n        });\n        (0, jquery_1.default)(\".socialmedia\").hover(function () {\n            (0, jquery_1.default)(this).toggleClass(\"socialmediahighlight\");\n        });\n        (0, jquery_1.default)(\".sugbtn\").hover(function () {\n            (0, jquery_1.default)(this).toggleClass(\"sugbtnhighlight\");\n        });\n    }\n    (0, jquery_1.default)(\"#appsButton\").hover(function () {\n        (0, jquery_1.default)(\"#appsDropdown\").show();\n    }, function () {\n        (0, jquery_1.default)(\"#appsDropdown\").hide();\n    });\n    if (exports.holiday === 1) {\n        (0, jquery_1.default)(\"#snowMinus\").click(function () {\n            exports.snowCount -= 20;\n            if (exports.snowCount < 0) {\n                exports.snowCount = 0;\n            }\n            (0, jquery_1.default)(\"#snowButtonEdit\").text(exports.snowCount);\n        });\n        (0, jquery_1.default)(\"#snowPlus\").click(function () {\n            exports.snowCount += 20;\n            if (exports.snowCount > 1200) {\n                exports.snowCount = 1200;\n            }\n            (0, jquery_1.default)(\"#snowButtonEdit\").text(exports.snowCount);\n        });\n    }\n    (0, jquery_1.default)(\"#replay\").change(function () {\n        // grab the first image in the FileList object and pass it to the function\n        (0, replay_1.loadReplay)(this.files[0]);\n    });\n    resize();\n}\nwindow.start = start;\nfunction customDeadzone() {\n    this.ls = new Vec2D_1.Vec2D(0, 0);\n    this.cs = new Vec2D_1.Vec2D(0, 0);\n    this.l = 0;\n    this.r = 0;\n}\nfunction addShine(val) {\n    exports.shine += val;\n}\nfunction setShine(val) {\n    exports.shine = val;\n}\nfunction setFindingPlayers(val) {\n    exports.findingPlayers = val;\n}\nfunction setPlaying(val) {\n    exports.playing = val;\n}\nfunction setCreditsPlayer(val) {\n    exports.creditsPlayer = val;\n}\nfunction setCalibrationPlayer(val) {\n    exports.calibrationPlayer = val;\n}\nconst dom = {};\nfunction cacheDom() {\n    const elementIds = [\n        \"matchMinutes\",\n        \"matchSeconds\",\n        \"gamelogicAvg\",\n        \"gamelogicHigh\",\n        \"gamelogicLow\",\n        \"gamelogicPeak\",\n        \"renderAvg\",\n        \"renderHigh\",\n        \"renderLow\",\n        \"renderPeak\",\n    ];\n    elementIds.forEach((id) => {\n        dom[id] = document.getElementById(id);\n    });\n}\n;\nfunction setCS(index, val) {\n    exports.characterSelections[index] = val;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main/main.ts\n");

/***/ }),

/***/ "./src/physics/environmentalCollision.ts":
/*!***********************************************!*\
  !*** ./src/physics/environmentalCollision.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n// @flow\n/*eslint indent:0*/ // get stuffed\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.smallestECBHeight = exports.smallestECBWidth = exports.additionalOffset = void 0;\nexports.hLineThrough = hLineThrough;\nexports.hLineAt = hLineAt;\nexports.vLineThrough = vLineThrough;\nexports.vLineAt = vLineAt;\nexports.lineThrough = lineThrough;\nexports.outwardsWallNormal = outwardsWallNormal;\nexports.coordinateInterceptParameter = coordinateInterceptParameter;\nexports.coordinateIntercept = coordinateIntercept;\nexports.findCollision = findCollision;\nexports.getSameAndOther = getSameAndOther;\nexports.moveAlongGround = moveAlongGround;\nexports.groundedECBSquashFactor = groundedECBSquashFactor;\nexports.runCollisionRoutine = runCollisionRoutine;\nconst Vec2D_1 = __webpack_require__(/*! ../main/util/Vec2D */ \"./src/main/util/Vec2D.ts\");\nconst linAlg_1 = __webpack_require__(/*! ../main/linAlg */ \"./src/main/linAlg.ts\");\nconst findSmallestWithin_1 = __webpack_require__(/*! ../main/util/findSmallestWithin */ \"./src/main/util/findSmallestWithin.ts\");\nconst solveQuadraticEquation_1 = __webpack_require__(/*! ../main/util/solveQuadraticEquation */ \"./src/main/util/solveQuadraticEquation.ts\");\nconst lineAngle_1 = __webpack_require__(/*! ../main/util/lineAngle */ \"./src/main/util/lineAngle.ts\");\nconst extremePoint_1 = __webpack_require__(/*! ../stages/util/extremePoint */ \"./src/stages/util/extremePoint.ts\");\nconst ecbTransform_1 = __webpack_require__(/*! ../main/util/ecbTransform */ \"./src/main/util/ecbTransform.ts\");\nconst zipLabels_1 = __webpack_require__(/*! ../main/util/zipLabels */ \"./src/main/util/zipLabels.ts\");\nconst drawECB_1 = __webpack_require__(/*! ../main/util/drawECB */ \"./src/main/util/drawECB.ts\");\nexports.additionalOffset = 0.00001;\nexports.smallestECBWidth = 1.95;\nexports.smallestECBHeight = 1.95;\nconst maxRecursion = 6;\n// -----------------------------------------------------\n// various utility functions\n// horizontal line through a point\nfunction hLineThrough(point) {\n    return [point, new Vec2D_1.Vec2D(point.x + 1, point.y)];\n}\n;\nfunction hLineAt(y) {\n    return hLineThrough(new Vec2D_1.Vec2D(0, y));\n}\n// vertical line through a point\nfunction vLineThrough(point) {\n    return [point, new Vec2D_1.Vec2D(point.x, point.y + 1)];\n}\n;\nfunction vLineAt(x) {\n    return vLineThrough(new Vec2D_1.Vec2D(x, 0));\n}\n// either horizontal or vertical line through a point\nfunction lineThrough(point, xOrY) {\n    if (xOrY === \"x\") {\n        return hLineThrough(point);\n    }\n    else {\n        return vLineThrough(point);\n    }\n}\n;\n// next ECB point index, counterclockwise or clockwise (with respect to the ECB)\nfunction turn(number, counterclockwise = true) {\n    if (counterclockwise) {\n        if (number === 3) {\n            return 0;\n        }\n        else {\n            return number + 1;\n        }\n    }\n    else {\n        if (number === 0) {\n            return 3;\n        }\n        else {\n            return number - 1;\n        }\n    }\n}\n;\nfunction outwardsWallNormal(wallBottomOrLeft, wallTopOrRight, wallType) {\n    let sign = 1;\n    switch (wallType) {\n        case \"l\": // left wall\n        case \"g\": // ground\n        case \"b\":\n        case \"d\":\n        case \"p\": // platform\n            sign = -1;\n            break;\n        default: // right wall, ceiling\n            break;\n    }\n    return new Vec2D_1.Vec2D(sign * (wallTopOrRight.y - wallBottomOrLeft.y), sign * (wallBottomOrLeft.x - wallTopOrRight.x));\n}\n// returns true if the vector is moving into the wall, false otherwise\n// need to be careful that arguments 2 and 3 are given in the correct order to get the expected result\nfunction movingInto(vec, wallTopOrRight, wallBottomOrLeft, wallType) {\n    return (0, linAlg_1.dotProd)(vec, outwardsWallNormal(wallBottomOrLeft, wallTopOrRight, wallType)) < 0;\n}\n;\n// returns true if point is to the right of a \"left\" wall, or to the left of a \"right\" wall,\n// and false otherwise\nfunction isOutside(point, wallTopOrRight, wallBottomOrLeft, wallType) {\n    //const vec = new Vec2D ( point.x - wallBottom.x, point.y - wallBottom.y );\n    //return ( !movingInto(vec, wallTop, wallBottom, wallType ) );\n    return !movingInto(new Vec2D_1.Vec2D(point.x - wallBottomOrLeft.x, point.y - wallBottomOrLeft.y), wallTopOrRight, wallBottomOrLeft, wallType);\n}\n;\n// say line1 passes through the two points p1 = (x1,y1), p2 = (x2,y2)\n// and line2 by the two points p3 = (x3,y3) and p4 = (x4,y4)\n// this function returns the parameter t, such that p3 + t*(p4-p3) is the intersection point of the two lines\n// please ensure this function is not called on parallel lines\nfunction coordinateInterceptParameter(line1, line2) {\n    // const x1 = line1[0].x;\n    // const x2 = line1[1].x;\n    // const x3 = line2[0].x;\n    // const x4 = line2[1].x;\n    // const y1 = line1[0].y;\n    // const y2 = line1[1].y;\n    // const y3 = line2[0].y;\n    // const y4 = line2[1].y;\n    // const t = ( (x1-x3)*(y2-y1) + (x1-x2)*(y1-y3) ) / ( (x4-x3)*(y2-y1) + (x2-x1)*(y3-y4) );\n    // return t;\n    return ((line1[0].x - line2[0].x) * (line1[1].y - line1[0].y)\n        + (line1[0].x - line1[1].x) * (line1[0].y - line2[0].y))\n        / ((line2[1].x - line2[0].x) * (line1[1].y - line1[0].y)\n            + (line1[1].x - line1[0].x) * (line2[0].y - line2[1].y));\n}\n;\n// find the intersection of two lines\n// please ensure this function is not called on parallel lines\nfunction coordinateIntercept(line1, line2) {\n    const t = coordinateInterceptParameter(line1, line2);\n    return (new Vec2D_1.Vec2D(line2[0].x + t * (line2[1].x - line2[0].x), line2[0].y + t * (line2[1].y - line2[0].y)));\n}\n;\n// finds whether the ECB impacted a surface on one of its vertices\nfunction runPointSweep(ecb1, ecbp, same, wall, wallType, wallIndex, wallBottomOrLeft, wallTopOrRight, xOrY) {\n    let result = null;\n    const wallAngle = (0, lineAngle_1.lineAngle)([wallBottomOrLeft, wallTopOrRight]);\n    if (wallType === \"l\" || wallType === \"r\") { // left or right wall, need to check top or bottom ECB vertex too\n        const sameResult = pointSweepingCheck(ecb1, ecbp, same, wall, wallType, wallIndex, wallTopOrRight, wallBottomOrLeft, xOrY);\n        const other = (wallType === \"l\" && wallAngle < Math.PI / 2) || (wallType === \"r\" && wallAngle > Math.PI / 2) ? 0 : 2;\n        const otherResult = pointSweepingCheck(ecb1, ecbp, other, wall, wallType, wallIndex, wallTopOrRight, wallBottomOrLeft, xOrY);\n        result = (0, findSmallestWithin_1.pickSmallestSweep)([sameResult, otherResult]);\n    }\n    else if (wallType === \"c\") { // for ceilings, need to check side ECB vertex too\n        const topResult = pointSweepingCheck(ecb1, ecbp, 2, wall, wallType, wallIndex, wallTopOrRight, wallBottomOrLeft, xOrY);\n        const side = wallAngle < Math.PI / 2 ? 3 : 1;\n        const sideResult = pointSweepingCheck(ecb1, ecbp, side, wall, wallType, wallIndex, wallTopOrRight, wallBottomOrLeft, xOrY);\n        result = (0, findSmallestWithin_1.pickSmallestSweep)([topResult, sideResult]);\n    }\n    else { // can only collide grounds on the bottom ECB vertex\n        result = pointSweepingCheck(ecb1, ecbp, same, wall, wallType, wallIndex, wallTopOrRight, wallBottomOrLeft, xOrY);\n    }\n    return result;\n}\n;\nfunction pointSweepingCheck(ecb1, ecbp, pt, wall, wallType, wallIndex, wallTopOrRight, wallBottomOrLeft, xOrY) {\n    let result = null;\n    if (isOutside(ecb1[pt], wallTopOrRight, wallBottomOrLeft, wallType) && !isOutside(ecbp[pt], wallTopOrRight, wallBottomOrLeft, wallType)) {\n        const s = coordinateInterceptParameter(wall, [ecb1[pt], ecbp[pt]]); // need to put wall first\n        if (!(isNaN(s) || s === Infinity || s > 1 || s < 0)) {\n            const intersection = new Vec2D_1.Vec2D((1 - s) * ecb1[pt].x + s * ecbp[pt].x, (1 - s) * ecb1[pt].y + s * ecbp[pt].y);\n            if ((0, Vec2D_1.getXOrYCoord)(intersection, xOrY) <= (0, Vec2D_1.getXOrYCoord)(wallTopOrRight, xOrY) && (0, Vec2D_1.getXOrYCoord)(intersection, xOrY) >= (0, Vec2D_1.getXOrYCoord)(wallBottomOrLeft, xOrY)) {\n                result = { sweep: s, kind: \"surface\", surface: wall, type: wallType, index: wallIndex, pt: pt };\n            }\n        }\n    }\n    return result;\n}\n;\n// second: edge sweeping functions\n// in this next function, we are considering a line that is sweeping,\n// from the initial line 'line1' passing through the two points p1 = (x1,y1), p2 = (x2,y2)\n// to the final line 'line2' passing through the two points p3 = (x3,y3) and p4 = (x4,y4)\n// there are two sweeping parameters: \n//   't', which indicates how far along each line we are\n//   's', which indicates how far we are sweeping between line1 and line2 (the main sweeping parameter)\n// for instance:\n//  s=0 means we are on line1,\n//  s=1 means we are on line2,\n//  t=0 means we are on the line between p1 and p3,\n//  t=1 means we are on the line between p2 and p4\n// this function returns a specific value for each of t and s,\n// which correspond to when the swept line hits the origin O (at coordinates (0,0))\n// if either of the parameters is not between 0 and 1, this function instead returns null\n// see '/doc/linesweep.png' for a visual representation of the situation\nfunction lineSweepParameters(line1, line2, flip = false) {\n    let sign = 1;\n    if (flip) {\n        sign = -1;\n    }\n    const x1 = line1[0].x;\n    const x2 = line1[1].x;\n    const x3 = line2[0].x;\n    const x4 = line2[1].x;\n    const y1 = line1[0].y;\n    const y2 = line1[1].y;\n    const y3 = line2[0].y;\n    const y4 = line2[1].y;\n    const a0 = x2 * y1 - x1 * y2;\n    const a1 = x4 * y1 - 2 * x2 * y1 + 2 * x1 * y2 - x3 * y2 + x2 * y3 - x1 * y4;\n    const a2 = x2 * y1 - x4 * y1 - x1 * y2 + x3 * y2 - x2 * y3 + x4 * y3 + x1 * y4 - x3 * y4;\n    // s satisfies the equation:   a0 + a1*s + a2*s^2 = 0\n    const s = (0, solveQuadraticEquation_1.solveQuadraticEquation)(a0, a1, a2, sign);\n    if (s === null || isNaN(s) || s === Infinity || s < 0 || s > 1) {\n        return null; // no real solution\n    }\n    else {\n        const t = (s * (x1 - x3) - x1) / (x2 - x1 + s * (x1 - x2 - x3 + x4));\n        if (isNaN(t) || t === Infinity || t < 0 || t > 1) {\n            return null;\n        }\n        else {\n            return [t, s];\n        }\n    }\n}\n;\n// finds whether the ECB impacted a surface on one of its edges\nfunction runEdgeSweep(ecb1, ecbp, same, wallType, wallLeft, wallRight, wallBottomOrLeft, wallTopOrRight, xOrY, damageType) {\n    let other = 0; // other ECB point\n    let counterclockwise = true; // whether (same ECB point -> other ECB point) is counterclockwise (w.r.t. the ECB)\n    let corner = null;\n    let otherCorner = null;\n    let edgeSweepResult = null;\n    let otherEdgeSweepResult = null;\n    const flip = wallType === \"r\" || wallType === \"c\" ? false : true;\n    // case 1\n    if ((0, Vec2D_1.getXOrYCoord)(ecb1[same], xOrY) > (0, Vec2D_1.getXOrYCoord)(wallTopOrRight, xOrY)) {\n        counterclockwise = !flip;\n        other = turn(same, counterclockwise);\n        if ((0, Vec2D_1.getXOrYCoord)(ecbp[other], xOrY) < (0, Vec2D_1.getXOrYCoord)(wallTopOrRight, xOrY)) {\n            corner = wallTopOrRight;\n        }\n    }\n    // case 2\n    else if ((0, Vec2D_1.getXOrYCoord)(ecb1[same], xOrY) < (0, Vec2D_1.getXOrYCoord)(wallBottomOrLeft, xOrY)) {\n        counterclockwise = flip;\n        other = turn(same, counterclockwise);\n        if ((0, Vec2D_1.getXOrYCoord)(ecbp[other], xOrY) > (0, Vec2D_1.getXOrYCoord)(wallBottomOrLeft, xOrY)) {\n            corner = wallBottomOrLeft;\n        }\n    }\n    if (corner !== null) {\n        // the relevant ECB edge, that might collide with the corner, is the edge between ECB points 'same' and 'other'\n        let interiorECBside = \"l\";\n        if (counterclockwise === false) {\n            interiorECBside = \"r\";\n        }\n        if (!isOutside(corner, ecbp[same], ecbp[other], interiorECBside) && isOutside(corner, ecb1[same], ecb1[other], interiorECBside)) {\n            edgeSweepResult = edgeSweepingCheck(ecb1, ecbp, same, other, counterclockwise, corner, damageType);\n        }\n    }\n    if ((wallType === \"l\" || wallType === \"r\") && (other === 0)) {\n        // if dealing with a wall, we might also want to check the top ECB point for collision if we aren't already doing so\n        let otherCounterclockwise = false; // whether ( same ECB point -> top ECB point) is counterclockwise\n        otherCorner = wallRight;\n        if (wallType === \"l\") {\n            otherCounterclockwise = true;\n            otherCorner = wallLeft;\n        }\n        let otherInteriorECBside = \"l\";\n        if (otherCounterclockwise === false) {\n            otherInteriorECBside = \"r\";\n        }\n        if (!isOutside(otherCorner, ecbp[same], ecbp[2], otherInteriorECBside)\n            && isOutside(otherCorner, ecb1[same], ecb1[2], otherInteriorECBside)) {\n            otherEdgeSweepResult = edgeSweepingCheck(ecb1, ecbp, same, 2, otherCounterclockwise, otherCorner, damageType);\n        }\n    }\n    return (0, findSmallestWithin_1.pickSmallestSweep)([edgeSweepResult, otherEdgeSweepResult]);\n}\n;\n// determines whether the given ECB edge (same--other) has collided with the corner, using the lineSweepParameters function\nfunction edgeSweepingCheck(ecb1, ecbp, same, other, counterclockwise, corner, damageType) {\n    let output = null;\n    // the relevant ECB edge, that might collide with the corner, is the edge between ECB points 'same' and 'other'\n    let interiorECBside = \"l\";\n    if (counterclockwise === false) {\n        interiorECBside = \"r\";\n    }\n    if (!isOutside(corner, ecbp[same], ecbp[other], interiorECBside) && isOutside(corner, ecb1[same], ecb1[other], interiorECBside)) {\n        // we sweep a line,\n        // starting from the relevant ECB1 edge, and ending at the relevant ECBp edge,\n        // and figure out where this would intersect the corner\n        // first we recenter everything around the corner,\n        // as the 'lineSweepParameters' function calculates collision with respect to the origin\n        const recenteredECB1Edge = [new Vec2D_1.Vec2D(ecb1[same].x - corner.x, ecb1[same].y - corner.y),\n            new Vec2D_1.Vec2D(ecb1[other].x - corner.x, ecb1[other].y - corner.y)];\n        const recenteredECBpEdge = [new Vec2D_1.Vec2D(ecbp[same].x - corner.x, ecbp[same].y - corner.y),\n            new Vec2D_1.Vec2D(ecbp[other].x - corner.x, ecbp[other].y - corner.y)];\n        // in the line sweeping, some tricky orientation checks show that a minus sign is required precisely in the counterclockwise case\n        // this is what the third argument to 'lineSweepParameters' corresponds to\n        const lineSweepResult = lineSweepParameters(recenteredECB1Edge, recenteredECBpEdge, counterclockwise);\n        if (lineSweepResult !== null) {\n            const [t, s] = lineSweepResult;\n            const angularParameter = getAngularParameter(t, same, other);\n            output = { kind: \"corner\", corner: corner, sweep: s, angular: angularParameter, damageType: damageType };\n        }\n    }\n    return output;\n}\n;\n// this function finds the first collision that happens as the old ECB moves to the projected ECB\n// the sweeping parameter s corresponds to the location of this first collision\n// terminology in the comments: a wall is a segment with an inside and an outside (could be a ground or ceiling )\n// which is contained in an infinite line, extending both ways, which also has an inside and an outside\nfunction findCollision(ecb1, ecbp, labelledSurface) {\n    // STANDING ASSUMPTIONS\n    // the ECB can only collide a ground/platform surface on its bottom point (or a bottom edge)\n    // the ECB can only collide a ceiling surface on a top or side point (or a top edge)\n    // the ECB cannot collide a left wall on its left vertex\n    // the ECB cannot collide a right wall on its right vertex\n    // walls and corners push out horizontally, grounds/ceilings/platforms push out vertically\n    const [wall, [wallType, wallIndex]] = labelledSurface;\n    const damageType = wall[2] !== undefined ? wall[2].damageType : null;\n    // start defining useful constants/variables\n    const wallTop = (0, extremePoint_1.extremePoint)(wall, \"t\");\n    const wallBottom = (0, extremePoint_1.extremePoint)(wall, \"b\");\n    const wallLeft = (0, extremePoint_1.extremePoint)(wall, \"l\");\n    const wallRight = (0, extremePoint_1.extremePoint)(wall, \"r\");\n    // right wall by default\n    let wallTopOrRight = wallTop;\n    let wallBottomOrLeft = wallBottom;\n    let same = 3;\n    let xOrY = \"y\";\n    let isPlatform = false;\n    switch (wallType) {\n        case \"l\": // left wall\n            same = 1;\n            break;\n        case \"p\": // platform\n            isPlatform = true;\n        case \"g\": // ground\n            same = 0;\n            wallTopOrRight = wallRight;\n            wallBottomOrLeft = wallLeft;\n            xOrY = \"x\";\n            break;\n        case \"c\": // ceiling\n            same = 2;\n            wallTopOrRight = wallRight;\n            wallBottomOrLeft = wallLeft;\n            xOrY = \"x\";\n            break;\n        default: // right wall by default\n            break;\n    }\n    // first check if player ECB was even near the wall\n    if ((ecbp[0].y > wallTop.y && ecb1[0].y > wallTop.y) // player ECB stayed above the wall\n        || (ecbp[2].y < wallBottom.y && ecb1[2].y < wallBottom.y) // played ECB stayed below the wall\n        || (ecbp[3].x > wallRight.x && ecb1[3].x > wallRight.x) // player ECB stayed to the right of the wall\n        || (ecbp[1].x < wallLeft.x && ecb1[1].x < wallLeft.x) // player ECB stayed to the left of the wall\n    ) {\n        return null;\n    }\n    else {\n        // if the surface is a platform, and the bottom ECB point is below the platform, we shouldn't do anything\n        if (isPlatform) {\n            if (!isOutside(ecb1[same], wallTopOrRight, wallBottomOrLeft, wallType)) {\n                return null;\n            }\n        }\n        const closestEdgeCollision = runEdgeSweep(ecb1, ecbp, same, wallType, wallLeft, wallRight, wallBottomOrLeft, wallTopOrRight, xOrY, damageType);\n        const closestPointCollision = runPointSweep(ecb1, ecbp, same, wall, wallType, wallIndex, wallBottomOrLeft, wallTopOrRight, xOrY, damageType);\n        let finalCollision = null;\n        // if we have only one collision type (point/edge), take that one\n        if (closestEdgeCollision === null) {\n            finalCollision = closestPointCollision;\n        }\n        else if (closestPointCollision === null) {\n            finalCollision = closestEdgeCollision;\n        }\n        // otherwise choose the collision with smallest sweeping parameter\n        else if (closestEdgeCollision.sweep > closestPointCollision.sweep) {\n            finalCollision = closestPointCollision;\n        }\n        else {\n            finalCollision = closestEdgeCollision;\n        }\n        return finalCollision;\n    }\n}\n;\n// this function finds the first (non-ignored) collision as the ECB1 moves to the ECBp\nfunction findClosestCollision(ecb1, ecbp, labelledSurfaces) {\n    const touchingData = [null]; // initialise list of new collisions\n    const collisionData = labelledSurfaces.map((labelledSurface) => findCollision(ecb1, ecbp, labelledSurface));\n    for (let i = 0; i < collisionData.length; i++) {\n        const collisionDatum = collisionData[i];\n        if (collisionDatum !== null) {\n            if (collisionDatum.kind === \"surface\") {\n                touchingData.push({\n                    sweep: collisionDatum.sweep, object: {\n                        kind: \"surface\",\n                        surface: collisionDatum.surface,\n                        type: collisionDatum.type,\n                        index: collisionDatum.index,\n                        pt: collisionDatum.pt\n                    }\n                });\n            }\n            else if (collisionDatum.kind === \"corner\") {\n                touchingData.push({\n                    sweep: collisionDatum.sweep, object: {\n                        kind: \"corner\",\n                        corner: collisionDatum.corner,\n                        angular: collisionDatum.angular,\n                        damageType: collisionDatum.damageType\n                    }\n                });\n            }\n        }\n    }\n    return (0, findSmallestWithin_1.pickSmallestSweep)(touchingData);\n}\n;\nfunction resolveECB(ecb1, ecbp, playerStatusInfo, labelledSurfaces) {\n    return runSlideRoutine(ecb1, ecbp, ecbp, playerStatusInfo, labelledSurfaces, null, {\n        type: null,\n        angular: null\n    }, false, true, 0);\n}\nfunction runSlideRoutine(srcECB, tgtECB, ecbp, playerStatusInfo, labelledSurfaces, oldTouchingDatum, slidingAgainst, squashed, final, recursionCounter) {\n    let output;\n    if (recursionCounter > maxRecursion) {\n        console.log(\"'runSlideRoutine': excessive recursion, aborting.\");\n        (0, drawECB_1.drawECB)(srcECB, \"#286ee0\");\n        (0, drawECB_1.drawECB)(tgtECB, \"#f49930\");\n        (0, drawECB_1.drawECB)(ecbp, \"#fff9ad\");\n        output = { ecb: srcECB, touching: null, squashed: squashed };\n    }\n    else {\n        const slideDatum = slideECB(srcECB, tgtECB, labelledSurfaces, slidingAgainst, playerStatusInfo);\n        let newECBp = ecbp;\n        if (slideDatum.event === \"end\") {\n            output = { ecb: slideDatum.finalECB, touching: slideDatum.touching, squashed: squashed };\n        }\n        else if (slideDatum.event === \"continue\") {\n            if (final) {\n                output = { ecb: tgtECB, touching: oldTouchingDatum, squashed: squashed };\n            }\n            else {\n                newECBp = updateECBp(srcECB, tgtECB, ecbp, slidingAgainst.type, 0);\n                output = runSlideRoutine(tgtECB, newECBp, newECBp, playerStatusInfo, labelledSurfaces, oldTouchingDatum, slidingAgainst, squashed, true, recursionCounter + 1);\n            }\n        }\n        else { // slideDatum.event === \"transfer\" || slideDatum.event === \"squash\"\n            const newSrcECB = slideDatum.midECB;\n            const slideObject = slideDatum.object;\n            let newTouchingDatum;\n            let angular;\n            let newFinal;\n            let newTgtECB;\n            let newSlidingType = null;\n            let same;\n            let other;\n            if (slideObject.kind === \"surface\") {\n                const surface = slideObject.surface;\n                const surfaceType = slideObject.type;\n                if (surfaceType === \"l\" || surfaceType === \"r\" || surfaceType === \"c\") {\n                    newSlidingType = surfaceType;\n                }\n                same = surfaceType === \"l\" ? 1 : 3;\n                angular = slideObject.pt;\n                newECBp = updateECBp(srcECB, slideDatum.midECB, ecbp, newSlidingType, same);\n                newTouchingDatum = { kind: \"surface\", type: surfaceType, index: slideObject.index, pt: angular };\n                [newTgtECB, newFinal] = findNextTargetFromSurface(newSrcECB, newECBp, surface, surfaceType, angular);\n            }\n            else {\n                const corner = slideObject.corner;\n                angular = slideObject.angular;\n                if (angular < 2 && angular > 0) {\n                    newSlidingType = \"l\";\n                }\n                else if (angular > 2) {\n                    newSlidingType = \"r\";\n                }\n                [same, other] = getSameAndOther(angular);\n                newECBp = updateECBp(srcECB, slideDatum.midECB, ecbp, newSlidingType, same);\n                [newTgtECB, newFinal] = findNextTargetFromCorner(newSrcECB, newECBp, corner, angular);\n                newTouchingDatum = { kind: \"corner\", angular: angular };\n            }\n            if (slideDatum.event === \"transfer\") {\n                output = runSlideRoutine(newSrcECB, newTgtECB, newECBp, playerStatusInfo, labelledSurfaces, newTouchingDatum, {\n                    type: newSlidingType,\n                    angular: angular\n                }, squashed, newFinal, recursionCounter + 1);\n            }\n            else {\n                const otherTgtECB = slideDatum.tgtECB;\n                const [squashTgtECB, abort] = agreeOnTargetECB(newSrcECB, otherTgtECB, newTgtECB, newECBp, same, playerStatusInfo.grounded);\n                if (abort) {\n                    output = { ecb: srcECB, touching: oldTouchingDatum, squashed: squashed };\n                }\n                else {\n                    output = runSlideRoutine(newSrcECB, squashTgtECB, newECBp, playerStatusInfo, labelledSurfaces, newTouchingDatum, {\n                        type: newSlidingType,\n                        angular: angular\n                    }, true, newFinal && final, recursionCounter + 1);\n                }\n            }\n        }\n    }\n    return output;\n}\n;\n// this function figures out if we can move the ECB, from the source ECB to the target ECB\nfunction slideECB(srcECB, tgtECB, labelledSurfaces, slidingAgainst, playerStatusInfo) {\n    let output;\n    // figure our whether a collision occured while moving srcECB -> tgtECB\n    const touchingDatum = findClosestCollision(srcECB, tgtECB, labelledSurfaces);\n    if (touchingDatum === null) {\n        //console.log(\"'slideECB': sliding.\");\n        output = { event: \"continue\" };\n    }\n    else {\n        const s = touchingDatum.sweep;\n        const r = Math.max(0, s - exports.additionalOffset / 10); // to account for floating point errors\n        const midECB = (0, ecbTransform_1.interpolateECB)(srcECB, tgtECB, r);\n        const collisionObject = touchingDatum.object;\n        // ------------------------------------------------------------------------------------------------------------------------------\n        // damaging objects cause premature end to sliding\n        let damageType = null;\n        if (!playerStatusInfo.immune) {\n            if (collisionObject.kind === \"surface\") {\n                const surfaceProperties = collisionObject.surface[2];\n                if (surfaceProperties !== null && surfaceProperties !== undefined) {\n                    damageType = surfaceProperties.damageType;\n                }\n            }\n            else if (collisionObject.kind === \"corner\") {\n                damageType = collisionObject.damageType;\n            }\n        }\n        if (damageType !== null && damageType !== undefined) {\n            if (collisionObject.kind === \"surface\") {\n                //console.log(\"'slideECB': sliding interrupted by collision with damaging surface.\");\n                output = {\n                    event: \"end\",\n                    finalECB: midECB,\n                    touching: {\n                        kind: \"surface\",\n                        type: collisionObject.type,\n                        index: collisionObject.index,\n                        pt: collisionObject.pt,\n                        damageType: damageType\n                    }\n                };\n            }\n            else {\n                //console.log(\"'slideECB': sliding interrupted by collision with damaging corner.\");\n                output = {\n                    event: \"end\",\n                    finalECB: midECB,\n                    touching: {\n                        kind: \"corner\",\n                        angular: collisionObject.angular,\n                        damageType: damageType\n                    }\n                };\n            }\n        }\n        // ------------------------------------------------------------------------------------------------------------------------------\n        else if (slidingAgainst.type === null) {\n            if (collisionObject.kind === \"surface\") {\n                if (collisionObject.type === \"g\" || collisionObject.type === \"p\") {\n                    //console.log(\"'slideECB': sliding interrupted by landing.\");\n                    output = {\n                        event: \"end\",\n                        finalECB: midECB,\n                        touching: {\n                            kind: \"surface\",\n                            type: collisionObject.type,\n                            index: collisionObject.index,\n                            pt: collisionObject.pt\n                        }\n                    };\n                }\n                else {\n                    //console.log(\"'slideECB': beginning slide on surface.\");\n                    output = {\n                        event: \"transfer\",\n                        midECB: midECB,\n                        object: {\n                            kind: \"surface\",\n                            surface: collisionObject.surface,\n                            type: collisionObject.type,\n                            pt: collisionObject.pt,\n                            index: collisionObject.index\n                        }\n                    };\n                }\n            }\n            else {\n                //console.log(\"'slideECB': beginning slide on corner.\");\n                output = {\n                    event: \"transfer\",\n                    midECB: midECB,\n                    object: {\n                        kind: \"corner\",\n                        corner: collisionObject.corner,\n                        angular: collisionObject.angular\n                    }\n                };\n            }\n        }\n        else {\n            const slidingType = slidingAgainst.type;\n            if (collisionObject.kind === \"surface\") {\n                const surfaceType = collisionObject.type;\n                if (surfaceType === slidingType) {\n                    //console.log(\"'slideECB': transferring slide to new surface.\");\n                    output = {\n                        event: \"transfer\",\n                        midECB: midECB,\n                        object: {\n                            kind: \"surface\",\n                            surface: collisionObject.surface,\n                            type: collisionObject.type,\n                            pt: collisionObject.pt,\n                            index: collisionObject.index\n                        }\n                    };\n                }\n                else if (slidingType === \"c\" || surfaceType === \"c\" || surfaceType === \"g\" || surfaceType === \"p\") {\n                    // no way to continue when one of the involved surfaces is a ceiling or a ground\n                    //console.log(\"'slideECB': interrupting sliding because of conflicting surface collision.\");\n                    output = {\n                        event: \"end\",\n                        finalECB: midECB,\n                        touching: {\n                            kind: \"surface\",\n                            type: collisionObject.type,\n                            index: collisionObject.index,\n                            pt: collisionObject.pt\n                        }\n                    };\n                }\n                else {\n                    //console.log(\"'slideECB': beginning ECB squashing because of conflicting horizontal surface pushout.\");\n                    output = {\n                        event: \"squash\",\n                        midECB: midECB,\n                        tgtECB: tgtECB,\n                        object: collisionObject,\n                        pt: collisionObject.pt\n                    };\n                }\n            }\n            else {\n                const angularParameter = collisionObject.angular;\n                const side = getSameAndOther(angularParameter)[0];\n                if (slidingType === \"c\") {\n                    //console.log(\"'slideECB': interrupting sliding because of conflicting corner collision.\");\n                    output = {\n                        event: \"end\",\n                        finalECB: midECB,\n                        touching: {\n                            kind: \"corner\",\n                            angular: angularParameter\n                        }\n                    };\n                }\n                else if (slidingType === null\n                    || (side === 3 && slidingType === \"r\")\n                    || (side === 1 && slidingType === \"l\")) {\n                    //console.log(\"'slideECB': transferring slide to new corner.\");\n                    output = {\n                        event: \"transfer\",\n                        midECB: midECB, object: {\n                            kind: \"corner\",\n                            corner: collisionObject.corner,\n                            angular: angularParameter\n                        }\n                    };\n                }\n                else {\n                    //console.log(\"'slideECB': beginning ECB squashing because of conflicting horizontal corner pushout.\");\n                    output = {\n                        event: \"squash\",\n                        midECB: midECB,\n                        tgtECB: tgtECB,\n                        side: side,\n                        object: collisionObject\n                    };\n                }\n            }\n        }\n    }\n    return output;\n}\n;\nfunction findNextTargetFromSurface(srcECB, ecbp, wall, wallType, pt) {\n    let wallForward;\n    let s = 1;\n    let tgtECB = ecbp;\n    let pushout = 0;\n    let final = true;\n    const sign = (wallType === \"l\" || wallType === \"c\") ? -1 : 1;\n    const additionalPushout = sign * exports.additionalOffset;\n    const xOrY = (wallType === \"l\" || wallType === \"r\") ? \"x\" : \"y\";\n    if (wallType === \"c\") {\n        const wallLeft = (0, extremePoint_1.extremePoint)(wall, \"l\");\n        const wallRight = (0, extremePoint_1.extremePoint)(wall, \"r\");\n        if (ecbp[pt].x <= wallRight.x && ecbp[pt].x >= wallLeft.x) {\n            const intercept = coordinateIntercept(vLineThrough(ecbp[pt]), wall);\n            pushout = intercept.y - ecbp[pt].y;\n        }\n        else {\n            wallForward = ecbp[pt].x < srcECB[pt].x ? wallLeft : wallRight;\n            s = (wallForward.x - srcECB[pt].x) / (ecbp[pt].x - srcECB[pt].x);\n            s = Math.min(Math.max(s, 0), 1);\n            tgtECB = (0, ecbTransform_1.interpolateECB)(srcECB, ecbp, s);\n            pushout = wallForward.y - tgtECB[pt].y;\n        }\n    }\n    else {\n        const wallBottom = (0, extremePoint_1.extremePoint)(wall, \"b\");\n        const wallTop = (0, extremePoint_1.extremePoint)(wall, \"t\");\n        if (ecbp[pt].y <= wallTop.y && ecbp[pt].y >= wallBottom.y) {\n            const intercept = coordinateIntercept(hLineThrough(ecbp[pt]), wall);\n            pushout = intercept.x - ecbp[pt].x;\n        }\n        else {\n            wallForward = ecbp[pt].y < srcECB[pt].y ? wallBottom : wallTop;\n            s = (wallForward.y - srcECB[pt].y) / (ecbp[pt].y - srcECB[pt].y);\n            s = Math.min(Math.max(s, 0), 1);\n            tgtECB = (0, ecbTransform_1.interpolateECB)(srcECB, ecbp, s);\n            pushout = wallForward.x - tgtECB[pt].x;\n        }\n    }\n    if (s < 1 || sign * pushout < 0) {\n        final = false;\n    }\n    tgtECB = (0, ecbTransform_1.moveECB)(tgtECB, (0, Vec2D_1.putXOrYCoord)(pushout + additionalPushout, xOrY));\n    (0, drawECB_1.drawECB)(ecbp, \"#8f54ff\");\n    (0, drawECB_1.drawECB)(tgtECB, \"#35f4ab\");\n    return [tgtECB, final];\n}\n;\nfunction findNextTargetFromCorner(srcECB, ecbp, corner, angularParameter) {\n    const [same, other] = getSameAndOther(angularParameter);\n    const LRSign = (same === 1) ? -1 : 1;\n    const UDSign = (other === 2) ? -1 : 1;\n    const additionalPushout = LRSign * exports.additionalOffset;\n    let tgtECB = ecbp;\n    let s = 1;\n    let pushout = 0;\n    let final = true;\n    if (UDSign * ecbp[same].y < UDSign * corner.y) {\n        s = (corner.y - srcECB[same].y) / (ecbp[same].y - srcECB[same].y);\n        s = Math.min(Math.max(s, 0), 1);\n        tgtECB = (0, ecbTransform_1.interpolateECB)(srcECB, ecbp, s);\n        pushout = corner.x - tgtECB[same].x;\n    }\n    else if (UDSign * ecbp[other].y < UDSign * corner.y) {\n        const intercept = coordinateIntercept(hLineThrough(corner), [ecbp[same], ecbp[other]]);\n        pushout = corner.x - intercept.x + additionalPushout;\n    }\n    else {\n        s = (corner.y - srcECB[other].y) / (ecbp[other].y - srcECB[other].y);\n        s = Math.min(Math.max(s, 0), 1);\n        tgtECB = (0, ecbTransform_1.interpolateECB)(srcECB, ecbp, s);\n        pushout = corner.x - tgtECB[other].x;\n    }\n    if (s < 1 || LRSign * pushout < 0) {\n        final = false;\n    }\n    tgtECB = (0, ecbTransform_1.moveECB)(tgtECB, (0, Vec2D_1.putXOrYCoord)(pushout + additionalPushout, \"x\"));\n    (0, drawECB_1.drawECB)(ecbp, \"#1098c9\");\n    (0, drawECB_1.drawECB)(tgtECB, \"#5cbc12\");\n    return [tgtECB, final];\n}\n;\nfunction updateECBp(startECB, endECB, ecbp, slidingType, pt) {\n    if (slidingType === null) {\n        return ecbp;\n    }\n    else {\n        let xOrY = (slidingType === \"l\" || slidingType === \"r\") ? \"y\" : \"x\";\n        let t;\n        if ((0, Vec2D_1.getXOrYCoord)(ecbp[pt], xOrY) - (0, Vec2D_1.getXOrYCoord)(startECB[pt], xOrY) === 0) {\n            xOrY = xOrY === \"x\" ? \"y\" : \"x\";\n            if ((0, Vec2D_1.getXOrYCoord)(ecbp[pt], xOrY) - (0, Vec2D_1.getXOrYCoord)(startECB[pt], xOrY) === 0) {\n                t = 1;\n            }\n            else {\n                t = ((0, Vec2D_1.getXOrYCoord)(endECB[pt], xOrY) - (0, Vec2D_1.getXOrYCoord)(startECB[pt], xOrY))\n                    / ((0, Vec2D_1.getXOrYCoord)(ecbp[pt], xOrY) - (0, Vec2D_1.getXOrYCoord)(startECB[pt], xOrY));\n            }\n        }\n        else {\n            t = ((0, Vec2D_1.getXOrYCoord)(endECB[pt], xOrY) - (0, Vec2D_1.getXOrYCoord)(startECB[pt], xOrY))\n                / ((0, Vec2D_1.getXOrYCoord)(ecbp[pt], xOrY) - (0, Vec2D_1.getXOrYCoord)(startECB[pt], xOrY));\n        }\n        let midECB;\n        if (t <= 0) {\n            midECB = startECB;\n        }\n        else if (t >= 1) {\n            midECB = ecbp;\n        }\n        else {\n            midECB = (0, ecbTransform_1.interpolateECB)(startECB, ecbp, t);\n        }\n        return [(0, linAlg_1.add)(ecbp[0], (0, linAlg_1.subtract)(endECB[0], midECB[0])),\n            (0, linAlg_1.add)(ecbp[1], (0, linAlg_1.subtract)(endECB[1], midECB[1])),\n            (0, linAlg_1.add)(ecbp[2], (0, linAlg_1.subtract)(endECB[2], midECB[2])),\n            (0, linAlg_1.add)(ecbp[3], (0, linAlg_1.subtract)(endECB[3], midECB[3]))\n        ];\n    }\n}\n;\n// this function gets called when two walls (or corners) are trying to push horizontally in opposite directions\n// this function computes a squashed ECB that will fit in between the two objects that are squeezing it\nfunction agreeOnTargetECB(srcECB, fstTgtECB, sndTgtECB, ecbp, pt, grounded) {\n    let output;\n    const flipPt = pt === 1 ? 3 : 1;\n    const [closestTgtECB, furthestTgtECB, same] = (Math.abs(fstTgtECB[pt].y - srcECB[pt].y) < Math.abs(sndTgtECB[flipPt].y - srcECB[flipPt].y))\n        ? ([fstTgtECB, sndTgtECB, pt])\n        : ([sndTgtECB, fstTgtECB, flipPt]);\n    const diff = same === 1 ? 3 : 1;\n    let otherTgtECB;\n    if (furthestTgtECB[diff].y === srcECB[diff].y) {\n        otherTgtECB = furthestTgtECB;\n    }\n    else {\n        const t = (closestTgtECB[same].y - srcECB[same].y) / (furthestTgtECB[diff].y - srcECB[diff].y);\n        if (t <= 0) {\n            otherTgtECB = srcECB;\n        }\n        else if (t >= 1) {\n            otherTgtECB = furthestTgtECB;\n        }\n        else {\n            otherTgtECB = (0, ecbTransform_1.interpolateECB)(srcECB, furthestTgtECB, t);\n        }\n    }\n    const tgtECB = [new Vec2D_1.Vec2D(0, 0), new Vec2D_1.Vec2D(0, 0), new Vec2D_1.Vec2D(0, 0), new Vec2D_1.Vec2D(0, 0)]; // initialising\n    let abort;\n    let squashFactor = 1;\n    const sign = Math.sign(closestTgtECB[same].x - closestTgtECB[diff].x);\n    // ideally we would now squash the ECB, so that it has side points otherTgtECB[same] and closestTgtECB[diff]\n    // however we can't do that if these points are too close together, or, even worse, have moved past eachother\n    if (Math.abs(otherTgtECB[same].x - closestTgtECB[diff].x) > exports.smallestECBWidth\n        && Math.sign(otherTgtECB[same].x - closestTgtECB[diff].x) === sign) {\n        if (Math.abs(otherTgtECB[same].x - closestTgtECB[diff].x) > Math.abs(closestTgtECB[same].x - closestTgtECB[diff].x)) {\n            abort = false;\n            console.log(\"'agreeOnTargetECB' warning: function called when no squashing was required.\");\n            output = [closestTgtECB, abort];\n        }\n        else {\n            abort = false;\n            squashFactor = (otherTgtECB[same].x - closestTgtECB[diff].x) / (closestTgtECB[same].x - closestTgtECB[diff].x);\n            tgtECB[same] = new Vec2D_1.Vec2D(otherTgtECB[same].x - sign * exports.additionalOffset, otherTgtECB[same].y);\n            tgtECB[diff] = new Vec2D_1.Vec2D(closestTgtECB[diff].x + sign * exports.additionalOffset, closestTgtECB[diff].y);\n            tgtECB[2].y = tgtECB[same].y + squashFactor * (closestTgtECB[2].y - closestTgtECB[same].y);\n            tgtECB[0].y = grounded ? srcECB[0].y : tgtECB[same].y + squashFactor * (closestTgtECB[0].y - closestTgtECB[same].y);\n            tgtECB[2].x = (tgtECB[1].x + tgtECB[3].x) / 2;\n            tgtECB[0].x = (tgtECB[1].x + tgtECB[3].x) / 2;\n            output = [tgtECB, abort];\n        }\n    }\n    else {\n        // can't directly squash, so we need to find the closest allowable height\n        const sameLine = [srcECB[same], otherTgtECB[same]];\n        const diffLine = [srcECB[diff], closestTgtECB[diff]];\n        const offsetDiffLine = [(0, linAlg_1.add)(diffLine[0], new Vec2D_1.Vec2D(sign * exports.smallestECBWidth, 0)),\n            (0, linAlg_1.add)(diffLine[1], new Vec2D_1.Vec2D(sign * exports.smallestECBWidth, 0))];\n        const intercept = coordinateIntercept(sameLine, offsetDiffLine);\n        if (Math.abs(closestTgtECB[same].y - srcECB[same].y) >= Math.abs(intercept.y - srcECB[same].y)) {\n            abort = true;\n            tgtECB[same] = new Vec2D_1.Vec2D(intercept.x + sign * exports.additionalOffset, intercept.y);\n            tgtECB[diff] = new Vec2D_1.Vec2D(intercept.x - sign * exports.smallestECBWidth - sign * exports.additionalOffset, intercept.y);\n            squashFactor = (tgtECB[same].x - tgtECB[diff].x) / (closestTgtECB[same].x - closestTgtECB[diff].x);\n            tgtECB[2].y = tgtECB[same].y + squashFactor * (closestTgtECB[2].y - closestTgtECB[same].y);\n            tgtECB[0].y = grounded ? srcECB[0].y : tgtECB[same].y + squashFactor * (closestTgtECB[0].y - closestTgtECB[same].y);\n            tgtECB[2].x = (tgtECB[1].x + tgtECB[3].x) / 2;\n            tgtECB[0].x = (tgtECB[1].x + tgtECB[3].x) / 2;\n            output = [tgtECB, abort];\n        }\n        else {\n            abort = false;\n            squashFactor = (otherTgtECB[same].x - closestTgtECB[diff].x - 2 * sign * exports.additionalOffset) / (closestTgtECB[same].x - closestTgtECB[diff].x);\n            if (squashFactor >= 1) {\n                output = [closestTgtECB, abort];\n            }\n            else {\n                tgtECB[same] = new Vec2D_1.Vec2D(otherTgtECB[same].x - sign * exports.additionalOffset, otherTgtECB[same].y);\n                tgtECB[diff] = new Vec2D_1.Vec2D(closestTgtECB[diff].x + sign * exports.additionalOffset, closestTgtECB[diff].y);\n                tgtECB[2].y = tgtECB[same].y + squashFactor * (closestTgtECB[2].y - closestTgtECB[same].y);\n                tgtECB[0].y = grounded ? srcECB[0].y : tgtECB[same].y + squashFactor * (closestTgtECB[0].y - closestTgtECB[same].y);\n                tgtECB[2].x = (tgtECB[1].x + tgtECB[3].x) / 2;\n                tgtECB[0].x = (tgtECB[1].x + tgtECB[3].x) / 2;\n                output = [tgtECB, abort];\n            }\n        }\n    }\n    (0, drawECB_1.drawECB)(tgtECB, \"#f9482c\");\n    return output;\n}\n// ----------------------------------------------------------------------------------------------------------------------------------\n// convert between angular parameters and \"same/other\" data\nfunction getAngularParameter(t, same, other) {\n    if (same === 3 && other === 0) {\n        return ((1 - t) * 3 + t * 4);\n    }\n    else if (same === 0 && other === 3) {\n        return ((1 - t) * 4 + t * 3);\n    }\n    else {\n        return ((1 - t) * same + t * other);\n    }\n}\n;\nfunction getSameAndOther(a) {\n    if (a < 1) {\n        return [1, 0];\n    }\n    else if (a < 2) {\n        return [1, 2];\n    }\n    else if (a < 3) {\n        return [3, 2];\n    }\n    else {\n        return [3, 0];\n    }\n}\n;\n// ----------------------------------------------------------------------------------------------------------------------------------\n// function to check whether grounded movement is permissible (no low ceilings)\nfunction moveAlongGround(pos, posNext, ecbHeight, ground, ceilings) {\n    if (pos.x === posNext.x) {\n        return null;\n    }\n    else {\n        const dir = posNext.x < pos.x ? \"l\" : \"r\";\n        const groundLeft = (0, extremePoint_1.extremePoint)(ground, \"l\");\n        const groundRight = (0, extremePoint_1.extremePoint)(ground, \"r\");\n        if ((dir === \"l\" && pos.x < groundLeft.x)\n            || (dir === \"r\" && pos.x > groundRight.x)) {\n            return null;\n        }\n        else {\n            const start = dir === \"l\" ? Math.min(pos.x, groundRight.x) : Math.max(pos.x, groundLeft.x);\n            const end = dir === \"l\" ? Math.max(posNext.x, groundLeft.x) : Math.min(posNext.x, groundRight.x);\n            const groundStart = coordinateIntercept(ground, vLineAt(start));\n            const groundEnd = coordinateIntercept(ground, vLineAt(end));\n            let startECB = (0, ecbTransform_1.makeECB)(groundStart, exports.additionalOffset, exports.smallestECBHeight);\n            let endECB = (0, ecbTransform_1.makeECB)(groundEnd, exports.additionalOffset, exports.smallestECBHeight);\n            const labelledCeilings = (0, zipLabels_1.zipLabels)(ceilings, \"c\"); // should not recalculate this every time...\n            let firstCeilingCollision = findClosestCollision(startECB, endECB, labelledCeilings);\n            if (firstCeilingCollision === null) {\n                if (ecbHeight > exports.smallestECBHeight) {\n                    return null;\n                }\n                else {\n                    // do a second collision check, in case the player squeezed themselves into a location they should not have\n                    startECB = (0, ecbTransform_1.makeECB)(groundStart, exports.additionalOffset / 10, ecbHeight);\n                    endECB = (0, ecbTransform_1.makeECB)(groundEnd, exports.additionalOffset / 10, ecbHeight);\n                    firstCeilingCollision = findClosestCollision(startECB, endECB, labelledCeilings);\n                    if (firstCeilingCollision === null || firstCeilingCollision.object.kind === \"corner\") {\n                        return null;\n                    }\n                    else {\n                        const ceiling = firstCeilingCollision.object.surface;\n                        // find where to reposition the player by intersecting the offset ground with the ceiling\n                        const intercept = coordinateIntercept(ceiling, [(0, linAlg_1.add)(groundStart, new Vec2D_1.Vec2D(0, exports.smallestECBHeight)), (0, linAlg_1.add)(groundEnd, new Vec2D_1.Vec2D(0, exports.smallestECBHeight))]);\n                        /*\n                         if ((dir === \"l\" && intercept.x > pos.x) || (dir === \"r\" && intercept.x < pos.x)) {\n                         return pos.x;\n                         }\n                         else {\n                         return intercept.x;\n                         }\n                         */\n                        return intercept.x + (dir === \"l\" ? exports.additionalOffset : -exports.additionalOffset);\n                    }\n                }\n            }\n            else {\n                const s = firstCeilingCollision.sweep;\n                return (1 - s) * pos.x + s * posNext.x + (dir === \"l\" ? exports.additionalOffset : -exports.additionalOffset);\n            }\n        }\n    }\n}\n// ----------------------------------------------------------------------------------------------------------------------------------\n// ECB squashing and re-inflating\n// finds the ECB squash factor for a grounded ECB\nfunction groundedECBSquashFactor(ecbTop, ecbBottom, ceilings) {\n    const ceilingYValues = ceilings.map((ceil) => {\n        if (ecbTop.x < (0, extremePoint_1.extremePoint)(ceil, \"l\").x || ecbTop.x > (0, extremePoint_1.extremePoint)(ceil, \"r\").x) {\n            return null;\n        }\n        else {\n            return coordinateIntercept([ecbBottom, ecbTop], ceil).y;\n        }\n    });\n    const lowestCeilingYValue = (0, findSmallestWithin_1.findSmallestWithin)(ceilingYValues, ecbBottom.y, ecbTop.y);\n    const offset = exports.additionalOffset / 10;\n    if (lowestCeilingYValue === null) {\n        return null;\n    }\n    else {\n        return (Math.max(offset, (lowestCeilingYValue - ecbBottom.y) / (ecbTop.y - ecbBottom.y) - offset));\n    }\n}\n;\n// finds the ECB squash factor by inflating the ECB from the point on the ECB given by the angular parameter t\n// if angular parameter is null, instead inflates the ECB from its center\nfunction inflateECB(ecb, t, focus, relevantSurfaces) {\n    const offset = exports.additionalOffset / 10;\n    const pointlikeECB = [new Vec2D_1.Vec2D(focus.x, focus.y - offset),\n        new Vec2D_1.Vec2D(focus.x + offset, focus.y),\n        new Vec2D_1.Vec2D(focus.x, focus.y + offset),\n        new Vec2D_1.Vec2D(focus.x - offset, focus.y)\n    ];\n    const closestCollision = findClosestCollision(pointlikeECB, ecb, relevantSurfaces);\n    if (closestCollision === null) {\n        return { location: t, factor: 1 };\n    }\n    else {\n        const newLocation = t === null\n            ? closestCollision.object.kind === \"surface\"\n                ? closestCollision.object.pt\n                : closestCollision.object.angular\n            : t;\n        return { location: newLocation, factor: Math.max(exports.additionalOffset, closestCollision.sweep - exports.additionalOffset) }; // ECB angular parameter, sweeping parameter\n    }\n}\nfunction reinflateECB(ecb, position, relevantSurfaces, oldecbSquashDatum, grounded) {\n    let q = 1;\n    const angularParameter = oldecbSquashDatum.location;\n    if (oldecbSquashDatum.factor < 1) {\n        q = 1 / oldecbSquashDatum.factor + exports.additionalOffset / 20;\n        const focus = (0, ecbTransform_1.ecbFocusFromAngularParameter)(ecb, angularParameter);\n        const fullsizeecb = [new Vec2D_1.Vec2D(q * ecb[0].x + (1 - q) * focus.x, q * ecb[0].y + (1 - q) * focus.y),\n            new Vec2D_1.Vec2D(q * ecb[1].x + (1 - q) * focus.x, q * ecb[1].y + (1 - q) * focus.y),\n            new Vec2D_1.Vec2D(q * ecb[2].x + (1 - q) * focus.x, q * ecb[2].y + (1 - q) * focus.y),\n            new Vec2D_1.Vec2D(q * ecb[3].x + (1 - q) * focus.x, q * ecb[3].y + (1 - q) * focus.y)\n        ];\n        const ecbSquashDatum = inflateECB(fullsizeecb, angularParameter, focus, relevantSurfaces);\n        const squashedecb = (0, ecbTransform_1.squashECBAt)(fullsizeecb, { factor: ecbSquashDatum.factor, location: angularParameter });\n        const newPosition = new Vec2D_1.Vec2D(position.x + squashedecb[0].x - ecb[0].x, grounded ? position.y : position.y + squashedecb[0].y - ecb[0].y);\n        const newAngular = ecbSquashDatum.location;\n        (0, drawECB_1.drawECB)(squashedecb, \"#ffff00\");\n        return [newPosition, ecbSquashDatum, squashedecb];\n    }\n    else {\n        return [position, { location: angularParameter, factor: 1 }, ecb];\n    }\n}\n;\n// recall: type PlayerStatusInfo = { grounded :boolean, ignoringPlatforms :boolean, immune :boolean };\n// this function initialises necessary data and then calls the main collision routine loop\nfunction runCollisionRoutine(ecb1, ecbp, position, ecbSquashDatum, playerStatusInfo, stage) {\n    // --------------------------------------------------------------\n    // BELOW: this is recomputed every frame and should be avoided\n    const stageWalls = (0, zipLabels_1.zipLabels)(stage.wallL, \"l\").concat((0, zipLabels_1.zipLabels)(stage.wallR, \"r\"));\n    const stageGrounds = (0, zipLabels_1.zipLabels)(stage.ground, \"g\");\n    const stageCeilings = (0, zipLabels_1.zipLabels)(stage.ceiling, \"c\");\n    const stagePlatforms = (0, zipLabels_1.zipLabels)(stage.platform, \"p\");\n    // ABOVE: this is recomputed every frame and should be avoided\n    // --------------------------------------------------------------\n    const grounded = playerStatusInfo.grounded;\n    let horizIgnore = \"none\"; // ignore no horizontal surfaces by default\n    if (grounded) {\n        horizIgnore = \"all\"; // ignore all horizontal surfaces when grounded\n    }\n    else {\n        horizIgnore = playerStatusInfo.ignoringPlatforms ? \"platforms\" : \"none\";\n    }\n    const allSurfacesMinusPlatforms = stageWalls.concat(stageGrounds).concat(stageCeilings);\n    let relevantSurfaces = [];\n    switch (horizIgnore) {\n        case \"platforms\":\n            relevantSurfaces = stageWalls.concat(stageGrounds).concat(stageCeilings);\n            break;\n        case \"none\":\n        default:\n            relevantSurfaces = stageWalls.concat(stageGrounds).concat(stageCeilings).concat(stagePlatforms);\n            break;\n        case \"all\":\n            relevantSurfaces = stageWalls;\n            break;\n    }\n    const resolution = resolveECB(ecb1, ecbp, playerStatusInfo, relevantSurfaces);\n    const newTouching = resolution.touching;\n    let newECBp = resolution.ecb;\n    const newSquashFactor = resolution.squashed ? Math.min(1, (newECBp[1].x - newECBp[3].x) / (ecbp[1].x - ecbp[3].x))\n        : 1;\n    let newSquashLocation = null;\n    if (newTouching !== null) {\n        if (newTouching.kind === \"surface\") {\n            newSquashLocation = newTouching.pt;\n        }\n        else {\n            newSquashLocation = newTouching.angular;\n        }\n    }\n    let newSquashDatum = { location: newSquashLocation, factor: newSquashFactor };\n    newSquashDatum.factor *= ecbSquashDatum.factor;\n    let newPosition = (0, linAlg_1.subtract)((0, linAlg_1.add)(position, newECBp[0]), ecbp[0]);\n    if (newSquashDatum.factor < 1) {\n        let squashingLocation = null;\n        if (grounded) {\n            squashingLocation = 0;\n        }\n        [newPosition,\n            newSquashDatum,\n            newECBp] = reinflateECB(newECBp, newPosition, allSurfacesMinusPlatforms, { factor: newSquashDatum.factor, location: squashingLocation }, grounded);\n        if (!grounded && newSquashDatum.factor < 1) {\n            // reinflate a second time if it might help\n            [newPosition,\n                newSquashDatum,\n                newECBp] = reinflateECB(newECBp, newPosition, allSurfacesMinusPlatforms, newSquashDatum, false);\n        }\n    }\n    return { position: newPosition, touching: newTouching, squashDatum: newSquashDatum, ecb: newECBp };\n}\n;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/physics/environmentalCollision.ts\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("1ae217c0cc663eae90db")
/******/ })();
/******/ 
/******/ }
);