"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdatemeleelight"]("main",{

/***/ "./src/physics/article.ts":
/*!********************************!*\
  !*** ./src/physics/article.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.articles = exports.articleHitQueue = exports.destroyArticleQueue = exports.aArticles = void 0;\nexports.resetAArticles = resetAArticles;\nexports.executeArticles = executeArticles;\nexports.destroyArticles = destroyArticles;\nexports.renderArticles = renderArticles;\nexports.articlesHitDetection = articlesHitDetection;\nexports.executeArticleHits = executeArticleHits;\nexports.wallDetection = wallDetection;\nexports.articleHitCollision = articleHitCollision;\nexports.articleShieldCollision = articleShieldCollision;\nexports.interpolatedArticleCircleCollision = interpolatedArticleCircleCollision;\nexports.interpolatedArticleHurtCollision = interpolatedArticleHurtCollision;\nexports.articleHurtCollision = articleHurtCollision;\nconst main_1 = __webpack_require__(/*! main/main */ \"./src/main/main.ts\");\nconst render_1 = __webpack_require__(/*! main/render */ \"./src/main/render.ts\");\nconst sfx_1 = __webpack_require__(/*! main/sfx */ \"./src/main/sfx.ts\");\nconst hitDetection_1 = __webpack_require__(/*! physics/hitDetection */ \"./src/physics/hitDetection.ts\");\nconst environmentalCollision_1 = __webpack_require__(/*! ./environmentalCollision */ \"./src/physics/environmentalCollision.ts\");\nconst ecbTransform_1 = __webpack_require__(/*! ../main/util/ecbTransform */ \"./src/main/util/ecbTransform.ts\");\nconst findSmallestWithin_1 = __webpack_require__(/*! ../main/util/findSmallestWithin */ \"./src/main/util/findSmallestWithin.ts\");\nconst linAlg_1 = __webpack_require__(/*! ../main/linAlg */ \"./src/main/linAlg.ts\");\nconst actionStateShortcuts_1 = __webpack_require__(/*! physics/actionStateShortcuts */ \"./src/physics/actionStateShortcuts.ts\");\nconst drawVfx_1 = __webpack_require__(/*! main/vfx/drawVfx */ \"./src/main/vfx/drawVfx.js\");\nconst activeStage_1 = __webpack_require__(/*! stages/activeStage */ \"./src/stages/activeStage.ts\");\nconst createHitBox_1 = __webpack_require__(/*! ../main/util/createHitBox */ \"./src/main/util/createHitBox.ts\");\nconst Vec2D_1 = __webpack_require__(/*! ../main/util/Vec2D */ \"./src/main/util/Vec2D.ts\");\nconst laser_1 = __webpack_require__(/*! ../main/vfx/dVfx/laser */ \"./src/main/vfx/dVfx/laser.js\");\nconst chromaticAberration_1 = __webpack_require__(/*! ../main/vfx/chromaticAberration */ \"./src/main/vfx/chromaticAberration.js\");\nconst makeColour_1 = __webpack_require__(/*! ../main/vfx/makeColour */ \"./src/main/vfx/makeColour.js\");\nconst interpolatedCollision_1 = __webpack_require__(/*! ./interpolatedCollision */ \"./src/physics/interpolatedCollision.ts\");\n/* eslint-disable */\nexports.aArticles = [];\nexports.destroyArticleQueue = [];\nexports.articleHitQueue = [];\nfunction resetAArticles() {\n    exports.aArticles = [];\n}\n// 0.00390583333333333333333333333333 = hitbox size multiplier\nexports.articles = {\n    \"LASER\": {\n        name: \"LASER\",\n        canTurboCancel: false,\n        strokeStyle: \"\",\n        fillStyle: \"\",\n        init: function (options) {\n            const p = options.p;\n            const x = options.x;\n            const y = options.y;\n            const rotate = options.rotate;\n            const isFox = (options.isFox !== undefined) ? options.isFox : true;\n            const partOfThrow = options.partOfThrow || false;\n            this.strokeStyle = isFox ? \"rgba(255, 59, 59,0.6)\" : \"rgba(73,130,234,0.6)\";\n            this.fillStyle = isFox ? \"rgb(255, 193, 193)\" : \"rgb(225, 255, 255)\";\n            var obj = {\n                hitList: [],\n                rotate: rotate,\n                destroyOnHit: true,\n                clank: false,\n                timer: 0,\n                vel: new Vec2D_1.Vec2D((isFox ? 7 : 5) * Math.cos(rotate) * main_1.player[p].phys.face, (isFox ? 7 : 5) * Math.sin(rotate)),\n                pos: new Vec2D_1.Vec2D(main_1.player[p].phys.pos.x + (x * main_1.player[p].phys.face), main_1.player[p].phys.pos.y + y),\n                posPrev1: new Vec2D_1.Vec2D(main_1.player[p].phys.pos.x, main_1.player[p].phys.pos.y + y),\n                posPrev2: new Vec2D_1.Vec2D(main_1.player[p].phys.pos.x, main_1.player[p].phys.pos.y + y),\n                posPrev3: new Vec2D_1.Vec2D(main_1.player[p].phys.pos.x, main_1.player[p].phys.pos.y + y),\n                posPrev: new Vec2D_1.Vec2D(main_1.player[p].phys.pos.x, main_1.player[p].phys.pos.y + y),\n                hb: new createHitBox_1.createHitbox(new Vec2D_1.Vec2D(0, 0), 1.172, 3, 361, isFox ? 0 : partOfThrow ? 0 : 100, 0, isFox ? 0 : partOfThrow ? 0 : 5, 0, 0, 1, 1),\n                ecb: [new Vec2D_1.Vec2D(main_1.player[p].phys.pos.x + (x * main_1.player[p].phys.face), main_1.player[p].phys.pos.y + y - 0.01),\n                    new Vec2D_1.Vec2D(main_1.player[p].phys.pos.x + (x * main_1.player[p].phys.face) + 10, main_1.player[p].phys.pos.y + y),\n                    new Vec2D_1.Vec2D(main_1.player[p].phys.pos.x + (x * main_1.player[p].phys.face), main_1.player[p].phys.pos.y + y + 0.01),\n                    new Vec2D_1.Vec2D(main_1.player[p].phys.pos.x + (x * main_1.player[p].phys.face) - 10, main_1.player[p].phys.pos.y + y)]\n            };\n            exports.aArticles.push({\n                name: \"LASER\",\n                player: p,\n                instance: obj\n            });\n            exports.articles.LASER.main(exports.aArticles.length - 1);\n        },\n        main: function (i) {\n            exports.aArticles[i].instance.timer++;\n            if (exports.aArticles[i].instance.timer > 4) {\n                exports.aArticles[i].instance.posPrev.x = exports.aArticles[i].instance.posPrev3.x;\n                exports.aArticles[i].instance.posPrev.y = exports.aArticles[i].instance.posPrev3.y;\n            }\n            if (exports.aArticles[i].instance.timer > 3) {\n                exports.aArticles[i].instance.posPrev3.x = exports.aArticles[i].instance.posPrev2.x;\n                exports.aArticles[i].instance.posPrev3.y = exports.aArticles[i].instance.posPrev2.y;\n            }\n            if (exports.aArticles[i].instance.timer > 2) {\n                exports.aArticles[i].instance.posPrev2.x = exports.aArticles[i].instance.posPrev1.x;\n                exports.aArticles[i].instance.posPrev2.y = exports.aArticles[i].instance.posPrev1.y;\n            }\n            if (exports.aArticles[i].instance.timer > 1) {\n                exports.aArticles[i].instance.posPrev1.x = exports.aArticles[i].instance.pos.x;\n                exports.aArticles[i].instance.posPrev1.y = exports.aArticles[i].instance.pos.y;\n            }\n            exports.aArticles[i].instance.pos.x += exports.aArticles[i].instance.vel.x;\n            exports.aArticles[i].instance.ecb[0].x += exports.aArticles[i].instance.vel.x;\n            exports.aArticles[i].instance.ecb[1].x += exports.aArticles[i].instance.vel.x;\n            exports.aArticles[i].instance.ecb[2].x += exports.aArticles[i].instance.vel.x;\n            exports.aArticles[i].instance.ecb[3].x += exports.aArticles[i].instance.vel.x;\n            exports.aArticles[i].instance.pos.y += exports.aArticles[i].instance.vel.y;\n            exports.aArticles[i].instance.ecb[0].y += exports.aArticles[i].instance.vel.y;\n            exports.aArticles[i].instance.ecb[1].y += exports.aArticles[i].instance.vel.y;\n            exports.aArticles[i].instance.ecb[2].y += exports.aArticles[i].instance.vel.y;\n            exports.aArticles[i].instance.ecb[3].y += exports.aArticles[i].instance.vel.y;\n            if (wallDetection(i) || exports.aArticles[i].instance.timer > 200) {\n                exports.destroyArticleQueue.push(i);\n            }\n        },\n        draw: function (i) {\n            main_1.fg2.save();\n            var h = new Vec2D_1.Vec2D((exports.aArticles[i].instance.pos.x * activeStage_1.activeStage.scale) + activeStage_1.activeStage.offset[0], (exports.aArticles[i].instance.pos.y * -activeStage_1.activeStage.scale) +\n                activeStage_1.activeStage.offset[1]);\n            var t = new Vec2D_1.Vec2D((exports.aArticles[i].instance.posPrev.x * activeStage_1.activeStage.scale) + activeStage_1.activeStage.offset[0], (exports.aArticles[i].instance.posPrev.y * -activeStage_1.activeStage.scale) + activeStage_1.activeStage.offset[1]);\n            var d = (h.x > t.x) ? 1 : -1;\n            var r = exports.aArticles[i].instance.rotate;\n            var v1 = (0, render_1.rotateVector)(-4, 2, -r);\n            var v2 = (0, render_1.rotateVector)(4, 2, -r);\n            var v3 = (0, render_1.rotateVector)(4, -2, -r);\n            var v4 = (0, render_1.rotateVector)(-4, -2, -r);\n            (0, chromaticAberration_1.chromaticAberration)(main_1.fg2, (c1, c2) => (0, laser_1.drawLaserLine)(h, t, v1, v2, v3, v4, d, c1, c2), (0, makeColour_1.unmakeColour)(this.strokeStyle), (0, makeColour_1.unmakeColour)(this.fillStyle), 0.8, new Vec2D_1.Vec2D(-0.3 * Math.sin(r) * activeStage_1.activeStage.scale, -0.3 * Math.cos(r) * activeStage_1.activeStage.scale));\n            main_1.fg2.restore();\n        }\n    },\n    \"ILLUSION\": {\n        name: \"ILLUSION\",\n        noDraw: true,\n        canTurboCancel: true,\n        init: function (options) {\n            const p = options.p;\n            const type = options.type;\n            const isFox = options.isFox || true;\n            var obj = {\n                hitList: [],\n                destroyOnHit: false,\n                clank: true,\n                timer: 0,\n                pos: new Vec2D_1.Vec2D(main_1.player[p].phys.posPrev.x, main_1.player[p].phys.posPrev.y + 5),\n                posPrev: new Vec2D_1.Vec2D(main_1.player[p].phys.posPrev.x, main_1.player[p].phys.posPrev.y + 5),\n                hb: new createHitBox_1.createHitbox(new Vec2D_1.Vec2D(0, 0), 4.160, 7, isFox ? 80 : 270, isFox ? 60 : 70, isFox ? 68 : 70, 0, 1, 1, 1, 1),\n                ecb: [new Vec2D_1.Vec2D(main_1.player[p].phys.posPrev.x, main_1.player[p].phys.posPrev.y - 10), new Vec2D_1.Vec2D(main_1.player[p].phys.posPrev\n                        .x + 10, main_1.player[p].phys.posPrev.y), new Vec2D_1.Vec2D(main_1.player[p].phys.posPrev.x, main_1.player[p].phys.posPrev.y +\n                        10), new Vec2D_1.Vec2D(main_1.player[p].phys.posPrev.x - 10, main_1.player[p].phys.posPrev.y)]\n            };\n            // if ground\n            if (type) {\n                if (isFox) {\n                    obj.hb.kg = 40;\n                }\n                else {\n                    obj.hb.angle = 65;\n                    obj.hb.kg = 60;\n                    obj.hb.bk = 74;\n                }\n            }\n            exports.aArticles.push({\n                name: \"ILLUSION\",\n                player: p,\n                instance: obj\n            });\n            exports.articles.ILLUSION.main(exports.aArticles.length - 1);\n        },\n        main: function (i) {\n            var p = exports.aArticles[i].player;\n            exports.aArticles[i].instance.timer++;\n            exports.aArticles[i].instance.posPrev = new Vec2D_1.Vec2D(exports.aArticles[i].instance.pos.x, exports.aArticles[i].instance.pos.y);\n            exports.aArticles[i].instance.pos = new Vec2D_1.Vec2D(main_1.player[p].phys.posPrev.x, main_1.player[p].phys.posPrev.y);\n            exports.aArticles[i].instance.ecb = [new Vec2D_1.Vec2D(main_1.player[p].phys.posPrev.x, main_1.player[p].phys.posPrev.y - 10), new Vec2D_1.Vec2D(main_1.player[p]\n                    .phys.posPrev.x + 10, main_1.player[p].phys.posPrev.y), new Vec2D_1.Vec2D(main_1.player[p].phys.posPrev.x, main_1.player[p].phys.posPrev\n                    .y + 10), new Vec2D_1.Vec2D(main_1.player[p].phys.posPrev.x - 10, main_1.player[p].phys.posPrev.y)];\n            if (exports.aArticles[i].instance.timer > 5) {\n                exports.destroyArticleQueue.push(i);\n            }\n        }\n    }\n};\nfunction executeArticles() {\n    exports.destroyArticleQueue = [];\n    for (var i = 0; i < exports.aArticles.length; i++) {\n        exports.articles[exports.aArticles[i].name].main(i);\n    }\n}\nfunction destroyArticles() {\n    for (var k = 0; k < exports.destroyArticleQueue.length; k++) {\n        exports.aArticles.splice(exports.destroyArticleQueue[k] - k, 1);\n    }\n}\nfunction renderArticles() {\n    for (var i = 0; i < exports.aArticles.length; i++) {\n        if (!exports.articles[exports.aArticles[i].name].noDraw) {\n            exports.articles[exports.aArticles[i].name].draw(i);\n        }\n    }\n}\nfunction articlesHitDetection() {\n    exports.articleHitQueue = [];\n    for (var a = 0; a < exports.aArticles.length; a++) {\n        var articleDestroyed = false;\n        if (exports.aArticles[a].instance.timer > 1) {\n            var interpolate = true;\n        }\n        else {\n            var interpolate = false;\n        }\n        for (var v = 0; v < 4; v++) {\n            var inHitList = false;\n            for (var n = 0; n < 4; n++) {\n                if (v == exports.aArticles[a].instance.hitList[n]) {\n                    inHitList = true;\n                    break;\n                }\n            }\n            // if v isnt the owner, not destroyed and no in article's hitlist\n            if (v != exports.aArticles[a].player && !articleDestroyed && !inHitList && main_1.playerType[v] != -1) {\n                // if article is clankable\n                var attackerClank = false;\n                if (exports.aArticles[a].instance.clank) {\n                    for (var k = 0; k < 4; k++) {\n                        if (main_1.player[v].hitboxes.active[k] && (main_1.player[v].hitboxes.id[k].clank == 1 || (main_1.player[v].hitboxes.id[k].clank ==\n                            2 && main_1.player[v].phys.grounded))) {\n                            // ILL DO CLANKS TOMOZ\n                            /*var clankHit = articleHitCollision(a,v,k);\n                             if (clankHit[0]){\n  \n                             var diff = player[p].hitboxes.id[j].dmg - player[i].hitboxes.id[k].dmg;\n                             if (diff >= 9){\n                             // victim clank\n                             // attacker cut through\n                             player[i].hit.hitlag = Math.floor(player[p].hitboxes.id[j].dmg * (1/3) + 3);\n                             turnOffHitboxes(i);\n                             actionStates[characterSelections[i]][78].init(i);\n                             }\n                             else if (diff <= -9){\n                             // attacker clank\n                             // victim cut through\n                             player[p].hit.hitlag = Math.floor(player[i].hitboxes.id[k].dmg * (1/3) + 3);\n                             attackerClank = true;\n                             articleDestroyed = true;\n                             turnOffHitboxes(p);\n                             actionStates[characterSelections[p]][78].init(p,input);\n                             }\n                             else {\n                             // both clank\n                             player[i].hit.hitlag = Math.floor(player[p].hitboxes.id[j].dmg * (1/3) + 3);\n                             player[p].hit.hitlag = Math.floor(player[i].hitboxes.id[k].dmg * (1/3) + 3);\n                             attackerClank = true;\n                             articleDestroyed = true;\n                             turnOffHitboxes(i);\n                             actionStates[characterSelections[i]][78].init(i);\n                             turnOffHitboxes(p);\n                             actionStates[characterSelections[p]][78].init(p,input);\n                             }\n                             sounds.clank.play();\n                             drawVfx(\"clank\",clankHit[1]);\n                             player[p].hitboxes.hitList.push(i);\n                             break;\n                             }*/\n                        }\n                    }\n                }\n                if (!attackerClank) {\n                    var reflected = false;\n                    for (var i = 0; i < 4; i++) {\n                        if (main_1.player[v].hitboxes.active[i]) {\n                            if (main_1.player[v].hitboxes.id[i].type == 7) {\n                                if (articleHitCollision(a, v, i) || (interpolate && (articleHitCollision(a, v, i) ||\n                                    interpolatedArticleCircleCollision(a, new Vec2D_1.Vec2D(main_1.player[v].phys.pos.x + main_1.player[v].hitboxes.id[i]\n                                        .offset[0].x, main_1.player[v].phys.pos.y + main_1.player[v].hitboxes.id[i].offset[0].y), main_1.player[v].hitboxes\n                                        .id[i].size)))) {\n                                    if (main_1.player[v].actionState.substr(0, 11) == \"DOWNSPECIAL\") {\n                                        // do shine reflect animation\n                                        sfx_1.sounds.foxshinereflect.play();\n                                    }\n                                    // change ownership\n                                    exports.aArticles[a].player = v;\n                                    // increase damage\n                                    exports.aArticles[a].instance.hb.dmg *= 1.5;\n                                    // reflect\n                                    if (exports.aArticles[a].instance.vel != undefined || exports.aArticles[a].instance.vel != null) {\n                                        exports.aArticles[a].instance.vel.x *= -1;\n                                        exports.aArticles[a].instance.vel.y *= -1;\n                                    }\n                                    reflected = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (!reflected) {\n                        if (main_1.player[v].phys.shielding && (articleShieldCollision(a, v, false) || (interpolate && (articleShieldCollision(a, v, true) || interpolatedArticleCircleCollision(a, main_1.player[v].phys.shieldPositionReal, main_1.player[v].phys.shieldSize))))) {\n                            exports.articleHitQueue.push([a, v, true]);\n                            exports.aArticles[a].instance.hitList.push(v);\n                            if (exports.articles[exports.aArticles[a].name].canTurboCancel) {\n                                main_1.player[exports.aArticles[a].player].hasHit = true;\n                            }\n                        }\n                        else if (main_1.player[v].phys.hurtBoxState != 1) {\n                            if (articleHurtCollision(a, v, false) || (interpolate && (interpolatedArticleHurtCollision(a, v) ||\n                                articleHurtCollision(a, v, true)))) {\n                                exports.articleHitQueue.push([a, v, false]);\n                                exports.aArticles[a].instance.hitList.push(v);\n                                if (exports.articles[exports.aArticles[a].name].canTurboCancel) {\n                                    main_1.player[exports.aArticles[a].player].hasHit = true;\n                                }\n                                if (exports.aArticles[a].instance.destroyOnHit) {\n                                    exports.destroyArticleQueue.push(a);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nfunction executeArticleHits(input) {\n    for (var i = 0; i < exports.articleHitQueue.length; i++) {\n        var a = exports.articleHitQueue[i][0];\n        var v = exports.articleHitQueue[i][1];\n        var shieldHit = exports.articleHitQueue[i][2];\n        var o = exports.aArticles[a].player;\n        var hb = exports.aArticles[a].instance.hb;\n        var damage = hb.dmg;\n        if (shieldHit) {\n            if (main_1.player[v].phys.powerShieldReflectActive) {\n                (0, drawVfx_1.drawVfx)({\n                    name: \"powershieldreflect\",\n                    pos: main_1.player[v].phys.shieldPositionReal,\n                    face: main_1.player[v].phys.face\n                });\n                sfx_1.sounds.powershieldreflect.play();\n                exports.aArticles[a].player = v; // change ownership to victim\n                // reflects velocity\n                if (exports.aArticles[a].instance.vel != undefined || exports.aArticles[a].instance.vel != null) {\n                    exports.aArticles[a].instance.vel.x *= -1;\n                    exports.aArticles[a].instance.vel.y *= -1;\n                }\n                // cuts damage in half\n                exports.aArticles[a].instance.hb.dmg *= 0.5;\n            }\n            else {\n                main_1.player[v].phys.shieldHP -= damage;\n                if (main_1.player[v].phys.shieldHP < 0) {\n                    main_1.player[v].phys.shielding = false;\n                    main_1.player[v].phys.cVel.y = 2.5;\n                    main_1.player[v].phys.grounded = false;\n                    main_1.player[v].phys.shieldHP = 0;\n                    (0, drawVfx_1.drawVfx)({\n                        name: \"breakShield\",\n                        pos: main_1.player[v].phys.pos,\n                        face: main_1.player[v].phys.face\n                    });\n                    actionStateShortcuts_1.actionStates[main_1.characterSelections[v]].SHIELDBREAKFALL.init(v, input);\n                    sfx_1.sounds.shieldbreak.play();\n                    break;\n                }\n                if (exports.aArticles[a].instance.destroyOnHit) {\n                    exports.destroyArticleQueue.push(a);\n                }\n                (0, drawVfx_1.drawVfx)({\n                    name: \"clank\",\n                    pos: exports.aArticles[a].instance.pos,\n                    face: 1\n                });\n                main_1.player[v].hit.hitlag = Math.floor(damage * (1 / 3) + 3);\n                main_1.player[v].hit.shieldstun = ((Math.floor(damage) * ((0.65 * (1 - ((main_1.player[v].phys.shieldAnalog - 0.3) / 0.7))) +\n                    0.3)) * 1.5) + 2;\n                var victimPush = ((Math.floor(damage) * ((0.195 * (1 - ((main_1.player[v].phys.shieldAnalog - 0.3) / 0.7))) + 0.09)) +\n                    0.4) * 0.6;\n                if (victimPush > 2) {\n                    victimPush = 2;\n                }\n                if (exports.aArticles[a].instance.pos.x < main_1.player[v].phys.pos.x) {\n                    main_1.player[v].phys.cVel.x = victimPush;\n                }\n                else {\n                    main_1.player[v].phys.cVel.x = -victimPush;\n                }\n            }\n            actionStateShortcuts_1.actionStates[main_1.characterSelections[v]].GUARD.init(v, input);\n        }\n        else {\n            if (main_1.player[v].phys.hurtBoxState == 0) {\n                var crouching = actionStateShortcuts_1.actionStates[main_1.characterSelections[v]][main_1.player[v].actionState].crouch;\n                var vCancel = false;\n                if (main_1.player[v].phys.vCancelTimer > 0) {\n                    if (actionStateShortcuts_1.actionStates[main_1.characterSelections[v]][main_1.player[v].actionState].vCancel) {\n                        vCancel = true;\n                        sfx_1.sounds.vcancel.play();\n                    }\n                }\n                main_1.player[v].hit.knockback = (0, hitDetection_1.getKnockback)(hb, damage, damage, main_1.player[v].percent, main_1.player[v].charAttributes.weight, crouching, vCancel);\n                main_1.player[v].hit.hitPoint = exports.aArticles[a].instance.pos;\n                main_1.player[v].percent += damage;\n                switch (hb.type) {\n                    case 0:\n                        (0, drawVfx_1.drawVfx)({\n                            name: \"normalhit\",\n                            pos: main_1.player[v].hit.hitPoint,\n                            face: main_1.player[v].phys.face\n                        });\n                        break;\n                    case 1:\n                        (0, drawVfx_1.drawVfx)({\n                            name: \"hitSparks\",\n                            pos: main_1.player[v].hit.hitPoint,\n                            face: main_1.player[v].phys.face\n                        });\n                        (0, drawVfx_1.drawVfx)({\n                            name: \"hitFlair\",\n                            pos: main_1.player[v].hit.hitPoint,\n                            face: main_1.player[v].phys.face\n                        });\n                        (0, drawVfx_1.drawVfx)({\n                            name: \"hitCurve\",\n                            pos: main_1.player[v].hit.hitPoint,\n                            face: main_1.player[v].phys.face,\n                            f: main_1.player[v].hit.angle\n                        });\n                        break;\n                    default:\n                        break;\n                }\n                (0, hitDetection_1.knockbackSounds)(hb.type, main_1.player[v].hit.knockback, v);\n                if (main_1.player[v].hit.knockback > 0) {\n                    main_1.player[v].hit.angle = hb.angle;\n                    if (main_1.player[v].hit.angle == 361) {\n                        if (main_1.player[v].hit.knockback < 32.1) {\n                            main_1.player[v].hit.angle = 0;\n                        }\n                        else if (main_1.player[v].hit.knockback >= 32.1) {\n                            main_1.player[v].hit.angle = 44;\n                        }\n                    }\n                    main_1.player[v].hit.hitlag = Math.floor(damage * (1 / 3) + 3);\n                    if (exports.aArticles[a].instance.pos.x < main_1.player[v].phys.pos.x) {\n                        main_1.player[v].hit.reverse = false;\n                        main_1.player[v].phys.face = -1;\n                    }\n                    else {\n                        main_1.player[v].hit.reverse = true;\n                        main_1.player[v].phys.face = 1;\n                    }\n                    var isThrow = false;\n                    if (main_1.player[v].phys.grabbedBy == -1 || (main_1.player[v].phys.grabbedBy > -1 && main_1.player[v].hit.knockback > 50)) {\n                        main_1.player[v].hit.hitstun = (0, hitDetection_1.getHitstun)(main_1.player[v].hit.knockback);\n                        if (main_1.player[v].hit.knockback >= 80 || isThrow) {\n                            actionStateShortcuts_1.actionStates[main_1.characterSelections[v]].DAMAGEFLYN.init(v, input, !isThrow);\n                        }\n                        else {\n                            actionStateShortcuts_1.actionStates[main_1.characterSelections[v]].DAMAGEN2.init(v, input);\n                        }\n                    }\n                    else {\n                        if (main_1.player[v].actionState != \"THROWNPUFFDOWN\") {\n                            actionStateShortcuts_1.actionStates[main_1.characterSelections[v]].CAPTUREDAMAGE.init(v, input);\n                        }\n                    }\n                    if (main_1.player[v].phys.grounded && main_1.player[v].hit.angle > 180) {\n                        if (main_1.player[v].hit.knockback >= 80) {\n                            sfx_1.sounds.bounce.play();\n                            (0, drawVfx_1.drawVfx)({\n                                name: \"groundBounce\",\n                                pos: main_1.player[v].phys.pos,\n                                face: main_1.player[v].phys.face\n                            });\n                            main_1.player[v].hit.angle = 360 - main_1.player[v].hit.angle;\n                            main_1.player[v].hit.knockback *= 0.8;\n                        }\n                    }\n                    (0, main_1.screenShake)(main_1.player[v].hit.knockback);\n                    (0, main_1.percentShake)(main_1.player[v].hit.knockback, v);\n                }\n            }\n            else {\n                sfx_1.sounds.blunthit.play();\n                (0, drawVfx_1.drawVfx)({\n                    name: \"clank\",\n                    pos: exports.aArticles[a].instance.pos\n                });\n            }\n        }\n    }\n}\nfunction wallDetection(i) {\n    const article = exports.aArticles[i].instance;\n    const ecbp = article.ecb;\n    let ecb1;\n    if (article.timer < 2) {\n        const focus = article.posPrev;\n        const offset = 0.0001;\n        ecb1 = [new Vec2D_1.Vec2D(focus.x, focus.y - offset),\n            new Vec2D_1.Vec2D(focus.x + offset, focus.y),\n            new Vec2D_1.Vec2D(focus.x, focus.y + offset),\n            new Vec2D_1.Vec2D(focus.x - offset, focus.y)\n        ];\n    }\n    else {\n        ecb1 = (0, ecbTransform_1.moveECB)(ecbp, (0, linAlg_1.subtract)(article.posPrev, article.pos));\n    }\n    let collisions = [];\n    let thisCollision = null;\n    for (var j = 0; j < activeStage_1.activeStage.wallL.length; j++) {\n        thisCollision = (0, environmentalCollision_1.findCollision)(ecb1, ecbp, [activeStage_1.activeStage.wallL[j], [\"l\", j]]);\n        if (thisCollision !== null) {\n            collisions.push(thisCollision);\n        }\n    }\n    for (var j = 0; j < activeStage_1.activeStage.wallR.length; j++) {\n        thisCollision = (0, environmentalCollision_1.findCollision)(ecb1, ecbp, [activeStage_1.activeStage.wallR[j], [\"r\", j]]);\n        if (thisCollision !== null) {\n            collisions.push(thisCollision);\n        }\n    }\n    for (var j = 0; j < activeStage_1.activeStage.ceiling.length; j++) {\n        thisCollision = (0, environmentalCollision_1.findCollision)(ecb1, ecbp, [activeStage_1.activeStage.ceiling[j], [\"c\", j]]);\n        if (thisCollision !== null) {\n            collisions.push(thisCollision);\n        }\n    }\n    for (var j = 0; j < activeStage_1.activeStage.ground.length; j++) {\n        thisCollision = (0, environmentalCollision_1.findCollision)(ecb1, ecbp, [activeStage_1.activeStage.ground[j], [\"g\", j]]);\n        if (thisCollision !== null) {\n            collisions.push(thisCollision);\n            ;\n        }\n    }\n    for (var j = 0; j < activeStage_1.activeStage.platform.length; j++) {\n        thisCollision = (0, environmentalCollision_1.findCollision)(ecb1, ecbp, [activeStage_1.activeStage.platform[j], [\"p\", j]]);\n        if (thisCollision !== null) {\n            collisions.push(thisCollision);\n        }\n    }\n    let firstCollision = (0, findSmallestWithin_1.pickSmallestSweep)(collisions);\n    if (firstCollision !== null) {\n        return firstCollision.sweep;\n    }\n    else {\n        return null;\n    }\n}\nfunction articleHitCollision(a, v, k) {\n    var hbpos = exports.aArticles[a].instance.pos;\n    var hbpos2 = new Vec2D_1.Vec2D(main_1.player[v].phys.pos.x + (main_1.player[v].hitboxes.id[k].offset[main_1.player[v].hitboxes.frame].x * main_1.player[v].phys.face), main_1.player[v].phys.pos.y + main_1.player[v].hitboxes.id[k].offset[main_1.player[v].hitboxes.frame].y);\n    var hitPoint = new Vec2D_1.Vec2D((hbpos.x + hbpos2.x) / 2, (hbpos.y + hbpos2.y) / 2);\n    return (Math.pow(hbpos2.x - hbpos.x, 2) + Math.pow(hbpos.y - hbpos2.y, 2) <= Math.pow(exports.aArticles[a].instance.hb.size +\n        main_1.player[v].hitboxes.id[k].size, 2));\n    //return [(Math.pow(hbpos2.x-hbpos.x,2) + Math.pow(hbpos.y-hbpos2.y,2) <= Math.pow(aArticles[a].instance.hb.size+player[v].hitboxes.id[k].size,2)),hitPoint];\n}\nfunction articleShieldCollision(a, v, previous) {\n    if (previous) {\n        var hbpos = exports.aArticles[a].instance.posPrev;\n    }\n    else {\n        var hbpos = exports.aArticles[a].instance.pos;\n    }\n    var shieldpos = main_1.player[v].phys.shieldPositionReal;\n    return (Math.pow(shieldpos.x - hbpos.x, 2) + Math.pow(hbpos.y - shieldpos.y, 2) <= Math.pow(exports.aArticles[a].instance.hb.size +\n        main_1.player[v].phys.shieldSize, 2));\n}\nfunction interpolatedArticleCircleCollision(a, circlePos, r) {\n    const h1 = exports.aArticles[a].instance.posPrev;\n    const h2 = exports.aArticles[a].instance.pos;\n    const s = exports.aArticles[a].instance.hb.size;\n    const collision = (0, interpolatedCollision_1.sweepCircleVsSweepCircle)(h1, s, h2, s, circlePos, r, circlePos, r);\n    if (collision === null) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nfunction interpolatedArticleHurtCollision(a, v) {\n    const hurt = main_1.player[v].phys.hurtbox;\n    const h1 = exports.aArticles[a].instance.posPrev;\n    const h2 = exports.aArticles[a].instance.pos;\n    const r = exports.aArticles[a].instance.hb.size;\n    const collision = (0, interpolatedCollision_1.sweepCircleVsAABB)(h1, r, h2, r, hurt.min, hurt.max);\n    if (collision === null) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nfunction articleHurtCollision(a, v, previous) {\n    if (previous) {\n        var hbpos = exports.aArticles[a].instance.posPrev;\n    }\n    else {\n        var hbpos = exports.aArticles[a].instance.pos;\n    }\n    var hurtCenter = new Vec2D_1.Vec2D((main_1.player[v].phys.hurtbox.min.x + main_1.player[v].phys.hurtbox.max.x) / 2, (main_1.player[v].phys.hurtbox\n        .min.y + main_1.player[v].phys.hurtbox.max.y) / 2);\n    var distance = new Vec2D_1.Vec2D(Math.abs(hbpos.x - hurtCenter.x), Math.abs(hbpos.y - hurtCenter.y));\n    var hurtWidth = 8;\n    var hurtHeight = 18;\n    if (distance.x > (hurtWidth / 2 + exports.aArticles[a].instance.hb.size)) {\n        return false;\n    }\n    if (distance.y > (hurtHeight / 2 + exports.aArticles[a].instance.hb.size)) {\n        return false;\n    }\n    if (distance.x <= (hurtWidth / 2)) {\n        return true;\n    }\n    if (distance.y <= (hurtHeight / 2)) {\n        return true;\n    }\n    var cornerDistance_sq = Math.pow(distance.x - hurtWidth / 2, 2) +\n        Math.pow(distance.y - hurtHeight / 2, 2);\n    return (cornerDistance_sq <= (Math.pow(exports.aArticles[a].instance.hb.size, 2)));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/physics/article.ts\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("853d16988caf7b71bd2d")
/******/ })();
/******/ 
/******/ }
);